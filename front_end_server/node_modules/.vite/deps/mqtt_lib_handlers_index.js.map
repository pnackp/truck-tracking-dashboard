{
  "version": 3,
  "sources": ["../../mqtt/src/lib/handlers/publish.ts", "../../mqtt/package.json", "../../mqtt/src/lib/shared.ts", "../../mqtt/src/lib/handlers/ack.ts", "../../mqtt/src/lib/handlers/auth.ts", "../../mqtt/node_modules/lru-cache/src/index.ts", "../../js-sdsl/dist/esm/container/ContainerBase/container/ContainerBase/index.js", "../../js-sdsl/dist/esm/src/container/ContainerBase/index.ts", "../../js-sdsl/dist/esm/container/OtherContainer/container/OtherContainer/Stack.js", "../../js-sdsl/dist/esm/src/container/OtherContainer/Stack.ts", "../../js-sdsl/dist/esm/container/OtherContainer/container/OtherContainer/Queue.js", "../../js-sdsl/dist/esm/src/container/OtherContainer/Queue.ts", "../../js-sdsl/dist/esm/container/OtherContainer/container/OtherContainer/PriorityQueue.js", "../../js-sdsl/dist/esm/src/container/OtherContainer/PriorityQueue.ts", "../../js-sdsl/dist/esm/container/SequentialContainer/Base/container/SequentialContainer/Base/index.js", "../../js-sdsl/dist/esm/container/src/container/SequentialContainer/Base/index.ts", "../../js-sdsl/dist/src/utils/throwError.ts", "../../js-sdsl/dist/esm/utils/utils/throwError.js", "../../js-sdsl/dist/esm/container/SequentialContainer/Base/container/SequentialContainer/Base/RandomIterator.js", "../../js-sdsl/dist/esm/container/src/container/SequentialContainer/Base/RandomIterator.ts", "../../js-sdsl/dist/esm/container/SequentialContainer/container/SequentialContainer/Vector.js", "../../js-sdsl/dist/esm/src/container/SequentialContainer/Vector.ts", "../../js-sdsl/dist/esm/container/SequentialContainer/container/SequentialContainer/LinkList.js", "../../js-sdsl/dist/esm/src/container/SequentialContainer/LinkList.ts", "../../js-sdsl/dist/esm/container/SequentialContainer/container/SequentialContainer/Deque.js", "../../js-sdsl/dist/esm/src/container/SequentialContainer/Deque.ts", "../../js-sdsl/dist/esm/container/TreeContainer/Base/container/TreeContainer/Base/TreeNode.js", "../../js-sdsl/dist/esm/container/src/container/TreeContainer/Base/TreeNode.ts", "../../js-sdsl/dist/esm/container/TreeContainer/Base/container/TreeContainer/Base/index.js", "../../js-sdsl/dist/esm/container/src/container/TreeContainer/Base/index.ts", "../../js-sdsl/dist/esm/container/TreeContainer/Base/container/TreeContainer/Base/TreeIterator.js", "../../js-sdsl/dist/esm/container/src/container/TreeContainer/Base/TreeIterator.ts", "../../js-sdsl/dist/esm/container/TreeContainer/container/TreeContainer/OrderedSet.js", "../../js-sdsl/dist/esm/src/container/TreeContainer/OrderedSet.ts", "../../js-sdsl/dist/esm/container/TreeContainer/container/TreeContainer/OrderedMap.js", "../../js-sdsl/dist/esm/src/container/TreeContainer/OrderedMap.ts", "../../js-sdsl/dist/src/utils/checkObject.ts", "../../js-sdsl/dist/esm/utils/utils/checkObject.js", "../../js-sdsl/dist/esm/container/HashContainer/Base/container/HashContainer/Base/index.js", "../../js-sdsl/dist/esm/container/src/container/HashContainer/Base/index.ts", "../../js-sdsl/dist/esm/container/HashContainer/container/HashContainer/HashSet.js", "../../js-sdsl/dist/esm/src/container/HashContainer/HashSet.ts", "../../js-sdsl/dist/esm/container/HashContainer/container/HashContainer/HashMap.js", "../../js-sdsl/dist/esm/src/container/HashContainer/HashMap.ts", "../../ms/index.js", "../../debug/src/common.js", "../../debug/src/browser.js", "../../number-allocator/lib/number-allocator.js", "../../number-allocator/index.js", "../../mqtt/src/lib/topic-alias-send.ts", "../../mqtt/src/lib/handlers/connack.ts", "../../mqtt/src/lib/handlers/pubrel.ts", "../../mqtt/src/lib/handlers/index.ts"],
  "sourcesContent": [null, "{\n  \"name\": \"mqtt\",\n  \"description\": \"A library for the MQTT protocol\",\n  \"version\": \"5.14.1\",\n  \"contributors\": [\n    \"Adam Rudd <adamvrr@gmail.com>\",\n    \"Matteo Collina <matteo.collina@gmail.com> (https://github.com/mcollina)\",\n    \"Siarhei Buntsevich <scarry0506@gmail.com> (https://github.com/scarry1992)\",\n    \"Yoseph Maguire <yomaguir@microsoft.com> (https://github.com/YoDaMa)\",\n    \"Daniel Lando <daniel.sorridi@gmail.com> (https://github.com/robertsLando)\"\n  ],\n  \"keywords\": [\n    \"mqtt\",\n    \"publish/subscribe\",\n    \"publish\",\n    \"subscribe\"\n  ],\n  \"license\": \"MIT\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/mqttjs/MQTT.js.git\"\n  },\n  \"main\": \"./build/index.js\",\n  \"module\": \"./dist/mqtt.esm.js\",\n  \"bin\": {\n    \"mqtt_pub\": \"./build/bin/pub.js\",\n    \"mqtt_sub\": \"./build/bin/sub.js\",\n    \"mqtt\": \"./build/bin/mqtt.js\"\n  },\n  \"files\": [\n    \"dist/\",\n    \"CONTRIBUTING.md\",\n    \"LICENSE.md\",\n    \"help/\",\n    \"build/\"\n  ],\n  \"exports\": {\n    \".\": {\n      \"react-native\": \"./dist/mqtt.esm.js\",\n      \"browser\": {\n        \"import\": \"./dist/mqtt.esm.js\",\n        \"default\": \"./dist/mqtt.min.js\"\n      },\n      \"default\": \"./build/index.js\"\n    },\n    \"./package.json\": \"./package.json\",\n    \"./*.map\": \"./build/*.js.map\",\n    \"./dist/*\": \"./dist/*.js\",\n    \"./*\": \"./build/*.js\"\n  },\n  \"types\": \"build/index.d.ts\",\n  \"typesVersions\": {\n    \"*\": {\n      \"*\": [\n        \"./build/index.d.ts\"\n      ]\n    }\n  },\n  \"scripts\": {\n    \"lint\": \"eslint --ext .ts .\",\n    \"lint-fix\": \"eslint --fix --ext .ts .\",\n    \"build:ts\": \"rimraf build/ && tsc -p tsconfig.build.json\",\n    \"build:browser\": \"node esbuild.js\",\n    \"build\": \"npm run build:ts && npm run build:browser\",\n    \"prepare\": \"npm run build\",\n    \"unit-test:node\": \"node -r esbuild-register --test-concurrency 4 --test-reporter=junit --test-reporter-destination=junit.xml --test-reporter=spec --test-reporter-destination=stdout --test test/node/*.ts \",\n    \"unit-test:browser\": \"wtr\",\n    \"test:node\": \"node_modules/.bin/nyc npm run unit-test:node\",\n    \"test:browser\": \"npm run build && npm run unit-test:browser\",\n    \"test\": \"npm run test:node\",\n    \"changelog\": \"conventional-changelog -p angular -i CHANGELOG.md -s && git add CHANGELOG.md\",\n    \"changelog-init\": \"conventional-changelog -p angular -i CHANGELOG.md -s -r 0\",\n    \"release\": \"read -p 'GITHUB_TOKEN: ' GITHUB_TOKEN && export GITHUB_TOKEN=$GITHUB_TOKEN && release-it\"\n  },\n  \"release-it\": {\n    \"github\": {\n      \"release\": true\n    },\n    \"git\": {\n      \"tagName\": \"v${version}\",\n      \"commitMessage\": \"chore(release): ${version}\"\n    },\n    \"hooks\": {\n      \"before:init\": [\n        \"npm run test\"\n      ]\n    },\n    \"npm\": {\n      \"publish\": true\n    },\n    \"plugins\": {\n      \"@release-it/conventional-changelog\": {\n        \"preset\": \"angular\",\n        \"infile\": \"CHANGELOG.md\"\n      }\n    }\n  },\n  \"publishConfig\": {\n    \"provenance\": true\n  },\n  \"pre-commit\": [\n    \"lint\"\n  ],\n  \"engines\": {\n    \"node\": \">=16.0.0\"\n  },\n  \"browser\": {\n    \"./mqtt.js\": \"./dist/mqtt.js\",\n    \"fs\": false,\n    \"tls\": false,\n    \"net\": false\n  },\n  \"dependencies\": {\n    \"@types/readable-stream\": \"^4.0.21\",\n    \"@types/ws\": \"^8.18.1\",\n    \"commist\": \"^3.2.0\",\n    \"concat-stream\": \"^2.0.0\",\n    \"debug\": \"^4.4.1\",\n    \"help-me\": \"^5.0.0\",\n    \"lru-cache\": \"^10.4.3\",\n    \"minimist\": \"^1.2.8\",\n    \"mqtt-packet\": \"^9.0.2\",\n    \"number-allocator\": \"^1.0.14\",\n    \"readable-stream\": \"^4.7.0\",\n    \"rfdc\": \"^1.4.1\",\n    \"socks\": \"^2.8.6\",\n    \"split2\": \"^4.2.0\",\n    \"worker-timers\": \"^8.0.23\",\n    \"ws\": \"^8.18.3\"\n  },\n  \"devDependencies\": {\n    \"@eslint/eslintrc\": \"^3.3.1\",\n    \"@eslint/js\": \"^9.32.0\",\n    \"@esm-bundle/chai\": \"^4.3.4\",\n    \"@release-it/conventional-changelog\": \"^10.0.1\",\n    \"@tsconfig/node20\": \"^20.1.6\",\n    \"@types/chai\": \"^5.2.2\",\n    \"@types/node\": \"^20.17.16\",\n    \"@types/sinon\": \"^17.0.4\",\n    \"@types/tape\": \"^5.8.1\",\n    \"@typescript-eslint/eslint-plugin\": \"^8.38.0\",\n    \"@typescript-eslint/parser\": \"^8.38.0\",\n    \"@web/test-runner\": \"^0.20.2\",\n    \"@web/test-runner-playwright\": \"^0.11.1\",\n    \"aedes-cli\": \"^0.8.0\",\n    \"chai\": \"^5.2.1\",\n    \"chokidar\": \"^4.0.3\",\n    \"conventional-changelog-cli\": \"^5.0.0\",\n    \"end-of-stream\": \"^1.4.5\",\n    \"esbuild\": \"^0.25.8\",\n    \"esbuild-plugin-polyfill-node\": \"^0.3.0\",\n    \"esbuild-register\": \"^3.6.0\",\n    \"eslint\": \"^9.32.0\",\n    \"eslint-config-prettier\": \"^10.1.8\",\n    \"eslint-plugin-import\": \"^2.32.0\",\n    \"eslint-plugin-prettier\": \"^5.5.3\",\n    \"global\": \"^4.4.0\",\n    \"globals\": \"^16.3.0\",\n    \"leaked-handles\": \"^5.2.0\",\n    \"mkdirp\": \"^3.0.1\",\n    \"mqtt-connection\": \"^4.1.0\",\n    \"mqtt-level-store\": \"^3.1.0\",\n    \"nyc\": \"^17.1.0\",\n    \"pre-commit\": \"^1.2.2\",\n    \"prettier\": \"^3.6.2\",\n    \"release-it\": \"^19.0.4\",\n    \"rimraf\": \"^6.0.1\",\n    \"should\": \"^13.2.3\",\n    \"sinon\": \"^17.0.2\",\n    \"snazzy\": \"^9.0.0\",\n    \"tape\": \"^5.9.0\",\n    \"ts-node\": \"^10.9.2\",\n    \"typescript\": \"^5.8.3\"\n  }\n}\n", null, null, null, "/**\n * @module LRUCache\n */\n\n// module-private names and types\ntype Perf = { now: () => number }\nconst perf: Perf =\n  typeof performance === 'object' &&\n  performance &&\n  typeof performance.now === 'function'\n    ? performance\n    : Date\n\nconst warned = new Set<string>()\n\n// either a function or a class\ntype ForC = ((...a: any[]) => any) | { new (...a: any[]): any }\n\n/* c8 ignore start */\nconst PROCESS = (\n  typeof process === 'object' && !!process ? process : {}\n) as { [k: string]: any }\n/* c8 ignore start */\n\nconst emitWarning = (\n  msg: string,\n  type: string,\n  code: string,\n  fn: ForC\n) => {\n  typeof PROCESS.emitWarning === 'function'\n    ? PROCESS.emitWarning(msg, type, code, fn)\n    : console.error(`[${code}] ${type}: ${msg}`)\n}\n\nlet AC = globalThis.AbortController\nlet AS = globalThis.AbortSignal\n\n/* c8 ignore start */\nif (typeof AC === 'undefined') {\n  //@ts-ignore\n  AS = class AbortSignal {\n    onabort?: (...a: any[]) => any\n    _onabort: ((...a: any[]) => any)[] = []\n    reason?: any\n    aborted: boolean = false\n    addEventListener(_: string, fn: (...a: any[]) => any) {\n      this._onabort.push(fn)\n    }\n  }\n  //@ts-ignore\n  AC = class AbortController {\n    constructor() {\n      warnACPolyfill()\n    }\n    signal = new AS()\n    abort(reason: any) {\n      if (this.signal.aborted) return\n      //@ts-ignore\n      this.signal.reason = reason\n      //@ts-ignore\n      this.signal.aborted = true\n      //@ts-ignore\n      for (const fn of this.signal._onabort) {\n        fn(reason)\n      }\n      this.signal.onabort?.(reason)\n    }\n  }\n  let printACPolyfillWarning =\n    PROCESS.env?.LRU_CACHE_IGNORE_AC_WARNING !== '1'\n  const warnACPolyfill = () => {\n    if (!printACPolyfillWarning) return\n    printACPolyfillWarning = false\n    emitWarning(\n      'AbortController is not defined. If using lru-cache in ' +\n        'node 14, load an AbortController polyfill from the ' +\n        '`node-abort-controller` package. A minimal polyfill is ' +\n        'provided for use by LRUCache.fetch(), but it should not be ' +\n        'relied upon in other contexts (eg, passing it to other APIs that ' +\n        'use AbortController/AbortSignal might have undesirable effects). ' +\n        'You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.',\n      'NO_ABORT_CONTROLLER',\n      'ENOTSUP',\n      warnACPolyfill\n    )\n  }\n}\n/* c8 ignore stop */\n\nconst shouldWarn = (code: string) => !warned.has(code)\n\nconst TYPE = Symbol('type')\nexport type PosInt = number & { [TYPE]: 'Positive Integer' }\nexport type Index = number & { [TYPE]: 'LRUCache Index' }\n\nconst isPosInt = (n: any): n is PosInt =>\n  n && n === Math.floor(n) && n > 0 && isFinite(n)\n\nexport type UintArray = Uint8Array | Uint16Array | Uint32Array\nexport type NumberArray = UintArray | number[]\n\n/* c8 ignore start */\n// This is a little bit ridiculous, tbh.\n// The maximum array length is 2^32-1 or thereabouts on most JS impls.\n// And well before that point, you're caching the entire world, I mean,\n// that's ~32GB of just integers for the next/prev links, plus whatever\n// else to hold that many keys and values.  Just filling the memory with\n// zeroes at init time is brutal when you get that big.\n// But why not be complete?\n// Maybe in the future, these limits will have expanded.\nconst getUintArray = (max: number) =>\n  !isPosInt(max)\n    ? null\n    : max <= Math.pow(2, 8)\n    ? Uint8Array\n    : max <= Math.pow(2, 16)\n    ? Uint16Array\n    : max <= Math.pow(2, 32)\n    ? Uint32Array\n    : max <= Number.MAX_SAFE_INTEGER\n    ? ZeroArray\n    : null\n/* c8 ignore stop */\n\nclass ZeroArray extends Array<number> {\n  constructor(size: number) {\n    super(size)\n    this.fill(0)\n  }\n}\nexport type { ZeroArray }\nexport type { Stack }\n\nexport type StackLike = Stack | Index[]\nclass Stack {\n  heap: NumberArray\n  length: number\n  // private constructor\n  static #constructing: boolean = false\n  static create(max: number): StackLike {\n    const HeapCls = getUintArray(max)\n    if (!HeapCls) return []\n    Stack.#constructing = true\n    const s = new Stack(max, HeapCls)\n    Stack.#constructing = false\n    return s\n  }\n  constructor(\n    max: number,\n    HeapCls: { new (n: number): NumberArray }\n  ) {\n    /* c8 ignore start */\n    if (!Stack.#constructing) {\n      throw new TypeError('instantiate Stack using Stack.create(n)')\n    }\n    /* c8 ignore stop */\n    this.heap = new HeapCls(max)\n    this.length = 0\n  }\n  push(n: Index) {\n    this.heap[this.length++] = n\n  }\n  pop(): Index {\n    return this.heap[--this.length] as Index\n  }\n}\n\n/**\n * Promise representing an in-progress {@link LRUCache#fetch} call\n */\nexport type BackgroundFetch<V> = Promise<V | undefined> & {\n  __returned: BackgroundFetch<V> | undefined\n  __abortController: AbortController\n  __staleWhileFetching: V | undefined\n}\n\nexport type DisposeTask<K, V> = [\n  value: V,\n  key: K,\n  reason: LRUCache.DisposeReason\n]\n\nexport namespace LRUCache {\n  /**\n   * An integer greater than 0, reflecting the calculated size of items\n   */\n  export type Size = number\n\n  /**\n   * Integer greater than 0, representing some number of milliseconds, or the\n   * time at which a TTL started counting from.\n   */\n  export type Milliseconds = number\n\n  /**\n   * An integer greater than 0, reflecting a number of items\n   */\n  export type Count = number\n\n  /**\n   * The reason why an item was removed from the cache, passed\n   * to the {@link Disposer} methods.\n   *\n   * - `evict`: The item was evicted because it is the least recently used,\n   *   and the cache is full.\n   * - `set`: A new value was set, overwriting the old value being disposed.\n   * - `delete`: The item was explicitly deleted, either by calling\n   *   {@link LRUCache#delete}, {@link LRUCache#clear}, or\n   *   {@link LRUCache#set} with an undefined value.\n   * - `expire`: The item was removed due to exceeding its TTL.\n   * - `fetch`: A {@link OptionsBase#fetchMethod} operation returned\n   *   `undefined` or was aborted, causing the item to be deleted.\n   */\n  export type DisposeReason =\n    | 'evict'\n    | 'set'\n    | 'delete'\n    | 'expire'\n    | 'fetch'\n  /**\n   * A method called upon item removal, passed as the\n   * {@link OptionsBase.dispose} and/or\n   * {@link OptionsBase.disposeAfter} options.\n   */\n  export type Disposer<K, V> = (\n    value: V,\n    key: K,\n    reason: DisposeReason\n  ) => void\n\n  /**\n   * A function that returns the effective calculated size\n   * of an entry in the cache.\n   */\n  export type SizeCalculator<K, V> = (value: V, key: K) => Size\n\n  /**\n   * Options provided to the\n   * {@link OptionsBase.fetchMethod} function.\n   */\n  export interface FetcherOptions<K, V, FC = unknown> {\n    signal: AbortSignal\n    options: FetcherFetchOptions<K, V, FC>\n    /**\n     * Object provided in the {@link FetchOptions.context} option to\n     * {@link LRUCache#fetch}\n     */\n    context: FC\n  }\n\n  /**\n   * Occasionally, it may be useful to track the internal behavior of the\n   * cache, particularly for logging, debugging, or for behavior within the\n   * `fetchMethod`. To do this, you can pass a `status` object to the\n   * {@link LRUCache#fetch}, {@link LRUCache#get}, {@link LRUCache#set},\n   * {@link LRUCache#memo}, and {@link LRUCache#has} methods.\n   *\n   * The `status` option should be a plain JavaScript object. The following\n   * fields will be set on it appropriately, depending on the situation.\n   */\n  export interface Status<V> {\n    /**\n     * The status of a set() operation.\n     *\n     * - add: the item was not found in the cache, and was added\n     * - update: the item was in the cache, with the same value provided\n     * - replace: the item was in the cache, and replaced\n     * - miss: the item was not added to the cache for some reason\n     */\n    set?: 'add' | 'update' | 'replace' | 'miss'\n\n    /**\n     * the ttl stored for the item, or undefined if ttls are not used.\n     */\n    ttl?: Milliseconds\n\n    /**\n     * the start time for the item, or undefined if ttls are not used.\n     */\n    start?: Milliseconds\n\n    /**\n     * The timestamp used for TTL calculation\n     */\n    now?: Milliseconds\n\n    /**\n     * the remaining ttl for the item, or undefined if ttls are not used.\n     */\n    remainingTTL?: Milliseconds\n\n    /**\n     * The calculated size for the item, if sizes are used.\n     */\n    entrySize?: Size\n\n    /**\n     * The total calculated size of the cache, if sizes are used.\n     */\n    totalCalculatedSize?: Size\n\n    /**\n     * A flag indicating that the item was not stored, due to exceeding the\n     * {@link OptionsBase.maxEntrySize}\n     */\n    maxEntrySizeExceeded?: true\n\n    /**\n     * The old value, specified in the case of `set:'update'` or\n     * `set:'replace'`\n     */\n    oldValue?: V\n\n    /**\n     * The results of a {@link LRUCache#has} operation\n     *\n     * - hit: the item was found in the cache\n     * - stale: the item was found in the cache, but is stale\n     * - miss: the item was not found in the cache\n     */\n    has?: 'hit' | 'stale' | 'miss'\n\n    /**\n     * The status of a {@link LRUCache#fetch} operation.\n     * Note that this can change as the underlying fetch() moves through\n     * various states.\n     *\n     * - inflight: there is another fetch() for this key which is in process\n     * - get: there is no {@link OptionsBase.fetchMethod}, so\n     *   {@link LRUCache#get} was called.\n     * - miss: the item is not in cache, and will be fetched.\n     * - hit: the item is in the cache, and was resolved immediately.\n     * - stale: the item is in the cache, but stale.\n     * - refresh: the item is in the cache, and not stale, but\n     *   {@link FetchOptions.forceRefresh} was specified.\n     */\n    fetch?: 'get' | 'inflight' | 'miss' | 'hit' | 'stale' | 'refresh'\n\n    /**\n     * The {@link OptionsBase.fetchMethod} was called\n     */\n    fetchDispatched?: true\n\n    /**\n     * The cached value was updated after a successful call to\n     * {@link OptionsBase.fetchMethod}\n     */\n    fetchUpdated?: true\n\n    /**\n     * The reason for a fetch() rejection.  Either the error raised by the\n     * {@link OptionsBase.fetchMethod}, or the reason for an\n     * AbortSignal.\n     */\n    fetchError?: Error\n\n    /**\n     * The fetch received an abort signal\n     */\n    fetchAborted?: true\n\n    /**\n     * The abort signal received was ignored, and the fetch was allowed to\n     * continue.\n     */\n    fetchAbortIgnored?: true\n\n    /**\n     * The fetchMethod promise resolved successfully\n     */\n    fetchResolved?: true\n\n    /**\n     * The fetchMethod promise was rejected\n     */\n    fetchRejected?: true\n\n    /**\n     * The status of a {@link LRUCache#get} operation.\n     *\n     * - fetching: The item is currently being fetched.  If a previous value\n     *   is present and allowed, that will be returned.\n     * - stale: The item is in the cache, and is stale.\n     * - hit: the item is in the cache\n     * - miss: the item is not in the cache\n     */\n    get?: 'stale' | 'hit' | 'miss'\n\n    /**\n     * A fetch or get operation returned a stale value.\n     */\n    returnedStale?: true\n  }\n\n  /**\n   * options which override the options set in the LRUCache constructor\n   * when calling {@link LRUCache#fetch}.\n   *\n   * This is the union of {@link GetOptions} and {@link SetOptions}, plus\n   * {@link OptionsBase.noDeleteOnFetchRejection},\n   * {@link OptionsBase.allowStaleOnFetchRejection},\n   * {@link FetchOptions.forceRefresh}, and\n   * {@link FetcherOptions.context}\n   *\n   * Any of these may be modified in the {@link OptionsBase.fetchMethod}\n   * function, but the {@link GetOptions} fields will of course have no\n   * effect, as the {@link LRUCache#get} call already happened by the time\n   * the fetchMethod is called.\n   */\n  export interface FetcherFetchOptions<K, V, FC = unknown>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      | 'allowStale'\n      | 'updateAgeOnGet'\n      | 'noDeleteOnStaleGet'\n      | 'sizeCalculation'\n      | 'ttl'\n      | 'noDisposeOnSet'\n      | 'noUpdateTTL'\n      | 'noDeleteOnFetchRejection'\n      | 'allowStaleOnFetchRejection'\n      | 'ignoreFetchAbort'\n      | 'allowStaleOnFetchAbort'\n    > {\n    status?: Status<V>\n    size?: Size\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#fetch} method.\n   */\n  export interface FetchOptions<K, V, FC>\n    extends FetcherFetchOptions<K, V, FC> {\n    /**\n     * Set to true to force a re-load of the existing data, even if it\n     * is not yet stale.\n     */\n    forceRefresh?: boolean\n    /**\n     * Context provided to the {@link OptionsBase.fetchMethod} as\n     * the {@link FetcherOptions.context} param.\n     *\n     * If the FC type is specified as unknown (the default),\n     * undefined or void, then this is optional.  Otherwise, it will\n     * be required.\n     */\n    context?: FC\n    signal?: AbortSignal\n    status?: Status<V>\n  }\n  /**\n   * Options provided to {@link LRUCache#fetch} when the FC type is something\n   * other than `unknown`, `undefined`, or `void`\n   */\n  export interface FetchOptionsWithContext<K, V, FC>\n    extends FetchOptions<K, V, FC> {\n    context: FC\n  }\n  /**\n   * Options provided to {@link LRUCache#fetch} when the FC type is\n   * `undefined` or `void`\n   */\n  export interface FetchOptionsNoContext<K, V>\n    extends FetchOptions<K, V, undefined> {\n    context?: undefined\n  }\n\n  export interface MemoOptions<K, V, FC = unknown>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      | 'allowStale'\n      | 'updateAgeOnGet'\n      | 'noDeleteOnStaleGet'\n      | 'sizeCalculation'\n      | 'ttl'\n      | 'noDisposeOnSet'\n      | 'noUpdateTTL'\n      | 'noDeleteOnFetchRejection'\n      | 'allowStaleOnFetchRejection'\n      | 'ignoreFetchAbort'\n      | 'allowStaleOnFetchAbort'\n    > {\n    /**\n     * Set to true to force a re-load of the existing data, even if it\n     * is not yet stale.\n     */\n    forceRefresh?: boolean\n    /**\n     * Context provided to the {@link OptionsBase.memoMethod} as\n     * the {@link MemoizerOptions.context} param.\n     *\n     * If the FC type is specified as unknown (the default),\n     * undefined or void, then this is optional.  Otherwise, it will\n     * be required.\n     */\n    context?: FC\n    status?: Status<V>\n  }\n  /**\n   * Options provided to {@link LRUCache#memo} when the FC type is something\n   * other than `unknown`, `undefined`, or `void`\n   */\n  export interface MemoOptionsWithContext<K, V, FC>\n    extends MemoOptions<K, V, FC> {\n    context: FC\n  }\n  /**\n   * Options provided to {@link LRUCache#memo} when the FC type is\n   * `undefined` or `void`\n   */\n  export interface MemoOptionsNoContext<K, V>\n    extends MemoOptions<K, V, undefined> {\n    context?: undefined\n  }\n\n  /**\n   * Options provided to the\n   * {@link OptionsBase.memoMethod} function.\n   */\n  export interface MemoizerOptions<K, V, FC = unknown> {\n    options: MemoizerMemoOptions<K, V, FC>\n    /**\n     * Object provided in the {@link MemoOptions.context} option to\n     * {@link LRUCache#memo}\n     */\n    context: FC\n  }\n\n  /**\n   * options which override the options set in the LRUCache constructor\n   * when calling {@link LRUCache#memo}.\n   *\n   * This is the union of {@link GetOptions} and {@link SetOptions}, plus\n   * {@link MemoOptions.forceRefresh}, and\n   * {@link MemoerOptions.context}\n   *\n   * Any of these may be modified in the {@link OptionsBase.memoMethod}\n   * function, but the {@link GetOptions} fields will of course have no\n   * effect, as the {@link LRUCache#get} call already happened by the time\n   * the memoMethod is called.\n   */\n  export interface MemoizerMemoOptions<K, V, FC = unknown>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      | 'allowStale'\n      | 'updateAgeOnGet'\n      | 'noDeleteOnStaleGet'\n      | 'sizeCalculation'\n      | 'ttl'\n      | 'noDisposeOnSet'\n      | 'noUpdateTTL'\n    > {\n    status?: Status<V>\n    size?: Size\n    start?: Milliseconds\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#has} method.\n   */\n  export interface HasOptions<K, V, FC>\n    extends Pick<OptionsBase<K, V, FC>, 'updateAgeOnHas'> {\n    status?: Status<V>\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#get} method.\n   */\n  export interface GetOptions<K, V, FC>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      'allowStale' | 'updateAgeOnGet' | 'noDeleteOnStaleGet'\n    > {\n    status?: Status<V>\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#peek} method.\n   */\n  export interface PeekOptions<K, V, FC>\n    extends Pick<OptionsBase<K, V, FC>, 'allowStale'> {}\n\n  /**\n   * Options that may be passed to the {@link LRUCache#set} method.\n   */\n  export interface SetOptions<K, V, FC>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      'sizeCalculation' | 'ttl' | 'noDisposeOnSet' | 'noUpdateTTL'\n    > {\n    /**\n     * If size tracking is enabled, then setting an explicit size\n     * in the {@link LRUCache#set} call will prevent calling the\n     * {@link OptionsBase.sizeCalculation} function.\n     */\n    size?: Size\n    /**\n     * If TTL tracking is enabled, then setting an explicit start\n     * time in the {@link LRUCache#set} call will override the\n     * default time from `performance.now()` or `Date.now()`.\n     *\n     * Note that it must be a valid value for whichever time-tracking\n     * method is in use.\n     */\n    start?: Milliseconds\n    status?: Status<V>\n  }\n\n  /**\n   * The type signature for the {@link OptionsBase.fetchMethod} option.\n   */\n  export type Fetcher<K, V, FC = unknown> = (\n    key: K,\n    staleValue: V | undefined,\n    options: FetcherOptions<K, V, FC>\n  ) => Promise<V | undefined | void> | V | undefined | void\n\n  /**\n   * the type signature for the {@link OptionsBase.memoMethod} option.\n   */\n  export type Memoizer<K, V, FC = unknown> = (\n    key: K,\n    staleValue: V | undefined,\n    options: MemoizerOptions<K, V, FC>\n  ) => V\n\n  /**\n   * Options which may be passed to the {@link LRUCache} constructor.\n   *\n   * Most of these may be overridden in the various options that use\n   * them.\n   *\n   * Despite all being technically optional, the constructor requires that\n   * a cache is at minimum limited by one or more of {@link OptionsBase.max},\n   * {@link OptionsBase.ttl}, or {@link OptionsBase.maxSize}.\n   *\n   * If {@link OptionsBase.ttl} is used alone, then it is strongly advised\n   * (and in fact required by the type definitions here) that the cache\n   * also set {@link OptionsBase.ttlAutopurge}, to prevent potentially\n   * unbounded storage.\n   *\n   * All options are also available on the {@link LRUCache} instance, making\n   * it safe to pass an LRUCache instance as the options argumemnt to\n   * make another empty cache of the same type.\n   *\n   * Some options are marked as read-only, because changing them after\n   * instantiation is not safe. Changing any of the other options will of\n   * course only have an effect on subsequent method calls.\n   */\n  export interface OptionsBase<K, V, FC> {\n    /**\n     * The maximum number of items to store in the cache before evicting\n     * old entries. This is read-only on the {@link LRUCache} instance,\n     * and may not be overridden.\n     *\n     * If set, then storage space will be pre-allocated at construction\n     * time, and the cache will perform significantly faster.\n     *\n     * Note that significantly fewer items may be stored, if\n     * {@link OptionsBase.maxSize} and/or {@link OptionsBase.ttl} are also\n     * set.\n     *\n     * **It is strongly recommended to set a `max` to prevent unbounded growth\n     * of the cache.**\n     */\n    max?: Count\n\n    /**\n     * Max time in milliseconds for items to live in cache before they are\n     * considered stale.  Note that stale items are NOT preemptively removed by\n     * default, and MAY live in the cache, contributing to its LRU max, long\n     * after they have expired, unless {@link OptionsBase.ttlAutopurge} is\n     * set.\n     *\n     * If set to `0` (the default value), then that means \"do not track\n     * TTL\", not \"expire immediately\".\n     *\n     * Also, as this cache is optimized for LRU/MRU operations, some of\n     * the staleness/TTL checks will reduce performance, as they will incur\n     * overhead by deleting items.\n     *\n     * This is not primarily a TTL cache, and does not make strong TTL\n     * guarantees. There is no pre-emptive pruning of expired items, but you\n     * _may_ set a TTL on the cache, and it will treat expired items as missing\n     * when they are fetched, and delete them.\n     *\n     * Optional, but must be a non-negative integer in ms if specified.\n     *\n     * This may be overridden by passing an options object to `cache.set()`.\n     *\n     * At least one of `max`, `maxSize`, or `TTL` is required. This must be a\n     * positive integer if set.\n     *\n     * Even if ttl tracking is enabled, **it is strongly recommended to set a\n     * `max` to prevent unbounded growth of the cache.**\n     *\n     * If ttl tracking is enabled, and `max` and `maxSize` are not set,\n     * and `ttlAutopurge` is not set, then a warning will be emitted\n     * cautioning about the potential for unbounded memory consumption.\n     * (The TypeScript definitions will also discourage this.)\n     */\n    ttl?: Milliseconds\n\n    /**\n     * Minimum amount of time in ms in which to check for staleness.\n     * Defaults to 1, which means that the current time is checked\n     * at most once per millisecond.\n     *\n     * Set to 0 to check the current time every time staleness is tested.\n     * (This reduces performance, and is theoretically unnecessary.)\n     *\n     * Setting this to a higher value will improve performance somewhat\n     * while using ttl tracking, albeit at the expense of keeping stale\n     * items around a bit longer than their TTLs would indicate.\n     *\n     * @default 1\n     */\n    ttlResolution?: Milliseconds\n\n    /**\n     * Preemptively remove stale items from the cache.\n     *\n     * Note that this may *significantly* degrade performance, especially if\n     * the cache is storing a large number of items. It is almost always best\n     * to just leave the stale items in the cache, and let them fall out as new\n     * items are added.\n     *\n     * Note that this means that {@link OptionsBase.allowStale} is a bit\n     * pointless, as stale items will be deleted almost as soon as they\n     * expire.\n     *\n     * Use with caution!\n     */\n    ttlAutopurge?: boolean\n\n    /**\n     * When using time-expiring entries with `ttl`, setting this to `true` will\n     * make each item's age reset to 0 whenever it is retrieved from cache with\n     * {@link LRUCache#get}, causing it to not expire. (It can still fall out\n     * of cache based on recency of use, of course.)\n     *\n     * Has no effect if {@link OptionsBase.ttl} is not set.\n     *\n     * This may be overridden by passing an options object to `cache.get()`.\n     */\n    updateAgeOnGet?: boolean\n\n    /**\n     * When using time-expiring entries with `ttl`, setting this to `true` will\n     * make each item's age reset to 0 whenever its presence in the cache is\n     * checked with {@link LRUCache#has}, causing it to not expire. (It can\n     * still fall out of cache based on recency of use, of course.)\n     *\n     * Has no effect if {@link OptionsBase.ttl} is not set.\n     */\n    updateAgeOnHas?: boolean\n\n    /**\n     * Allow {@link LRUCache#get} and {@link LRUCache#fetch} calls to return\n     * stale data, if available.\n     *\n     * By default, if you set `ttl`, stale items will only be deleted from the\n     * cache when you `get(key)`. That is, it's not preemptively pruning items,\n     * unless {@link OptionsBase.ttlAutopurge} is set.\n     *\n     * If you set `allowStale:true`, it'll return the stale value *as well as*\n     * deleting it. If you don't set this, then it'll return `undefined` when\n     * you try to get a stale entry.\n     *\n     * Note that when a stale entry is fetched, _even if it is returned due to\n     * `allowStale` being set_, it is removed from the cache immediately. You\n     * can suppress this behavior by setting\n     * {@link OptionsBase.noDeleteOnStaleGet}, either in the constructor, or in\n     * the options provided to {@link LRUCache#get}.\n     *\n     * This may be overridden by passing an options object to `cache.get()`.\n     * The `cache.has()` method will always return `false` for stale items.\n     *\n     * Only relevant if a ttl is set.\n     */\n    allowStale?: boolean\n\n    /**\n     * Function that is called on items when they are dropped from the\n     * cache, as `dispose(value, key, reason)`.\n     *\n     * This can be handy if you want to close file descriptors or do\n     * other cleanup tasks when items are no longer stored in the cache.\n     *\n     * **NOTE**: It is called _before_ the item has been fully removed\n     * from the cache, so if you want to put it right back in, you need\n     * to wait until the next tick. If you try to add it back in during\n     * the `dispose()` function call, it will break things in subtle and\n     * weird ways.\n     *\n     * Unlike several other options, this may _not_ be overridden by\n     * passing an option to `set()`, for performance reasons.\n     *\n     * The `reason` will be one of the following strings, corresponding\n     * to the reason for the item's deletion:\n     *\n     * - `evict` Item was evicted to make space for a new addition\n     * - `set` Item was overwritten by a new value\n     * - `expire` Item expired its TTL\n     * - `fetch` Item was deleted due to a failed or aborted fetch, or a\n     *   fetchMethod returning `undefined.\n     * - `delete` Item was removed by explicit `cache.delete(key)`,\n     *   `cache.clear()`, or `cache.set(key, undefined)`.\n     */\n    dispose?: Disposer<K, V>\n\n    /**\n     * The same as {@link OptionsBase.dispose}, but called *after* the entry\n     * is completely removed and the cache is once again in a clean state.\n     *\n     * It is safe to add an item right back into the cache at this point.\n     * However, note that it is *very* easy to inadvertently create infinite\n     * recursion this way.\n     */\n    disposeAfter?: Disposer<K, V>\n\n    /**\n     * Set to true to suppress calling the\n     * {@link OptionsBase.dispose} function if the entry key is\n     * still accessible within the cache.\n     *\n     * This may be overridden by passing an options object to\n     * {@link LRUCache#set}.\n     *\n     * Only relevant if `dispose` or `disposeAfter` are set.\n     */\n    noDisposeOnSet?: boolean\n\n    /**\n     * Boolean flag to tell the cache to not update the TTL when setting a new\n     * value for an existing key (ie, when updating a value rather than\n     * inserting a new value).  Note that the TTL value is _always_ set (if\n     * provided) when adding a new entry into the cache.\n     *\n     * Has no effect if a {@link OptionsBase.ttl} is not set.\n     *\n     * May be passed as an option to {@link LRUCache#set}.\n     */\n    noUpdateTTL?: boolean\n\n    /**\n     * Set to a positive integer to track the sizes of items added to the\n     * cache, and automatically evict items in order to stay below this size.\n     * Note that this may result in fewer than `max` items being stored.\n     *\n     * Attempting to add an item to the cache whose calculated size is greater\n     * that this amount will be a no-op. The item will not be cached, and no\n     * other items will be evicted.\n     *\n     * Optional, must be a positive integer if provided.\n     *\n     * Sets `maxEntrySize` to the same value, unless a different value is\n     * provided for `maxEntrySize`.\n     *\n     * At least one of `max`, `maxSize`, or `TTL` is required. This must be a\n     * positive integer if set.\n     *\n     * Even if size tracking is enabled, **it is strongly recommended to set a\n     * `max` to prevent unbounded growth of the cache.**\n     *\n     * Note also that size tracking can negatively impact performance,\n     * though for most cases, only minimally.\n     */\n    maxSize?: Size\n\n    /**\n     * The maximum allowed size for any single item in the cache.\n     *\n     * If a larger item is passed to {@link LRUCache#set} or returned by a\n     * {@link OptionsBase.fetchMethod} or {@link OptionsBase.memoMethod}, then\n     * it will not be stored in the cache.\n     *\n     * Attempting to add an item whose calculated size is greater than\n     * this amount will not cache the item or evict any old items, but\n     * WILL delete an existing value if one is already present.\n     *\n     * Optional, must be a positive integer if provided. Defaults to\n     * the value of `maxSize` if provided.\n     */\n    maxEntrySize?: Size\n\n    /**\n     * A function that returns a number indicating the item's size.\n     *\n     * Requires {@link OptionsBase.maxSize} to be set.\n     *\n     * If not provided, and {@link OptionsBase.maxSize} or\n     * {@link OptionsBase.maxEntrySize} are set, then all\n     * {@link LRUCache#set} calls **must** provide an explicit\n     * {@link SetOptions.size} or sizeCalculation param.\n     */\n    sizeCalculation?: SizeCalculator<K, V>\n\n    /**\n     * Method that provides the implementation for {@link LRUCache#fetch}\n     *\n     * ```ts\n     * fetchMethod(key, staleValue, { signal, options, context })\n     * ```\n     *\n     * If `fetchMethod` is not provided, then `cache.fetch(key)` is equivalent\n     * to `Promise.resolve(cache.get(key))`.\n     *\n     * If at any time, `signal.aborted` is set to `true`, or if the\n     * `signal.onabort` method is called, or if it emits an `'abort'` event\n     * which you can listen to with `addEventListener`, then that means that\n     * the fetch should be abandoned. This may be passed along to async\n     * functions aware of AbortController/AbortSignal behavior.\n     *\n     * The `fetchMethod` should **only** return `undefined` or a Promise\n     * resolving to `undefined` if the AbortController signaled an `abort`\n     * event. In all other cases, it should return or resolve to a value\n     * suitable for adding to the cache.\n     *\n     * The `options` object is a union of the options that may be provided to\n     * `set()` and `get()`. If they are modified, then that will result in\n     * modifying the settings to `cache.set()` when the value is resolved, and\n     * in the case of\n     * {@link OptionsBase.noDeleteOnFetchRejection} and\n     * {@link OptionsBase.allowStaleOnFetchRejection}, the handling of\n     * `fetchMethod` failures.\n     *\n     * For example, a DNS cache may update the TTL based on the value returned\n     * from a remote DNS server by changing `options.ttl` in the `fetchMethod`.\n     */\n    fetchMethod?: Fetcher<K, V, FC>\n\n    /**\n     * Method that provides the implementation for {@link LRUCache#memo}\n     */\n    memoMethod?: Memoizer<K, V, FC>\n\n    /**\n     * Set to true to suppress the deletion of stale data when a\n     * {@link OptionsBase.fetchMethod} returns a rejected promise.\n     */\n    noDeleteOnFetchRejection?: boolean\n\n    /**\n     * Do not delete stale items when they are retrieved with\n     * {@link LRUCache#get}.\n     *\n     * Note that the `get` return value will still be `undefined`\n     * unless {@link OptionsBase.allowStale} is true.\n     *\n     * When using time-expiring entries with `ttl`, by default stale\n     * items will be removed from the cache when the key is accessed\n     * with `cache.get()`.\n     *\n     * Setting this option will cause stale items to remain in the cache, until\n     * they are explicitly deleted with `cache.delete(key)`, or retrieved with\n     * `noDeleteOnStaleGet` set to `false`.\n     *\n     * This may be overridden by passing an options object to `cache.get()`.\n     *\n     * Only relevant if a ttl is used.\n     */\n    noDeleteOnStaleGet?: boolean\n\n    /**\n     * Set to true to allow returning stale data when a\n     * {@link OptionsBase.fetchMethod} throws an error or returns a rejected\n     * promise.\n     *\n     * This differs from using {@link OptionsBase.allowStale} in that stale\n     * data will ONLY be returned in the case that the {@link LRUCache#fetch}\n     * fails, not any other times.\n     *\n     * If a `fetchMethod` fails, and there is no stale value available, the\n     * `fetch()` will resolve to `undefined`. Ie, all `fetchMethod` errors are\n     * suppressed.\n     *\n     * Implies `noDeleteOnFetchRejection`.\n     *\n     * This may be set in calls to `fetch()`, or defaulted on the constructor,\n     * or overridden by modifying the options object in the `fetchMethod`.\n     */\n    allowStaleOnFetchRejection?: boolean\n\n    /**\n     * Set to true to return a stale value from the cache when the\n     * `AbortSignal` passed to the {@link OptionsBase.fetchMethod} dispatches\n     * an `'abort'` event, whether user-triggered, or due to internal cache\n     * behavior.\n     *\n     * Unless {@link OptionsBase.ignoreFetchAbort} is also set, the underlying\n     * {@link OptionsBase.fetchMethod} will still be considered canceled, and\n     * any value it returns will be ignored and not cached.\n     *\n     * Caveat: since fetches are aborted when a new value is explicitly\n     * set in the cache, this can lead to fetch returning a stale value,\n     * since that was the fallback value _at the moment the `fetch()` was\n     * initiated_, even though the new updated value is now present in\n     * the cache.\n     *\n     * For example:\n     *\n     * ```ts\n     * const cache = new LRUCache<string, any>({\n     *   ttl: 100,\n     *   fetchMethod: async (url, oldValue, { signal }) =>  {\n     *     const res = await fetch(url, { signal })\n     *     return await res.json()\n     *   }\n     * })\n     * cache.set('https://example.com/', { some: 'data' })\n     * // 100ms go by...\n     * const result = cache.fetch('https://example.com/')\n     * cache.set('https://example.com/', { other: 'thing' })\n     * console.log(await result) // { some: 'data' }\n     * console.log(cache.get('https://example.com/')) // { other: 'thing' }\n     * ```\n     */\n    allowStaleOnFetchAbort?: boolean\n\n    /**\n     * Set to true to ignore the `abort` event emitted by the `AbortSignal`\n     * object passed to {@link OptionsBase.fetchMethod}, and still cache the\n     * resulting resolution value, as long as it is not `undefined`.\n     *\n     * When used on its own, this means aborted {@link LRUCache#fetch} calls\n     * are not immediately resolved or rejected when they are aborted, and\n     * instead take the full time to await.\n     *\n     * When used with {@link OptionsBase.allowStaleOnFetchAbort}, aborted\n     * {@link LRUCache#fetch} calls will resolve immediately to their stale\n     * cached value or `undefined`, and will continue to process and eventually\n     * update the cache when they resolve, as long as the resulting value is\n     * not `undefined`, thus supporting a \"return stale on timeout while\n     * refreshing\" mechanism by passing `AbortSignal.timeout(n)` as the signal.\n     *\n     * For example:\n     *\n     * ```ts\n     * const c = new LRUCache({\n     *   ttl: 100,\n     *   ignoreFetchAbort: true,\n     *   allowStaleOnFetchAbort: true,\n     *   fetchMethod: async (key, oldValue, { signal }) => {\n     *     // note: do NOT pass the signal to fetch()!\n     *     // let's say this fetch can take a long time.\n     *     const res = await fetch(`https://slow-backend-server/${key}`)\n     *     return await res.json()\n     *   },\n     * })\n     *\n     * // this will return the stale value after 100ms, while still\n     * // updating in the background for next time.\n     * const val = await c.fetch('key', { signal: AbortSignal.timeout(100) })\n     * ```\n     *\n     * **Note**: regardless of this setting, an `abort` event _is still\n     * emitted on the `AbortSignal` object_, so may result in invalid results\n     * when passed to other underlying APIs that use AbortSignals.\n     *\n     * This may be overridden in the {@link OptionsBase.fetchMethod} or the\n     * call to {@link LRUCache#fetch}.\n     */\n    ignoreFetchAbort?: boolean\n  }\n\n  export interface OptionsMaxLimit<K, V, FC>\n    extends OptionsBase<K, V, FC> {\n    max: Count\n  }\n  export interface OptionsTTLLimit<K, V, FC>\n    extends OptionsBase<K, V, FC> {\n    ttl: Milliseconds\n    ttlAutopurge: boolean\n  }\n  export interface OptionsSizeLimit<K, V, FC>\n    extends OptionsBase<K, V, FC> {\n    maxSize: Size\n  }\n\n  /**\n   * The valid safe options for the {@link LRUCache} constructor\n   */\n  export type Options<K, V, FC> =\n    | OptionsMaxLimit<K, V, FC>\n    | OptionsSizeLimit<K, V, FC>\n    | OptionsTTLLimit<K, V, FC>\n\n  /**\n   * Entry objects used by {@link LRUCache#load} and {@link LRUCache#dump},\n   * and returned by {@link LRUCache#info}.\n   */\n  export interface Entry<V> {\n    value: V\n    ttl?: Milliseconds\n    size?: Size\n    start?: Milliseconds\n  }\n}\n\n/**\n * Default export, the thing you're using this module to get.\n *\n * The `K` and `V` types define the key and value types, respectively. The\n * optional `FC` type defines the type of the `context` object passed to\n * `cache.fetch()` and `cache.memo()`.\n *\n * Keys and values **must not** be `null` or `undefined`.\n *\n * All properties from the options object (with the exception of `max`,\n * `maxSize`, `fetchMethod`, `memoMethod`, `dispose` and `disposeAfter`) are\n * added as normal public members. (The listed options are read-only getters.)\n *\n * Changing any of these will alter the defaults for subsequent method calls.\n */\nexport class LRUCache<K extends {}, V extends {}, FC = unknown>\n  implements Map<K, V>\n{\n  // options that cannot be changed without disaster\n  readonly #max: LRUCache.Count\n  readonly #maxSize: LRUCache.Size\n  readonly #dispose?: LRUCache.Disposer<K, V>\n  readonly #disposeAfter?: LRUCache.Disposer<K, V>\n  readonly #fetchMethod?: LRUCache.Fetcher<K, V, FC>\n  readonly #memoMethod?: LRUCache.Memoizer<K, V, FC>\n\n  /**\n   * {@link LRUCache.OptionsBase.ttl}\n   */\n  ttl: LRUCache.Milliseconds\n\n  /**\n   * {@link LRUCache.OptionsBase.ttlResolution}\n   */\n  ttlResolution: LRUCache.Milliseconds\n  /**\n   * {@link LRUCache.OptionsBase.ttlAutopurge}\n   */\n  ttlAutopurge: boolean\n  /**\n   * {@link LRUCache.OptionsBase.updateAgeOnGet}\n   */\n  updateAgeOnGet: boolean\n  /**\n   * {@link LRUCache.OptionsBase.updateAgeOnHas}\n   */\n  updateAgeOnHas: boolean\n  /**\n   * {@link LRUCache.OptionsBase.allowStale}\n   */\n  allowStale: boolean\n\n  /**\n   * {@link LRUCache.OptionsBase.noDisposeOnSet}\n   */\n  noDisposeOnSet: boolean\n  /**\n   * {@link LRUCache.OptionsBase.noUpdateTTL}\n   */\n  noUpdateTTL: boolean\n  /**\n   * {@link LRUCache.OptionsBase.maxEntrySize}\n   */\n  maxEntrySize: LRUCache.Size\n  /**\n   * {@link LRUCache.OptionsBase.sizeCalculation}\n   */\n  sizeCalculation?: LRUCache.SizeCalculator<K, V>\n  /**\n   * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}\n   */\n  noDeleteOnFetchRejection: boolean\n  /**\n   * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}\n   */\n  noDeleteOnStaleGet: boolean\n  /**\n   * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}\n   */\n  allowStaleOnFetchAbort: boolean\n  /**\n   * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}\n   */\n  allowStaleOnFetchRejection: boolean\n  /**\n   * {@link LRUCache.OptionsBase.ignoreFetchAbort}\n   */\n  ignoreFetchAbort: boolean\n\n  // computed properties\n  #size: LRUCache.Count\n  #calculatedSize: LRUCache.Size\n  #keyMap: Map<K, Index>\n  #keyList: (K | undefined)[]\n  #valList: (V | BackgroundFetch<V> | undefined)[]\n  #next: NumberArray\n  #prev: NumberArray\n  #head: Index\n  #tail: Index\n  #free: StackLike\n  #disposed?: DisposeTask<K, V>[]\n  #sizes?: ZeroArray\n  #starts?: ZeroArray\n  #ttls?: ZeroArray\n\n  #hasDispose: boolean\n  #hasFetchMethod: boolean\n  #hasDisposeAfter: boolean\n\n  /**\n   * Do not call this method unless you need to inspect the\n   * inner workings of the cache.  If anything returned by this\n   * object is modified in any way, strange breakage may occur.\n   *\n   * These fields are private for a reason!\n   *\n   * @internal\n   */\n  static unsafeExposeInternals<\n    K extends {},\n    V extends {},\n    FC extends unknown = unknown\n  >(c: LRUCache<K, V, FC>) {\n    return {\n      // properties\n      starts: c.#starts,\n      ttls: c.#ttls,\n      sizes: c.#sizes,\n      keyMap: c.#keyMap as Map<K, number>,\n      keyList: c.#keyList,\n      valList: c.#valList,\n      next: c.#next,\n      prev: c.#prev,\n      get head() {\n        return c.#head\n      },\n      get tail() {\n        return c.#tail\n      },\n      free: c.#free,\n      // methods\n      isBackgroundFetch: (p: any) => c.#isBackgroundFetch(p),\n      backgroundFetch: (\n        k: K,\n        index: number | undefined,\n        options: LRUCache.FetchOptions<K, V, FC>,\n        context: any\n      ): BackgroundFetch<V> =>\n        c.#backgroundFetch(\n          k,\n          index as Index | undefined,\n          options,\n          context\n        ),\n      moveToTail: (index: number): void =>\n        c.#moveToTail(index as Index),\n      indexes: (options?: { allowStale: boolean }) =>\n        c.#indexes(options),\n      rindexes: (options?: { allowStale: boolean }) =>\n        c.#rindexes(options),\n      isStale: (index: number | undefined) =>\n        c.#isStale(index as Index),\n    }\n  }\n\n  // Protected read-only members\n\n  /**\n   * {@link LRUCache.OptionsBase.max} (read-only)\n   */\n  get max(): LRUCache.Count {\n    return this.#max\n  }\n  /**\n   * {@link LRUCache.OptionsBase.maxSize} (read-only)\n   */\n  get maxSize(): LRUCache.Count {\n    return this.#maxSize\n  }\n  /**\n   * The total computed size of items in the cache (read-only)\n   */\n  get calculatedSize(): LRUCache.Size {\n    return this.#calculatedSize\n  }\n  /**\n   * The number of items stored in the cache (read-only)\n   */\n  get size(): LRUCache.Count {\n    return this.#size\n  }\n  /**\n   * {@link LRUCache.OptionsBase.fetchMethod} (read-only)\n   */\n  get fetchMethod(): LRUCache.Fetcher<K, V, FC> | undefined {\n    return this.#fetchMethod\n  }\n  get memoMethod(): LRUCache.Memoizer<K, V, FC> | undefined {\n    return this.#memoMethod\n  }\n  /**\n   * {@link LRUCache.OptionsBase.dispose} (read-only)\n   */\n  get dispose() {\n    return this.#dispose\n  }\n  /**\n   * {@link LRUCache.OptionsBase.disposeAfter} (read-only)\n   */\n  get disposeAfter() {\n    return this.#disposeAfter\n  }\n\n  constructor(\n    options: LRUCache.Options<K, V, FC> | LRUCache<K, V, FC>\n  ) {\n    const {\n      max = 0,\n      ttl,\n      ttlResolution = 1,\n      ttlAutopurge,\n      updateAgeOnGet,\n      updateAgeOnHas,\n      allowStale,\n      dispose,\n      disposeAfter,\n      noDisposeOnSet,\n      noUpdateTTL,\n      maxSize = 0,\n      maxEntrySize = 0,\n      sizeCalculation,\n      fetchMethod,\n      memoMethod,\n      noDeleteOnFetchRejection,\n      noDeleteOnStaleGet,\n      allowStaleOnFetchRejection,\n      allowStaleOnFetchAbort,\n      ignoreFetchAbort,\n    } = options\n\n    if (max !== 0 && !isPosInt(max)) {\n      throw new TypeError('max option must be a nonnegative integer')\n    }\n\n    const UintArray = max ? getUintArray(max) : Array\n    if (!UintArray) {\n      throw new Error('invalid max value: ' + max)\n    }\n\n    this.#max = max\n    this.#maxSize = maxSize\n    this.maxEntrySize = maxEntrySize || this.#maxSize\n    this.sizeCalculation = sizeCalculation\n    if (this.sizeCalculation) {\n      if (!this.#maxSize && !this.maxEntrySize) {\n        throw new TypeError(\n          'cannot set sizeCalculation without setting maxSize or maxEntrySize'\n        )\n      }\n      if (typeof this.sizeCalculation !== 'function') {\n        throw new TypeError('sizeCalculation set to non-function')\n      }\n    }\n\n    if (\n      memoMethod !== undefined &&\n      typeof memoMethod !== 'function'\n    ) {\n      throw new TypeError('memoMethod must be a function if defined')\n    }\n    this.#memoMethod = memoMethod\n\n    if (\n      fetchMethod !== undefined &&\n      typeof fetchMethod !== 'function'\n    ) {\n      throw new TypeError(\n        'fetchMethod must be a function if specified'\n      )\n    }\n    this.#fetchMethod = fetchMethod\n    this.#hasFetchMethod = !!fetchMethod\n\n    this.#keyMap = new Map()\n    this.#keyList = new Array(max).fill(undefined)\n    this.#valList = new Array(max).fill(undefined)\n    this.#next = new UintArray(max)\n    this.#prev = new UintArray(max)\n    this.#head = 0 as Index\n    this.#tail = 0 as Index\n    this.#free = Stack.create(max)\n    this.#size = 0\n    this.#calculatedSize = 0\n\n    if (typeof dispose === 'function') {\n      this.#dispose = dispose\n    }\n    if (typeof disposeAfter === 'function') {\n      this.#disposeAfter = disposeAfter\n      this.#disposed = []\n    } else {\n      this.#disposeAfter = undefined\n      this.#disposed = undefined\n    }\n    this.#hasDispose = !!this.#dispose\n    this.#hasDisposeAfter = !!this.#disposeAfter\n\n    this.noDisposeOnSet = !!noDisposeOnSet\n    this.noUpdateTTL = !!noUpdateTTL\n    this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection\n    this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection\n    this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort\n    this.ignoreFetchAbort = !!ignoreFetchAbort\n\n    // NB: maxEntrySize is set to maxSize if it's set\n    if (this.maxEntrySize !== 0) {\n      if (this.#maxSize !== 0) {\n        if (!isPosInt(this.#maxSize)) {\n          throw new TypeError(\n            'maxSize must be a positive integer if specified'\n          )\n        }\n      }\n      if (!isPosInt(this.maxEntrySize)) {\n        throw new TypeError(\n          'maxEntrySize must be a positive integer if specified'\n        )\n      }\n      this.#initializeSizeTracking()\n    }\n\n    this.allowStale = !!allowStale\n    this.noDeleteOnStaleGet = !!noDeleteOnStaleGet\n    this.updateAgeOnGet = !!updateAgeOnGet\n    this.updateAgeOnHas = !!updateAgeOnHas\n    this.ttlResolution =\n      isPosInt(ttlResolution) || ttlResolution === 0\n        ? ttlResolution\n        : 1\n    this.ttlAutopurge = !!ttlAutopurge\n    this.ttl = ttl || 0\n    if (this.ttl) {\n      if (!isPosInt(this.ttl)) {\n        throw new TypeError(\n          'ttl must be a positive integer if specified'\n        )\n      }\n      this.#initializeTTLTracking()\n    }\n\n    // do not allow completely unbounded caches\n    if (this.#max === 0 && this.ttl === 0 && this.#maxSize === 0) {\n      throw new TypeError(\n        'At least one of max, maxSize, or ttl is required'\n      )\n    }\n    if (!this.ttlAutopurge && !this.#max && !this.#maxSize) {\n      const code = 'LRU_CACHE_UNBOUNDED'\n      if (shouldWarn(code)) {\n        warned.add(code)\n        const msg =\n          'TTL caching without ttlAutopurge, max, or maxSize can ' +\n          'result in unbounded memory consumption.'\n        emitWarning(msg, 'UnboundedCacheWarning', code, LRUCache)\n      }\n    }\n  }\n\n  /**\n   * Return the number of ms left in the item's TTL. If item is not in cache,\n   * returns `0`. Returns `Infinity` if item is in cache without a defined TTL.\n   */\n  getRemainingTTL(key: K) {\n    return this.#keyMap.has(key) ? Infinity : 0\n  }\n\n  #initializeTTLTracking() {\n    const ttls = new ZeroArray(this.#max)\n    const starts = new ZeroArray(this.#max)\n    this.#ttls = ttls\n    this.#starts = starts\n\n    this.#setItemTTL = (index, ttl, start = perf.now()) => {\n      starts[index] = ttl !== 0 ? start : 0\n      ttls[index] = ttl\n      if (ttl !== 0 && this.ttlAutopurge) {\n        const t = setTimeout(() => {\n          if (this.#isStale(index)) {\n            this.#delete(this.#keyList[index] as K, 'expire')\n          }\n        }, ttl + 1)\n        // unref() not supported on all platforms\n        /* c8 ignore start */\n        if (t.unref) {\n          t.unref()\n        }\n        /* c8 ignore stop */\n      }\n    }\n\n    this.#updateItemAge = index => {\n      starts[index] = ttls[index] !== 0 ? perf.now() : 0\n    }\n\n    this.#statusTTL = (status, index) => {\n      if (ttls[index]) {\n        const ttl = ttls[index]\n        const start = starts[index]\n        /* c8 ignore next */\n        if (!ttl || !start) return\n        status.ttl = ttl\n        status.start = start\n        status.now = cachedNow || getNow()\n        const age = status.now - start\n        status.remainingTTL = ttl - age\n      }\n    }\n\n    // debounce calls to perf.now() to 1s so we're not hitting\n    // that costly call repeatedly.\n    let cachedNow = 0\n    const getNow = () => {\n      const n = perf.now()\n      if (this.ttlResolution > 0) {\n        cachedNow = n\n        const t = setTimeout(\n          () => (cachedNow = 0),\n          this.ttlResolution\n        )\n        // not available on all platforms\n        /* c8 ignore start */\n        if (t.unref) {\n          t.unref()\n        }\n        /* c8 ignore stop */\n      }\n      return n\n    }\n\n    this.getRemainingTTL = key => {\n      const index = this.#keyMap.get(key)\n      if (index === undefined) {\n        return 0\n      }\n      const ttl = ttls[index]\n      const start = starts[index]\n      if (!ttl || !start) {\n        return Infinity\n      }\n      const age = (cachedNow || getNow()) - start\n      return ttl - age\n    }\n\n    this.#isStale = index => {\n      const s = starts[index]\n      const t = ttls[index]\n      return !!t && !!s && (cachedNow || getNow()) - s > t\n    }\n  }\n\n  // conditionally set private methods related to TTL\n  #updateItemAge: (index: Index) => void = () => {}\n  #statusTTL: (status: LRUCache.Status<V>, index: Index) => void =\n    () => {}\n  #setItemTTL: (\n    index: Index,\n    ttl: LRUCache.Milliseconds,\n    start?: LRUCache.Milliseconds\n    // ignore because we never call this if we're not already in TTL mode\n    /* c8 ignore start */\n  ) => void = () => {}\n  /* c8 ignore stop */\n\n  #isStale: (index: Index) => boolean = () => false\n\n  #initializeSizeTracking() {\n    const sizes = new ZeroArray(this.#max)\n    this.#calculatedSize = 0\n    this.#sizes = sizes\n    this.#removeItemSize = index => {\n      this.#calculatedSize -= sizes[index] as number\n      sizes[index] = 0\n    }\n    this.#requireSize = (k, v, size, sizeCalculation) => {\n      // provisionally accept background fetches.\n      // actual value size will be checked when they return.\n      if (this.#isBackgroundFetch(v)) {\n        return 0\n      }\n      if (!isPosInt(size)) {\n        if (sizeCalculation) {\n          if (typeof sizeCalculation !== 'function') {\n            throw new TypeError('sizeCalculation must be a function')\n          }\n          size = sizeCalculation(v, k)\n          if (!isPosInt(size)) {\n            throw new TypeError(\n              'sizeCalculation return invalid (expect positive integer)'\n            )\n          }\n        } else {\n          throw new TypeError(\n            'invalid size value (must be positive integer). ' +\n              'When maxSize or maxEntrySize is used, sizeCalculation ' +\n              'or size must be set.'\n          )\n        }\n      }\n      return size\n    }\n    this.#addItemSize = (\n      index: Index,\n      size: LRUCache.Size,\n      status?: LRUCache.Status<V>\n    ) => {\n      sizes[index] = size\n      if (this.#maxSize) {\n        const maxSize = this.#maxSize - (sizes[index] as number)\n        while (this.#calculatedSize > maxSize) {\n          this.#evict(true)\n        }\n      }\n      this.#calculatedSize += sizes[index] as number\n      if (status) {\n        status.entrySize = size\n        status.totalCalculatedSize = this.#calculatedSize\n      }\n    }\n  }\n\n  #removeItemSize: (index: Index) => void = _i => {}\n  #addItemSize: (\n    index: Index,\n    size: LRUCache.Size,\n    status?: LRUCache.Status<V>\n  ) => void = (_i, _s, _st) => {}\n  #requireSize: (\n    k: K,\n    v: V | BackgroundFetch<V>,\n    size?: LRUCache.Size,\n    sizeCalculation?: LRUCache.SizeCalculator<K, V>\n  ) => LRUCache.Size = (\n    _k: K,\n    _v: V | BackgroundFetch<V>,\n    size?: LRUCache.Size,\n    sizeCalculation?: LRUCache.SizeCalculator<K, V>\n  ) => {\n    if (size || sizeCalculation) {\n      throw new TypeError(\n        'cannot set size without setting maxSize or maxEntrySize on cache'\n      )\n    }\n    return 0\n  };\n\n  *#indexes({ allowStale = this.allowStale } = {}) {\n    if (this.#size) {\n      for (let i = this.#tail; true; ) {\n        if (!this.#isValidIndex(i)) {\n          break\n        }\n        if (allowStale || !this.#isStale(i)) {\n          yield i\n        }\n        if (i === this.#head) {\n          break\n        } else {\n          i = this.#prev[i] as Index\n        }\n      }\n    }\n  }\n\n  *#rindexes({ allowStale = this.allowStale } = {}) {\n    if (this.#size) {\n      for (let i = this.#head; true; ) {\n        if (!this.#isValidIndex(i)) {\n          break\n        }\n        if (allowStale || !this.#isStale(i)) {\n          yield i\n        }\n        if (i === this.#tail) {\n          break\n        } else {\n          i = this.#next[i] as Index\n        }\n      }\n    }\n  }\n\n  #isValidIndex(index: Index) {\n    return (\n      index !== undefined &&\n      this.#keyMap.get(this.#keyList[index] as K) === index\n    )\n  }\n\n  /**\n   * Return a generator yielding `[key, value]` pairs,\n   * in order from most recently used to least recently used.\n   */\n  *entries() {\n    for (const i of this.#indexes()) {\n      if (\n        this.#valList[i] !== undefined &&\n        this.#keyList[i] !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield [this.#keyList[i], this.#valList[i]] as [K, V]\n      }\n    }\n  }\n\n  /**\n   * Inverse order version of {@link LRUCache.entries}\n   *\n   * Return a generator yielding `[key, value]` pairs,\n   * in order from least recently used to most recently used.\n   */\n  *rentries() {\n    for (const i of this.#rindexes()) {\n      if (\n        this.#valList[i] !== undefined &&\n        this.#keyList[i] !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield [this.#keyList[i], this.#valList[i]]\n      }\n    }\n  }\n\n  /**\n   * Return a generator yielding the keys in the cache,\n   * in order from most recently used to least recently used.\n   */\n  *keys() {\n    for (const i of this.#indexes()) {\n      const k = this.#keyList[i]\n      if (\n        k !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield k\n      }\n    }\n  }\n\n  /**\n   * Inverse order version of {@link LRUCache.keys}\n   *\n   * Return a generator yielding the keys in the cache,\n   * in order from least recently used to most recently used.\n   */\n  *rkeys() {\n    for (const i of this.#rindexes()) {\n      const k = this.#keyList[i]\n      if (\n        k !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield k\n      }\n    }\n  }\n\n  /**\n   * Return a generator yielding the values in the cache,\n   * in order from most recently used to least recently used.\n   */\n  *values() {\n    for (const i of this.#indexes()) {\n      const v = this.#valList[i]\n      if (\n        v !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield this.#valList[i] as V\n      }\n    }\n  }\n\n  /**\n   * Inverse order version of {@link LRUCache.values}\n   *\n   * Return a generator yielding the values in the cache,\n   * in order from least recently used to most recently used.\n   */\n  *rvalues() {\n    for (const i of this.#rindexes()) {\n      const v = this.#valList[i]\n      if (\n        v !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield this.#valList[i]\n      }\n    }\n  }\n\n  /**\n   * Iterating over the cache itself yields the same results as\n   * {@link LRUCache.entries}\n   */\n  [Symbol.iterator]() {\n    return this.entries()\n  }\n\n  /**\n   * A String value that is used in the creation of the default string\n   * description of an object. Called by the built-in method\n   * `Object.prototype.toString`.\n   */\n  [Symbol.toStringTag] = 'LRUCache'\n\n  /**\n   * Find a value for which the supplied fn method returns a truthy value,\n   * similar to `Array.find()`. fn is called as `fn(value, key, cache)`.\n   */\n  find(\n    fn: (v: V, k: K, self: LRUCache<K, V, FC>) => boolean,\n    getOptions: LRUCache.GetOptions<K, V, FC> = {}\n  ) {\n    for (const i of this.#indexes()) {\n      const v = this.#valList[i]\n      const value = this.#isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      if (fn(value, this.#keyList[i] as K, this)) {\n        return this.get(this.#keyList[i] as K, getOptions)\n      }\n    }\n  }\n\n  /**\n   * Call the supplied function on each item in the cache, in order from most\n   * recently used to least recently used.\n   *\n   * `fn` is called as `fn(value, key, cache)`.\n   *\n   * If `thisp` is provided, function will be called in the `this`-context of\n   * the provided object, or the cache if no `thisp` object is provided.\n   *\n   * Does not update age or recenty of use, or iterate over stale values.\n   */\n  forEach(\n    fn: (v: V, k: K, self: LRUCache<K, V, FC>) => any,\n    thisp: any = this\n  ) {\n    for (const i of this.#indexes()) {\n      const v = this.#valList[i]\n      const value = this.#isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      fn.call(thisp, value, this.#keyList[i] as K, this)\n    }\n  }\n\n  /**\n   * The same as {@link LRUCache.forEach} but items are iterated over in\n   * reverse order.  (ie, less recently used items are iterated over first.)\n   */\n  rforEach(\n    fn: (v: V, k: K, self: LRUCache<K, V, FC>) => any,\n    thisp: any = this\n  ) {\n    for (const i of this.#rindexes()) {\n      const v = this.#valList[i]\n      const value = this.#isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      fn.call(thisp, value, this.#keyList[i] as K, this)\n    }\n  }\n\n  /**\n   * Delete any stale entries. Returns true if anything was removed,\n   * false otherwise.\n   */\n  purgeStale() {\n    let deleted = false\n    for (const i of this.#rindexes({ allowStale: true })) {\n      if (this.#isStale(i)) {\n        this.#delete(this.#keyList[i] as K, 'expire')\n        deleted = true\n      }\n    }\n    return deleted\n  }\n\n  /**\n   * Get the extended info about a given entry, to get its value, size, and\n   * TTL info simultaneously. Returns `undefined` if the key is not present.\n   *\n   * Unlike {@link LRUCache#dump}, which is designed to be portable and survive\n   * serialization, the `start` value is always the current timestamp, and the\n   * `ttl` is a calculated remaining time to live (negative if expired).\n   *\n   * Always returns stale values, if their info is found in the cache, so be\n   * sure to check for expirations (ie, a negative {@link LRUCache.Entry#ttl})\n   * if relevant.\n   */\n  info(key: K): LRUCache.Entry<V> | undefined {\n    const i = this.#keyMap.get(key)\n    if (i === undefined) return undefined\n    const v = this.#valList[i]\n    const value: V | undefined = this.#isBackgroundFetch(v)\n      ? v.__staleWhileFetching\n      : v\n    if (value === undefined) return undefined\n    const entry: LRUCache.Entry<V> = { value }\n    if (this.#ttls && this.#starts) {\n      const ttl = this.#ttls[i]\n      const start = this.#starts[i]\n      if (ttl && start) {\n        const remain = ttl - (perf.now() - start)\n        entry.ttl = remain\n        entry.start = Date.now()\n      }\n    }\n    if (this.#sizes) {\n      entry.size = this.#sizes[i]\n    }\n    return entry\n  }\n\n  /**\n   * Return an array of [key, {@link LRUCache.Entry}] tuples which can be\n   * passed to {@link LRLUCache#load}.\n   *\n   * The `start` fields are calculated relative to a portable `Date.now()`\n   * timestamp, even if `performance.now()` is available.\n   *\n   * Stale entries are always included in the `dump`, even if\n   * {@link LRUCache.OptionsBase.allowStale} is false.\n   *\n   * Note: this returns an actual array, not a generator, so it can be more\n   * easily passed around.\n   */\n  dump() {\n    const arr: [K, LRUCache.Entry<V>][] = []\n    for (const i of this.#indexes({ allowStale: true })) {\n      const key = this.#keyList[i]\n      const v = this.#valList[i]\n      const value: V | undefined = this.#isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined || key === undefined) continue\n      const entry: LRUCache.Entry<V> = { value }\n      if (this.#ttls && this.#starts) {\n        entry.ttl = this.#ttls[i]\n        // always dump the start relative to a portable timestamp\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = perf.now() - (this.#starts[i] as number)\n        entry.start = Math.floor(Date.now() - age)\n      }\n      if (this.#sizes) {\n        entry.size = this.#sizes[i]\n      }\n      arr.unshift([key, entry])\n    }\n    return arr\n  }\n\n  /**\n   * Reset the cache and load in the items in entries in the order listed.\n   *\n   * The shape of the resulting cache may be different if the same options are\n   * not used in both caches.\n   *\n   * The `start` fields are assumed to be calculated relative to a portable\n   * `Date.now()` timestamp, even if `performance.now()` is available.\n   */\n  load(arr: [K, LRUCache.Entry<V>][]) {\n    this.clear()\n    for (const [key, entry] of arr) {\n      if (entry.start) {\n        // entry.start is a portable timestamp, but we may be using\n        // node's performance.now(), so calculate the offset, so that\n        // we get the intended remaining TTL, no matter how long it's\n        // been on ice.\n        //\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = Date.now() - entry.start\n        entry.start = perf.now() - age\n      }\n      this.set(key, entry.value, entry)\n    }\n  }\n\n  /**\n   * Add a value to the cache.\n   *\n   * Note: if `undefined` is specified as a value, this is an alias for\n   * {@link LRUCache#delete}\n   *\n   * Fields on the {@link LRUCache.SetOptions} options param will override\n   * their corresponding values in the constructor options for the scope\n   * of this single `set()` operation.\n   *\n   * If `start` is provided, then that will set the effective start\n   * time for the TTL calculation. Note that this must be a previous\n   * value of `performance.now()` if supported, or a previous value of\n   * `Date.now()` if not.\n   *\n   * Options object may also include `size`, which will prevent\n   * calling the `sizeCalculation` function and just use the specified\n   * number if it is a positive integer, and `noDisposeOnSet` which\n   * will prevent calling a `dispose` function in the case of\n   * overwrites.\n   *\n   * If the `size` (or return value of `sizeCalculation`) for a given\n   * entry is greater than `maxEntrySize`, then the item will not be\n   * added to the cache.\n   *\n   * Will update the recency of the entry.\n   *\n   * If the value is `undefined`, then this is an alias for\n   * `cache.delete(key)`. `undefined` is never stored in the cache.\n   */\n  set(\n    k: K,\n    v: V | BackgroundFetch<V> | undefined,\n    setOptions: LRUCache.SetOptions<K, V, FC> = {}\n  ) {\n    if (v === undefined) {\n      this.delete(k)\n      return this\n    }\n    const {\n      ttl = this.ttl,\n      start,\n      noDisposeOnSet = this.noDisposeOnSet,\n      sizeCalculation = this.sizeCalculation,\n      status,\n    } = setOptions\n    let { noUpdateTTL = this.noUpdateTTL } = setOptions\n\n    const size = this.#requireSize(\n      k,\n      v,\n      setOptions.size || 0,\n      sizeCalculation\n    )\n    // if the item doesn't fit, don't do anything\n    // NB: maxEntrySize set to maxSize by default\n    if (this.maxEntrySize && size > this.maxEntrySize) {\n      if (status) {\n        status.set = 'miss'\n        status.maxEntrySizeExceeded = true\n      }\n      // have to delete, in case something is there already.\n      this.#delete(k, 'set')\n      return this\n    }\n    let index = this.#size === 0 ? undefined : this.#keyMap.get(k)\n    if (index === undefined) {\n      // addition\n      index = (\n        this.#size === 0\n          ? this.#tail\n          : this.#free.length !== 0\n          ? this.#free.pop()\n          : this.#size === this.#max\n          ? this.#evict(false)\n          : this.#size\n      ) as Index\n      this.#keyList[index] = k\n      this.#valList[index] = v\n      this.#keyMap.set(k, index)\n      this.#next[this.#tail] = index\n      this.#prev[index] = this.#tail\n      this.#tail = index\n      this.#size++\n      this.#addItemSize(index, size, status)\n      if (status) status.set = 'add'\n      noUpdateTTL = false\n    } else {\n      // update\n      this.#moveToTail(index)\n      const oldVal = this.#valList[index] as V | BackgroundFetch<V>\n      if (v !== oldVal) {\n        if (this.#hasFetchMethod && this.#isBackgroundFetch(oldVal)) {\n          oldVal.__abortController.abort(new Error('replaced'))\n          const { __staleWhileFetching: s } = oldVal\n          if (s !== undefined && !noDisposeOnSet) {\n            if (this.#hasDispose) {\n              this.#dispose?.(s as V, k, 'set')\n            }\n            if (this.#hasDisposeAfter) {\n              this.#disposed?.push([s as V, k, 'set'])\n            }\n          }\n        } else if (!noDisposeOnSet) {\n          if (this.#hasDispose) {\n            this.#dispose?.(oldVal as V, k, 'set')\n          }\n          if (this.#hasDisposeAfter) {\n            this.#disposed?.push([oldVal as V, k, 'set'])\n          }\n        }\n        this.#removeItemSize(index)\n        this.#addItemSize(index, size, status)\n        this.#valList[index] = v\n        if (status) {\n          status.set = 'replace'\n          const oldValue =\n            oldVal && this.#isBackgroundFetch(oldVal)\n              ? oldVal.__staleWhileFetching\n              : oldVal\n          if (oldValue !== undefined) status.oldValue = oldValue\n        }\n      } else if (status) {\n        status.set = 'update'\n      }\n    }\n    if (ttl !== 0 && !this.#ttls) {\n      this.#initializeTTLTracking()\n    }\n    if (this.#ttls) {\n      if (!noUpdateTTL) {\n        this.#setItemTTL(index, ttl, start)\n      }\n      if (status) this.#statusTTL(status, index)\n    }\n    if (!noDisposeOnSet && this.#hasDisposeAfter && this.#disposed) {\n      const dt = this.#disposed\n      let task: DisposeTask<K, V> | undefined\n      while ((task = dt?.shift())) {\n        this.#disposeAfter?.(...task)\n      }\n    }\n    return this\n  }\n\n  /**\n   * Evict the least recently used item, returning its value or\n   * `undefined` if cache is empty.\n   */\n  pop(): V | undefined {\n    try {\n      while (this.#size) {\n        const val = this.#valList[this.#head]\n        this.#evict(true)\n        if (this.#isBackgroundFetch(val)) {\n          if (val.__staleWhileFetching) {\n            return val.__staleWhileFetching\n          }\n        } else if (val !== undefined) {\n          return val\n        }\n      }\n    } finally {\n      if (this.#hasDisposeAfter && this.#disposed) {\n        const dt = this.#disposed\n        let task: DisposeTask<K, V> | undefined\n        while ((task = dt?.shift())) {\n          this.#disposeAfter?.(...task)\n        }\n      }\n    }\n  }\n\n  #evict(free: boolean) {\n    const head = this.#head\n    const k = this.#keyList[head] as K\n    const v = this.#valList[head] as V\n    if (this.#hasFetchMethod && this.#isBackgroundFetch(v)) {\n      v.__abortController.abort(new Error('evicted'))\n    } else if (this.#hasDispose || this.#hasDisposeAfter) {\n      if (this.#hasDispose) {\n        this.#dispose?.(v, k, 'evict')\n      }\n      if (this.#hasDisposeAfter) {\n        this.#disposed?.push([v, k, 'evict'])\n      }\n    }\n    this.#removeItemSize(head)\n    // if we aren't about to use the index, then null these out\n    if (free) {\n      this.#keyList[head] = undefined\n      this.#valList[head] = undefined\n      this.#free.push(head)\n    }\n    if (this.#size === 1) {\n      this.#head = this.#tail = 0 as Index\n      this.#free.length = 0\n    } else {\n      this.#head = this.#next[head] as Index\n    }\n    this.#keyMap.delete(k)\n    this.#size--\n    return head\n  }\n\n  /**\n   * Check if a key is in the cache, without updating the recency of use.\n   * Will return false if the item is stale, even though it is technically\n   * in the cache.\n   *\n   * Check if a key is in the cache, without updating the recency of\n   * use. Age is updated if {@link LRUCache.OptionsBase.updateAgeOnHas} is set\n   * to `true` in either the options or the constructor.\n   *\n   * Will return `false` if the item is stale, even though it is technically in\n   * the cache. The difference can be determined (if it matters) by using a\n   * `status` argument, and inspecting the `has` field.\n   *\n   * Will not update item age unless\n   * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.\n   */\n  has(k: K, hasOptions: LRUCache.HasOptions<K, V, FC> = {}) {\n    const { updateAgeOnHas = this.updateAgeOnHas, status } =\n      hasOptions\n    const index = this.#keyMap.get(k)\n    if (index !== undefined) {\n      const v = this.#valList[index]\n      if (\n        this.#isBackgroundFetch(v) &&\n        v.__staleWhileFetching === undefined\n      ) {\n        return false\n      }\n      if (!this.#isStale(index)) {\n        if (updateAgeOnHas) {\n          this.#updateItemAge(index)\n        }\n        if (status) {\n          status.has = 'hit'\n          this.#statusTTL(status, index)\n        }\n        return true\n      } else if (status) {\n        status.has = 'stale'\n        this.#statusTTL(status, index)\n      }\n    } else if (status) {\n      status.has = 'miss'\n    }\n    return false\n  }\n\n  /**\n   * Like {@link LRUCache#get} but doesn't update recency or delete stale\n   * items.\n   *\n   * Returns `undefined` if the item is stale, unless\n   * {@link LRUCache.OptionsBase.allowStale} is set.\n   */\n  peek(k: K, peekOptions: LRUCache.PeekOptions<K, V, FC> = {}) {\n    const { allowStale = this.allowStale } = peekOptions\n    const index = this.#keyMap.get(k)\n    if (\n      index === undefined ||\n      (!allowStale && this.#isStale(index))\n    ) {\n      return\n    }\n    const v = this.#valList[index]\n    // either stale and allowed, or forcing a refresh of non-stale value\n    return this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v\n  }\n\n  #backgroundFetch(\n    k: K,\n    index: Index | undefined,\n    options: LRUCache.FetchOptions<K, V, FC>,\n    context: any\n  ): BackgroundFetch<V> {\n    const v = index === undefined ? undefined : this.#valList[index]\n    if (this.#isBackgroundFetch(v)) {\n      return v\n    }\n\n    const ac = new AC()\n    const { signal } = options\n    // when/if our AC signals, then stop listening to theirs.\n    signal?.addEventListener('abort', () => ac.abort(signal.reason), {\n      signal: ac.signal,\n    })\n\n    const fetchOpts = {\n      signal: ac.signal,\n      options,\n      context,\n    }\n\n    const cb = (\n      v: V | undefined,\n      updateCache = false\n    ): V | undefined => {\n      const { aborted } = ac.signal\n      const ignoreAbort = options.ignoreFetchAbort && v !== undefined\n      if (options.status) {\n        if (aborted && !updateCache) {\n          options.status.fetchAborted = true\n          options.status.fetchError = ac.signal.reason\n          if (ignoreAbort) options.status.fetchAbortIgnored = true\n        } else {\n          options.status.fetchResolved = true\n        }\n      }\n      if (aborted && !ignoreAbort && !updateCache) {\n        return fetchFail(ac.signal.reason)\n      }\n      // either we didn't abort, and are still here, or we did, and ignored\n      const bf = p as BackgroundFetch<V>\n      if (this.#valList[index as Index] === p) {\n        if (v === undefined) {\n          if (bf.__staleWhileFetching) {\n            this.#valList[index as Index] = bf.__staleWhileFetching\n          } else {\n            this.#delete(k, 'fetch')\n          }\n        } else {\n          if (options.status) options.status.fetchUpdated = true\n          this.set(k, v, fetchOpts.options)\n        }\n      }\n      return v\n    }\n\n    const eb = (er: any) => {\n      if (options.status) {\n        options.status.fetchRejected = true\n        options.status.fetchError = er\n      }\n      return fetchFail(er)\n    }\n\n    const fetchFail = (er: any): V | undefined => {\n      const { aborted } = ac.signal\n      const allowStaleAborted =\n        aborted && options.allowStaleOnFetchAbort\n      const allowStale =\n        allowStaleAborted || options.allowStaleOnFetchRejection\n      const noDelete = allowStale || options.noDeleteOnFetchRejection\n      const bf = p as BackgroundFetch<V>\n      if (this.#valList[index as Index] === p) {\n        // if we allow stale on fetch rejections, then we need to ensure that\n        // the stale value is not removed from the cache when the fetch fails.\n        const del = !noDelete || bf.__staleWhileFetching === undefined\n        if (del) {\n          this.#delete(k, 'fetch')\n        } else if (!allowStaleAborted) {\n          // still replace the *promise* with the stale value,\n          // since we are done with the promise at this point.\n          // leave it untouched if we're still waiting for an\n          // aborted background fetch that hasn't yet returned.\n          this.#valList[index as Index] = bf.__staleWhileFetching\n        }\n      }\n      if (allowStale) {\n        if (options.status && bf.__staleWhileFetching !== undefined) {\n          options.status.returnedStale = true\n        }\n        return bf.__staleWhileFetching\n      } else if (bf.__returned === bf) {\n        throw er\n      }\n    }\n\n    const pcall = (\n      res: (v: V | undefined) => void,\n      rej: (e: any) => void\n    ) => {\n      const fmp = this.#fetchMethod?.(k, v, fetchOpts)\n      if (fmp && fmp instanceof Promise) {\n        fmp.then(v => res(v === undefined ? undefined : v), rej)\n      }\n      // ignored, we go until we finish, regardless.\n      // defer check until we are actually aborting,\n      // so fetchMethod can override.\n      ac.signal.addEventListener('abort', () => {\n        if (\n          !options.ignoreFetchAbort ||\n          options.allowStaleOnFetchAbort\n        ) {\n          res(undefined)\n          // when it eventually resolves, update the cache.\n          if (options.allowStaleOnFetchAbort) {\n            res = v => cb(v, true)\n          }\n        }\n      })\n    }\n\n    if (options.status) options.status.fetchDispatched = true\n    const p = new Promise(pcall).then(cb, eb)\n    const bf: BackgroundFetch<V> = Object.assign(p, {\n      __abortController: ac,\n      __staleWhileFetching: v,\n      __returned: undefined,\n    })\n\n    if (index === undefined) {\n      // internal, don't expose status.\n      this.set(k, bf, { ...fetchOpts.options, status: undefined })\n      index = this.#keyMap.get(k)\n    } else {\n      this.#valList[index] = bf\n    }\n    return bf\n  }\n\n  #isBackgroundFetch(p: any): p is BackgroundFetch<V> {\n    if (!this.#hasFetchMethod) return false\n    const b = p as BackgroundFetch<V>\n    return (\n      !!b &&\n      b instanceof Promise &&\n      b.hasOwnProperty('__staleWhileFetching') &&\n      b.__abortController instanceof AC\n    )\n  }\n\n  /**\n   * Make an asynchronous cached fetch using the\n   * {@link LRUCache.OptionsBase.fetchMethod} function.\n   *\n   * If the value is in the cache and not stale, then the returned\n   * Promise resolves to the value.\n   *\n   * If not in the cache, or beyond its TTL staleness, then\n   * `fetchMethod(key, staleValue, { options, signal, context })` is\n   * called, and the value returned will be added to the cache once\n   * resolved.\n   *\n   * If called with `allowStale`, and an asynchronous fetch is\n   * currently in progress to reload a stale value, then the former\n   * stale value will be returned.\n   *\n   * If called with `forceRefresh`, then the cached item will be\n   * re-fetched, even if it is not stale. However, if `allowStale` is also\n   * set, then the old value will still be returned. This is useful\n   * in cases where you want to force a reload of a cached value. If\n   * a background fetch is already in progress, then `forceRefresh`\n   * has no effect.\n   *\n   * If multiple fetches for the same key are issued, then they will all be\n   * coalesced into a single call to fetchMethod.\n   *\n   * Note that this means that handling options such as\n   * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort},\n   * {@link LRUCache.FetchOptions.signal},\n   * and {@link LRUCache.OptionsBase.allowStaleOnFetchRejection} will be\n   * determined by the FIRST fetch() call for a given key.\n   *\n   * This is a known (fixable) shortcoming which will be addresed on when\n   * someone complains about it, as the fix would involve added complexity and\n   * may not be worth the costs for this edge case.\n   *\n   * If {@link LRUCache.OptionsBase.fetchMethod} is not specified, then this is\n   * effectively an alias for `Promise.resolve(cache.get(key))`.\n   *\n   * When the fetch method resolves to a value, if the fetch has not\n   * been aborted due to deletion, eviction, or being overwritten,\n   * then it is added to the cache using the options provided.\n   *\n   * If the key is evicted or deleted before the `fetchMethod`\n   * resolves, then the AbortSignal passed to the `fetchMethod` will\n   * receive an `abort` event, and the promise returned by `fetch()`\n   * will reject with the reason for the abort.\n   *\n   * If a `signal` is passed to the `fetch()` call, then aborting the\n   * signal will abort the fetch and cause the `fetch()` promise to\n   * reject with the reason provided.\n   *\n   * **Setting `context`**\n   *\n   * If an `FC` type is set to a type other than `unknown`, `void`, or\n   * `undefined` in the {@link LRUCache} constructor, then all\n   * calls to `cache.fetch()` _must_ provide a `context` option. If\n   * set to `undefined` or `void`, then calls to fetch _must not_\n   * provide a `context` option.\n   *\n   * The `context` param allows you to provide arbitrary data that\n   * might be relevant in the course of fetching the data. It is only\n   * relevant for the course of a single `fetch()` operation, and\n   * discarded afterwards.\n   *\n   * **Note: `fetch()` calls are inflight-unique**\n   *\n   * If you call `fetch()` multiple times with the same key value,\n   * then every call after the first will resolve on the same\n   * promise<sup>1</sup>,\n   * _even if they have different settings that would otherwise change\n   * the behavior of the fetch_, such as `noDeleteOnFetchRejection`\n   * or `ignoreFetchAbort`.\n   *\n   * In most cases, this is not a problem (in fact, only fetching\n   * something once is what you probably want, if you're caching in\n   * the first place). If you are changing the fetch() options\n   * dramatically between runs, there's a good chance that you might\n   * be trying to fit divergent semantics into a single object, and\n   * would be better off with multiple cache instances.\n   *\n   * **1**: Ie, they're not the \"same Promise\", but they resolve at\n   * the same time, because they're both waiting on the same\n   * underlying fetchMethod response.\n   */\n\n  fetch(\n    k: K,\n    fetchOptions: unknown extends FC\n      ? LRUCache.FetchOptions<K, V, FC>\n      : FC extends undefined | void\n      ? LRUCache.FetchOptionsNoContext<K, V>\n      : LRUCache.FetchOptionsWithContext<K, V, FC>\n  ): Promise<undefined | V>\n\n  // this overload not allowed if context is required\n  fetch(\n    k: unknown extends FC\n      ? K\n      : FC extends undefined | void\n      ? K\n      : never,\n    fetchOptions?: unknown extends FC\n      ? LRUCache.FetchOptions<K, V, FC>\n      : FC extends undefined | void\n      ? LRUCache.FetchOptionsNoContext<K, V>\n      : never\n  ): Promise<undefined | V>\n\n  async fetch(\n    k: K,\n    fetchOptions: LRUCache.FetchOptions<K, V, FC> = {}\n  ): Promise<undefined | V> {\n    const {\n      // get options\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n      // set options\n      ttl = this.ttl,\n      noDisposeOnSet = this.noDisposeOnSet,\n      size = 0,\n      sizeCalculation = this.sizeCalculation,\n      noUpdateTTL = this.noUpdateTTL,\n      // fetch exclusive options\n      noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,\n      allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,\n      ignoreFetchAbort = this.ignoreFetchAbort,\n      allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,\n      context,\n      forceRefresh = false,\n      status,\n      signal,\n    } = fetchOptions\n\n    if (!this.#hasFetchMethod) {\n      if (status) status.fetch = 'get'\n      return this.get(k, {\n        allowStale,\n        updateAgeOnGet,\n        noDeleteOnStaleGet,\n        status,\n      })\n    }\n\n    const options = {\n      allowStale,\n      updateAgeOnGet,\n      noDeleteOnStaleGet,\n      ttl,\n      noDisposeOnSet,\n      size,\n      sizeCalculation,\n      noUpdateTTL,\n      noDeleteOnFetchRejection,\n      allowStaleOnFetchRejection,\n      allowStaleOnFetchAbort,\n      ignoreFetchAbort,\n      status,\n      signal,\n    }\n\n    let index = this.#keyMap.get(k)\n    if (index === undefined) {\n      if (status) status.fetch = 'miss'\n      const p = this.#backgroundFetch(k, index, options, context)\n      return (p.__returned = p)\n    } else {\n      // in cache, maybe already fetching\n      const v = this.#valList[index]\n      if (this.#isBackgroundFetch(v)) {\n        const stale =\n          allowStale && v.__staleWhileFetching !== undefined\n        if (status) {\n          status.fetch = 'inflight'\n          if (stale) status.returnedStale = true\n        }\n        return stale ? v.__staleWhileFetching : (v.__returned = v)\n      }\n\n      // if we force a refresh, that means do NOT serve the cached value,\n      // unless we are already in the process of refreshing the cache.\n      const isStale = this.#isStale(index)\n      if (!forceRefresh && !isStale) {\n        if (status) status.fetch = 'hit'\n        this.#moveToTail(index)\n        if (updateAgeOnGet) {\n          this.#updateItemAge(index)\n        }\n        if (status) this.#statusTTL(status, index)\n        return v\n      }\n\n      // ok, it is stale or a forced refresh, and not already fetching.\n      // refresh the cache.\n      const p = this.#backgroundFetch(k, index, options, context)\n      const hasStale = p.__staleWhileFetching !== undefined\n      const staleVal = hasStale && allowStale\n      if (status) {\n        status.fetch = isStale ? 'stale' : 'refresh'\n        if (staleVal && isStale) status.returnedStale = true\n      }\n      return staleVal ? p.__staleWhileFetching : (p.__returned = p)\n    }\n  }\n\n  /**\n   * In some cases, `cache.fetch()` may resolve to `undefined`, either because\n   * a {@link LRUCache.OptionsBase#fetchMethod} was not provided (turning\n   * `cache.fetch(k)` into just an async wrapper around `cache.get(k)`) or\n   * because `ignoreFetchAbort` was specified (either to the constructor or\n   * in the {@link LRUCache.FetchOptions}). Also, the\n   * {@link OptionsBase.fetchMethod} may return `undefined` or `void`, making\n   * the test even more complicated.\n   *\n   * Because inferring the cases where `undefined` might be returned are so\n   * cumbersome, but testing for `undefined` can also be annoying, this method\n   * can be used, which will reject if `this.fetch()` resolves to undefined.\n   */\n  forceFetch(\n    k: K,\n    fetchOptions: unknown extends FC\n      ? LRUCache.FetchOptions<K, V, FC>\n      : FC extends undefined | void\n      ? LRUCache.FetchOptionsNoContext<K, V>\n      : LRUCache.FetchOptionsWithContext<K, V, FC>\n  ): Promise<V>\n  // this overload not allowed if context is required\n  forceFetch(\n    k: unknown extends FC\n      ? K\n      : FC extends undefined | void\n      ? K\n      : never,\n    fetchOptions?: unknown extends FC\n      ? LRUCache.FetchOptions<K, V, FC>\n      : FC extends undefined | void\n      ? LRUCache.FetchOptionsNoContext<K, V>\n      : never\n  ): Promise<V>\n  async forceFetch(\n    k: K,\n    fetchOptions: LRUCache.FetchOptions<K, V, FC> = {}\n  ): Promise<V> {\n    const v = await this.fetch(\n      k,\n      fetchOptions as unknown extends FC\n        ? LRUCache.FetchOptions<K, V, FC>\n        : FC extends undefined | void\n        ? LRUCache.FetchOptionsNoContext<K, V>\n        : LRUCache.FetchOptionsWithContext<K, V, FC>\n    )\n    if (v === undefined) throw new Error('fetch() returned undefined')\n    return v\n  }\n\n  /**\n   * If the key is found in the cache, then this is equivalent to\n   * {@link LRUCache#get}. If not, in the cache, then calculate the value using\n   * the {@link LRUCache.OptionsBase.memoMethod}, and add it to the cache.\n   *\n   * If an `FC` type is set to a type other than `unknown`, `void`, or\n   * `undefined` in the LRUCache constructor, then all calls to `cache.memo()`\n   * _must_ provide a `context` option. If set to `undefined` or `void`, then\n   * calls to memo _must not_ provide a `context` option.\n   *\n   * The `context` param allows you to provide arbitrary data that might be\n   * relevant in the course of fetching the data. It is only relevant for the\n   * course of a single `memo()` operation, and discarded afterwards.\n   */\n  memo(\n    k: K,\n    memoOptions: unknown extends FC\n      ? LRUCache.MemoOptions<K, V, FC>\n      : FC extends undefined | void\n      ? LRUCache.MemoOptionsNoContext<K, V>\n      : LRUCache.MemoOptionsWithContext<K, V, FC>\n  ): V\n  // this overload not allowed if context is required\n  memo(\n    k: unknown extends FC\n      ? K\n      : FC extends undefined | void\n      ? K\n      : never,\n    memoOptions?: unknown extends FC\n      ? LRUCache.MemoOptions<K, V, FC>\n      : FC extends undefined | void\n      ? LRUCache.MemoOptionsNoContext<K, V>\n      : never\n  ): V\n  memo(k: K, memoOptions: LRUCache.MemoOptions<K, V, FC> = {}) {\n    const memoMethod = this.#memoMethod\n    if (!memoMethod) {\n      throw new Error('no memoMethod provided to constructor')\n    }\n    const { context, forceRefresh, ...options } = memoOptions\n    const v = this.get(k, options)\n    if (!forceRefresh && v !== undefined) return v\n    const vv = memoMethod(k, v, {\n      options,\n      context,\n    } as LRUCache.MemoizerOptions<K, V, FC>)\n    this.set(k, vv, options)\n    return vv\n  }\n\n  /**\n   * Return a value from the cache. Will update the recency of the cache\n   * entry found.\n   *\n   * If the key is not found, get() will return `undefined`.\n   */\n  get(k: K, getOptions: LRUCache.GetOptions<K, V, FC> = {}) {\n    const {\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n      status,\n    } = getOptions\n    const index = this.#keyMap.get(k)\n    if (index !== undefined) {\n      const value = this.#valList[index]\n      const fetching = this.#isBackgroundFetch(value)\n      if (status) this.#statusTTL(status, index)\n      if (this.#isStale(index)) {\n        if (status) status.get = 'stale'\n        // delete only if not an in-flight background fetch\n        if (!fetching) {\n          if (!noDeleteOnStaleGet) {\n            this.#delete(k, 'expire')\n          }\n          if (status && allowStale) status.returnedStale = true\n          return allowStale ? value : undefined\n        } else {\n          if (\n            status &&\n            allowStale &&\n            value.__staleWhileFetching !== undefined\n          ) {\n            status.returnedStale = true\n          }\n          return allowStale ? value.__staleWhileFetching : undefined\n        }\n      } else {\n        if (status) status.get = 'hit'\n        // if we're currently fetching it, we don't actually have it yet\n        // it's not stale, which means this isn't a staleWhileRefetching.\n        // If it's not stale, and fetching, AND has a __staleWhileFetching\n        // value, then that means the user fetched with {forceRefresh:true},\n        // so it's safe to return that value.\n        if (fetching) {\n          return value.__staleWhileFetching\n        }\n        this.#moveToTail(index)\n        if (updateAgeOnGet) {\n          this.#updateItemAge(index)\n        }\n        return value\n      }\n    } else if (status) {\n      status.get = 'miss'\n    }\n  }\n\n  #connect(p: Index, n: Index) {\n    this.#prev[n] = p\n    this.#next[p] = n\n  }\n\n  #moveToTail(index: Index): void {\n    // if tail already, nothing to do\n    // if head, move head to next[index]\n    // else\n    //   move next[prev[index]] to next[index] (head has no prev)\n    //   move prev[next[index]] to prev[index]\n    // prev[index] = tail\n    // next[tail] = index\n    // tail = index\n    if (index !== this.#tail) {\n      if (index === this.#head) {\n        this.#head = this.#next[index] as Index\n      } else {\n        this.#connect(\n          this.#prev[index] as Index,\n          this.#next[index] as Index\n        )\n      }\n      this.#connect(this.#tail, index)\n      this.#tail = index\n    }\n  }\n\n  /**\n   * Deletes a key out of the cache.\n   *\n   * Returns true if the key was deleted, false otherwise.\n   */\n  delete(k: K) {\n    return this.#delete(k, 'delete')\n  }\n\n  #delete(k: K, reason: LRUCache.DisposeReason) {\n    let deleted = false\n    if (this.#size !== 0) {\n      const index = this.#keyMap.get(k)\n      if (index !== undefined) {\n        deleted = true\n        if (this.#size === 1) {\n          this.#clear(reason)\n        } else {\n          this.#removeItemSize(index)\n          const v = this.#valList[index]\n          if (this.#isBackgroundFetch(v)) {\n            v.__abortController.abort(new Error('deleted'))\n          } else if (this.#hasDispose || this.#hasDisposeAfter) {\n            if (this.#hasDispose) {\n              this.#dispose?.(v as V, k, reason)\n            }\n            if (this.#hasDisposeAfter) {\n              this.#disposed?.push([v as V, k, reason])\n            }\n          }\n          this.#keyMap.delete(k)\n          this.#keyList[index] = undefined\n          this.#valList[index] = undefined\n          if (index === this.#tail) {\n            this.#tail = this.#prev[index] as Index\n          } else if (index === this.#head) {\n            this.#head = this.#next[index] as Index\n          } else {\n            const pi = this.#prev[index] as number\n            this.#next[pi] = this.#next[index] as number\n            const ni = this.#next[index] as number\n            this.#prev[ni] = this.#prev[index] as number\n          }\n          this.#size--\n          this.#free.push(index)\n        }\n      }\n    }\n    if (this.#hasDisposeAfter && this.#disposed?.length) {\n      const dt = this.#disposed\n      let task: DisposeTask<K, V> | undefined\n      while ((task = dt?.shift())) {\n        this.#disposeAfter?.(...task)\n      }\n    }\n    return deleted\n  }\n\n  /**\n   * Clear the cache entirely, throwing away all values.\n   */\n  clear() {\n    return this.#clear('delete')\n  }\n  #clear(reason: LRUCache.DisposeReason) {\n    for (const index of this.#rindexes({ allowStale: true })) {\n      const v = this.#valList[index]\n      if (this.#isBackgroundFetch(v)) {\n        v.__abortController.abort(new Error('deleted'))\n      } else {\n        const k = this.#keyList[index]\n        if (this.#hasDispose) {\n          this.#dispose?.(v as V, k as K, reason)\n        }\n        if (this.#hasDisposeAfter) {\n          this.#disposed?.push([v as V, k as K, reason])\n        }\n      }\n    }\n\n    this.#keyMap.clear()\n    this.#valList.fill(undefined)\n    this.#keyList.fill(undefined)\n    if (this.#ttls && this.#starts) {\n      this.#ttls.fill(0)\n      this.#starts.fill(0)\n    }\n    if (this.#sizes) {\n      this.#sizes.fill(0)\n    }\n    this.#head = 0 as Index\n    this.#tail = 0 as Index\n    this.#free.length = 0\n    this.#calculatedSize = 0\n    this.#size = 0\n    if (this.#hasDisposeAfter && this.#disposed) {\n      const dt = this.#disposed\n      let task: DisposeTask<K, V> | undefined\n      while ((task = dt?.shift())) {\n        this.#disposeAfter?.(...task)\n      }\n    }\n  }\n}\n", "var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar ContainerIterator = /** @class */ (function () {\n    /**\n     * @internal\n     */\n    function ContainerIterator(iteratorType) {\n        if (iteratorType === void 0) { iteratorType = 0 /* IteratorType.NORMAL */; }\n        this.iteratorType = iteratorType;\n    }\n    /**\n     * @param iter - The other iterator you want to compare.\n     * @returns Whether this equals to obj.\n     * @example\n     * container.find(1).equals(container.end());\n     */\n    ContainerIterator.prototype.equals = function (iter) {\n        return this._node === iter._node;\n    };\n    return ContainerIterator;\n}());\nexport { ContainerIterator };\nvar Base = /** @class */ (function () {\n    function Base() {\n        /**\n         * @description Container's size.\n         * @internal\n         */\n        this._length = 0;\n    }\n    Object.defineProperty(Base.prototype, \"length\", {\n        /**\n         * @returns The size of the container.\n         * @example\n         * const container = new Vector([1, 2]);\n         * console.log(container.length); // 2\n         */\n        get: function () {\n            return this._length;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * @returns The size of the container.\n     * @example\n     * const container = new Vector([1, 2]);\n     * console.log(container.size()); // 2\n     */\n    Base.prototype.size = function () {\n        return this._length;\n    };\n    /**\n     * @returns Whether the container is empty.\n     * @example\n     * container.clear();\n     * console.log(container.empty());  // true\n     */\n    Base.prototype.empty = function () {\n        return this._length === 0;\n    };\n    return Base;\n}());\nexport { Base };\nvar Container = /** @class */ (function (_super) {\n    __extends(Container, _super);\n    function Container() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return Container;\n}(Base));\nexport { Container };\n", "/**\n * @description The iterator type including `NORMAL` and `REVERSE`.\n */\nexport const enum IteratorType {\n  NORMAL = 0,\n  REVERSE = 1\n}\n\nexport abstract class ContainerIterator<T> {\n  /**\n   * @description The container pointed to by the iterator.\n   */\n  abstract readonly container: Container<T>;\n  /**\n   * @internal\n   */\n  abstract _node: unknown;\n  /**\n   * @description Iterator's type.\n   * @example\n   * console.log(container.end().iteratorType === IteratorType.NORMAL);  // true\n   */\n  readonly iteratorType: IteratorType;\n  /**\n   * @internal\n   */\n  protected constructor(iteratorType = IteratorType.NORMAL) {\n    this.iteratorType = iteratorType;\n  }\n  /**\n   * @param iter - The other iterator you want to compare.\n   * @returns Whether this equals to obj.\n   * @example\n   * container.find(1).equals(container.end());\n   */\n  equals(iter: ContainerIterator<T>) {\n    return this._node === iter._node;\n  }\n  /**\n   * @description Pointers to element.\n   * @returns The value of the pointer's element.\n   * @example\n   * const val = container.begin().pointer;\n   */\n  abstract get pointer(): T;\n  /**\n   * @description Set pointer's value (some containers are unavailable).\n   * @param newValue - The new value you want to set.\n   * @example\n   * (<LinkList<number>>container).begin().pointer = 1;\n   */\n  abstract set pointer(newValue: T);\n  /**\n   * @description Move `this` iterator to pre.\n   * @returns The iterator's self.\n   * @example\n   * const iter = container.find(1);  // container = [0, 1]\n   * const pre = iter.pre();\n   * console.log(pre === iter);  // true\n   * console.log(pre.equals(iter));  // true\n   * console.log(pre.pointer, iter.pointer); // 0, 0\n   */\n  abstract pre(): this;\n  /**\n   * @description Move `this` iterator to next.\n   * @returns The iterator's self.\n   * @example\n   * const iter = container.find(1);  // container = [1, 2]\n   * const next = iter.next();\n   * console.log(next === iter);  // true\n   * console.log(next.equals(iter));  // true\n   * console.log(next.pointer, iter.pointer); // 2, 2\n   */\n  abstract next(): this;\n  /**\n   * @description Get a copy of itself.\n   * @returns The copy of self.\n   * @example\n   * const iter = container.find(1);  // container = [1, 2]\n   * const next = iter.copy().next();\n   * console.log(next === iter);  // false\n   * console.log(next.equals(iter));  // false\n   * console.log(next.pointer, iter.pointer); // 2, 1\n   */\n  abstract copy(): ContainerIterator<T>;\n}\n\nexport abstract class Base {\n  /**\n   * @description Container's size.\n   * @internal\n   */\n  protected _length = 0;\n  /**\n   * @returns The size of the container.\n   * @example\n   * const container = new Vector([1, 2]);\n   * console.log(container.length); // 2\n   */\n  get length() {\n    return this._length;\n  }\n  /**\n   * @returns The size of the container.\n   * @example\n   * const container = new Vector([1, 2]);\n   * console.log(container.size()); // 2\n   */\n  size() {\n    return this._length;\n  }\n  /**\n   * @returns Whether the container is empty.\n   * @example\n   * container.clear();\n   * console.log(container.empty());  // true\n   */\n  empty() {\n    return this._length === 0;\n  }\n  /**\n   * @description Clear the container.\n   * @example\n   * container.clear();\n   * console.log(container.empty());  // true\n   */\n  abstract clear(): void;\n}\n\nexport abstract class Container<T> extends Base {\n  /**\n   * @returns Iterator pointing to the beginning element.\n   * @example\n   * const begin = container.begin();\n   * const end = container.end();\n   * for (const it = begin; !it.equals(end); it.next()) {\n   *   doSomething(it.pointer);\n   * }\n   */\n  abstract begin(): ContainerIterator<T>;\n  /**\n   * @returns Iterator pointing to the super end like c++.\n   * @example\n   * const begin = container.begin();\n   * const end = container.end();\n   * for (const it = begin; !it.equals(end); it.next()) {\n   *   doSomething(it.pointer);\n   * }\n   */\n  abstract end(): ContainerIterator<T>;\n  /**\n   * @returns Iterator pointing to the end element.\n   * @example\n   * const rBegin = container.rBegin();\n   * const rEnd = container.rEnd();\n   * for (const it = rBegin; !it.equals(rEnd); it.next()) {\n   *   doSomething(it.pointer);\n   * }\n   */\n  abstract rBegin(): ContainerIterator<T>;\n  /**\n   * @returns Iterator pointing to the super begin like c++.\n   * @example\n   * const rBegin = container.rBegin();\n   * const rEnd = container.rEnd();\n   * for (const it = rBegin; !it.equals(rEnd); it.next()) {\n   *   doSomething(it.pointer);\n   * }\n   */\n  abstract rEnd(): ContainerIterator<T>;\n  /**\n   * @returns The first element of the container.\n   */\n  abstract front(): T | undefined;\n  /**\n   * @returns The last element of the container.\n   */\n  abstract back(): T | undefined;\n  /**\n   * @param element - The element you want to find.\n   * @returns An iterator pointing to the element if found, or super end if not found.\n   * @example\n   * container.find(1).equals(container.end());\n   */\n  abstract find(element: T): ContainerIterator<T>;\n  /**\n   * @description Iterate over all elements in the container.\n   * @param callback - Callback function like Array.forEach.\n   * @example\n   * container.forEach((element, index) => console.log(element, index));\n   */\n  abstract forEach(callback: (element: T, index: number, container: Container<T>) => void): void;\n  /**\n   * @description Gets the value of the element at the specified position.\n   * @example\n   * const val = container.getElementByPos(-1); // throw a RangeError\n   */\n  abstract getElementByPos(pos: number): T;\n  /**\n   * @description Removes the element at the specified position.\n   * @param pos - The element's position you want to remove.\n   * @returns The container length after erasing.\n   * @example\n   * container.eraseElementByPos(-1); // throw a RangeError\n   */\n  abstract eraseElementByPos(pos: number): number;\n  /**\n   * @description Removes element by iterator and move `iter` to next.\n   * @param iter - The iterator you want to erase.\n   * @returns The next iterator.\n   * @example\n   * container.eraseElementByIterator(container.begin());\n   * container.eraseElementByIterator(container.end()); // throw a RangeError\n   */\n  abstract eraseElementByIterator(\n    iter: ContainerIterator<T>\n  ): ContainerIterator<T>;\n  /**\n   * @description Using for `for...of` syntax like Array.\n   * @example\n   * for (const element of container) {\n   *   console.log(element);\n   * }\n   */\n  abstract [Symbol.iterator](): Generator<T, void>;\n}\n\n/**\n * @description The initial data type passed in when initializing the container.\n */\nexport type initContainer<T> = {\n  size?: number | (() => number);\n  length?: number;\n  forEach: (callback: (el: T) => void) => void;\n}\n", "var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Base } from \"../ContainerBase\";\nvar Stack = /** @class */ (function (_super) {\n    __extends(Stack, _super);\n    function Stack(container) {\n        if (container === void 0) { container = []; }\n        var _this = _super.call(this) || this;\n        /**\n         * @internal\n         */\n        _this._stack = [];\n        var self = _this;\n        container.forEach(function (el) {\n            self.push(el);\n        });\n        return _this;\n    }\n    Stack.prototype.clear = function () {\n        this._length = 0;\n        this._stack = [];\n    };\n    /**\n     * @description Insert element to stack's end.\n     * @description The element you want to push to the back.\n     * @returns The container length after erasing.\n     */\n    Stack.prototype.push = function (element) {\n        this._stack.push(element);\n        this._length += 1;\n        return this._length;\n    };\n    /**\n     * @description Removes the end element.\n     * @returns The element you popped.\n     */\n    Stack.prototype.pop = function () {\n        if (this._length === 0)\n            return;\n        this._length -= 1;\n        return this._stack.pop();\n    };\n    /**\n     * @description Accesses the end element.\n     * @returns The last element.\n     */\n    Stack.prototype.top = function () {\n        return this._stack[this._length - 1];\n    };\n    return Stack;\n}(Base));\nexport default Stack;\n", "import { Base, initContainer } from '@/container/ContainerBase';\n\nclass Stack<T> extends Base {\n  /**\n   * @internal\n   */\n  private _stack: T[] = [];\n  constructor(container: initContainer<T> = []) {\n    super();\n    const self = this;\n    container.forEach(function (el) {\n      self.push(el);\n    });\n  }\n  clear() {\n    this._length = 0;\n    this._stack = [];\n  }\n  /**\n   * @description Insert element to stack's end.\n   * @description The element you want to push to the back.\n   * @returns The container length after erasing.\n   */\n  push(element: T) {\n    this._stack.push(element);\n    this._length += 1;\n    return this._length;\n  }\n  /**\n   * @description Removes the end element.\n   * @returns The element you popped.\n   */\n  pop() {\n    if (this._length === 0) return;\n    this._length -= 1;\n    return this._stack.pop();\n  }\n  /**\n   * @description Accesses the end element.\n   * @returns The last element.\n   */\n  top(): T | undefined {\n    return this._stack[this._length - 1];\n  }\n}\n\nexport default Stack;\n", "var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Base } from \"../ContainerBase\";\nvar Queue = /** @class */ (function (_super) {\n    __extends(Queue, _super);\n    function Queue(container) {\n        if (container === void 0) { container = []; }\n        var _this = _super.call(this) || this;\n        /**\n         * @internal\n         */\n        _this._first = 0;\n        /**\n         * @internal\n         */\n        _this._queue = [];\n        var self = _this;\n        container.forEach(function (el) {\n            self.push(el);\n        });\n        return _this;\n    }\n    Queue.prototype.clear = function () {\n        this._queue = [];\n        this._length = this._first = 0;\n    };\n    /**\n     * @description Inserts element to queue's end.\n     * @param element - The element you want to push to the front.\n     * @returns The container length after pushing.\n     */\n    Queue.prototype.push = function (element) {\n        var capacity = this._queue.length;\n        if ((this._first / capacity) > 0.5 /* QUEUE_CONSTANT.ALLOCATE_SIGMA */ &&\n            (this._first + this._length) >= capacity &&\n            capacity > 4096 /* QUEUE_CONSTANT.MIN_ALLOCATE_SIZE */) {\n            var length_1 = this._length;\n            for (var i = 0; i < length_1; ++i) {\n                this._queue[i] = this._queue[this._first + i];\n            }\n            this._first = 0;\n            this._queue[this._length] = element;\n        }\n        else\n            this._queue[this._first + this._length] = element;\n        return ++this._length;\n    };\n    /**\n     * @description Removes the first element.\n     * @returns The element you popped.\n     */\n    Queue.prototype.pop = function () {\n        if (this._length === 0)\n            return;\n        var el = this._queue[this._first++];\n        this._length -= 1;\n        return el;\n    };\n    /**\n     * @description Access the first element.\n     * @returns The first element.\n     */\n    Queue.prototype.front = function () {\n        if (this._length === 0)\n            return;\n        return this._queue[this._first];\n    };\n    return Queue;\n}(Base));\nexport default Queue;\n", "import { Base, initContainer } from '@/container/ContainerBase';\n\nconst enum QUEUE_CONSTANT {\n  ALLOCATE_SIGMA = 0.5,\n  MIN_ALLOCATE_SIZE = (1 << 12)\n}\n\nclass Queue<T> extends Base {\n  /**\n   * @internal\n   */\n  private _first = 0;\n  /**\n   * @internal\n   */\n  private _queue: T[] = [];\n  constructor(container: initContainer<T> = []) {\n    super();\n    const self = this;\n    container.forEach(function (el) {\n      self.push(el);\n    });\n  }\n  clear() {\n    this._queue = [];\n    this._length = this._first = 0;\n  }\n  /**\n   * @description Inserts element to queue's end.\n   * @param element - The element you want to push to the front.\n   * @returns The container length after pushing.\n   */\n  push(element: T) {\n    const capacity = this._queue.length;\n    if (\n      (this._first / capacity) > QUEUE_CONSTANT.ALLOCATE_SIGMA &&\n      (this._first + this._length) >= capacity &&\n      capacity > QUEUE_CONSTANT.MIN_ALLOCATE_SIZE\n    ) {\n      const length = this._length;\n      for (let i = 0; i < length; ++i) {\n        this._queue[i] = this._queue[this._first + i];\n      }\n      this._first = 0;\n      this._queue[this._length] = element;\n    } else this._queue[this._first + this._length] = element;\n    return ++this._length;\n  }\n  /**\n   * @description Removes the first element.\n   * @returns The element you popped.\n   */\n  pop() {\n    if (this._length === 0) return;\n    const el = this._queue[this._first++];\n    this._length -= 1;\n    return el;\n  }\n  /**\n   * @description Access the first element.\n   * @returns The first element.\n   */\n  front(): T | undefined {\n    if (this._length === 0) return;\n    return this._queue[this._first];\n  }\n}\n\nexport default Queue;\n", "var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { Base } from \"../ContainerBase\";\nvar PriorityQueue = /** @class */ (function (_super) {\n    __extends(PriorityQueue, _super);\n    /**\n     * @description PriorityQueue's constructor.\n     * @param container - Initialize container, must have a forEach function.\n     * @param cmp - Compare function.\n     * @param copy - When the container is an array, you can choose to directly operate on the original object of\n     *               the array or perform a shallow copy. The default is shallow copy.\n     * @example\n     * new PriorityQueue();\n     * new PriorityQueue([1, 2, 3]);\n     * new PriorityQueue([1, 2, 3], (x, y) => x - y);\n     * new PriorityQueue([1, 2, 3], (x, y) => x - y, false);\n     */\n    function PriorityQueue(container, cmp, copy) {\n        if (container === void 0) { container = []; }\n        if (cmp === void 0) { cmp = function (x, y) {\n            if (x > y)\n                return -1;\n            if (x < y)\n                return 1;\n            return 0;\n        }; }\n        if (copy === void 0) { copy = true; }\n        var _this = _super.call(this) || this;\n        _this._cmp = cmp;\n        if (Array.isArray(container)) {\n            _this._priorityQueue = copy ? __spreadArray([], __read(container), false) : container;\n        }\n        else {\n            _this._priorityQueue = [];\n            var self_1 = _this;\n            container.forEach(function (el) {\n                self_1._priorityQueue.push(el);\n            });\n        }\n        _this._length = _this._priorityQueue.length;\n        var halfLength = _this._length >> 1;\n        for (var parent_1 = (_this._length - 1) >> 1; parent_1 >= 0; --parent_1) {\n            _this._pushDown(parent_1, halfLength);\n        }\n        return _this;\n    }\n    /**\n     * @internal\n     */\n    PriorityQueue.prototype._pushUp = function (pos) {\n        var item = this._priorityQueue[pos];\n        while (pos > 0) {\n            var parent_2 = (pos - 1) >> 1;\n            var parentItem = this._priorityQueue[parent_2];\n            if (this._cmp(parentItem, item) <= 0)\n                break;\n            this._priorityQueue[pos] = parentItem;\n            pos = parent_2;\n        }\n        this._priorityQueue[pos] = item;\n    };\n    /**\n     * @internal\n     */\n    PriorityQueue.prototype._pushDown = function (pos, halfLength) {\n        var item = this._priorityQueue[pos];\n        while (pos < halfLength) {\n            var left = pos << 1 | 1;\n            var right = left + 1;\n            var minItem = this._priorityQueue[left];\n            if (right < this._length &&\n                this._cmp(minItem, this._priorityQueue[right]) > 0) {\n                left = right;\n                minItem = this._priorityQueue[right];\n            }\n            if (this._cmp(minItem, item) >= 0)\n                break;\n            this._priorityQueue[pos] = minItem;\n            pos = left;\n        }\n        this._priorityQueue[pos] = item;\n    };\n    PriorityQueue.prototype.clear = function () {\n        this._length = 0;\n        this._priorityQueue.length = 0;\n    };\n    /**\n     * @description Push element into a container in order.\n     * @param item - The element you want to push.\n     * @returns The size of heap after pushing.\n     * @example\n     * queue.push(1);\n     */\n    PriorityQueue.prototype.push = function (item) {\n        this._priorityQueue.push(item);\n        this._pushUp(this._length);\n        this._length += 1;\n    };\n    /**\n     * @description Removes the top element.\n     * @returns The element you popped.\n     * @example\n     * queue.pop();\n     */\n    PriorityQueue.prototype.pop = function () {\n        if (this._length === 0)\n            return;\n        var value = this._priorityQueue[0];\n        var last = this._priorityQueue.pop();\n        this._length -= 1;\n        if (this._length) {\n            this._priorityQueue[0] = last;\n            this._pushDown(0, this._length >> 1);\n        }\n        return value;\n    };\n    /**\n     * @description Accesses the top element.\n     * @example\n     * const top = queue.top();\n     */\n    PriorityQueue.prototype.top = function () {\n        return this._priorityQueue[0];\n    };\n    /**\n     * @description Check if element is in heap.\n     * @param item - The item want to find.\n     * @returns Whether element is in heap.\n     * @example\n     * const que = new PriorityQueue([], (x, y) => x.id - y.id);\n     * const obj = { id: 1 };\n     * que.push(obj);\n     * console.log(que.find(obj));  // true\n     */\n    PriorityQueue.prototype.find = function (item) {\n        return this._priorityQueue.indexOf(item) >= 0;\n    };\n    /**\n     * @description Remove specified item from heap.\n     * @param item - The item want to remove.\n     * @returns Whether remove success.\n     * @example\n     * const que = new PriorityQueue([], (x, y) => x.id - y.id);\n     * const obj = { id: 1 };\n     * que.push(obj);\n     * que.remove(obj);\n     */\n    PriorityQueue.prototype.remove = function (item) {\n        var index = this._priorityQueue.indexOf(item);\n        if (index < 0)\n            return false;\n        if (index === 0) {\n            this.pop();\n        }\n        else if (index === this._length - 1) {\n            this._priorityQueue.pop();\n            this._length -= 1;\n        }\n        else {\n            this._priorityQueue.splice(index, 1, this._priorityQueue.pop());\n            this._length -= 1;\n            this._pushUp(index);\n            this._pushDown(index, this._length >> 1);\n        }\n        return true;\n    };\n    /**\n     * @description Update item and it's pos in the heap.\n     * @param item - The item want to update.\n     * @returns Whether update success.\n     * @example\n     * const que = new PriorityQueue([], (x, y) => x.id - y.id);\n     * const obj = { id: 1 };\n     * que.push(obj);\n     * obj.id = 2;\n     * que.updateItem(obj);\n     */\n    PriorityQueue.prototype.updateItem = function (item) {\n        var index = this._priorityQueue.indexOf(item);\n        if (index < 0)\n            return false;\n        this._pushUp(index);\n        this._pushDown(index, this._length >> 1);\n        return true;\n    };\n    /**\n     * @returns Return a copy array of heap.\n     * @example\n     * const arr = queue.toArray();\n     */\n    PriorityQueue.prototype.toArray = function () {\n        return __spreadArray([], __read(this._priorityQueue), false);\n    };\n    return PriorityQueue;\n}(Base));\nexport default PriorityQueue;\n", "import { Base, initContainer } from '@/container/ContainerBase';\n\nclass PriorityQueue<T> extends Base {\n  /**\n   * @internal\n   */\n  private readonly _priorityQueue: T[];\n  /**\n   * @internal\n   */\n  private readonly _cmp: (x: T, y: T) => number;\n  /**\n   * @description PriorityQueue's constructor.\n   * @param container - Initialize container, must have a forEach function.\n   * @param cmp - Compare function.\n   * @param copy - When the container is an array, you can choose to directly operate on the original object of\n   *               the array or perform a shallow copy. The default is shallow copy.\n   * @example\n   * new PriorityQueue();\n   * new PriorityQueue([1, 2, 3]);\n   * new PriorityQueue([1, 2, 3], (x, y) => x - y);\n   * new PriorityQueue([1, 2, 3], (x, y) => x - y, false);\n   */\n  constructor(\n    container: initContainer<T> = [],\n    cmp: (x: T, y: T) => number =\n    function (x: T, y: T) {\n      if (x > y) return -1;\n      if (x < y) return 1;\n      return 0;\n    },\n    copy = true\n  ) {\n    super();\n    this._cmp = cmp;\n    if (Array.isArray(container)) {\n      this._priorityQueue = copy ? [...container] : container;\n    } else {\n      this._priorityQueue = [];\n      const self = this;\n      container.forEach(function (el) {\n        self._priorityQueue.push(el);\n      });\n    }\n    this._length = this._priorityQueue.length;\n    const halfLength = this._length >> 1;\n    for (let parent = (this._length - 1) >> 1; parent >= 0; --parent) {\n      this._pushDown(parent, halfLength);\n    }\n  }\n  /**\n   * @internal\n   */\n  private _pushUp(pos: number) {\n    const item = this._priorityQueue[pos];\n    while (pos > 0) {\n      const parent = (pos - 1) >> 1;\n      const parentItem = this._priorityQueue[parent];\n      if (this._cmp(parentItem, item) <= 0) break;\n      this._priorityQueue[pos] = parentItem;\n      pos = parent;\n    }\n    this._priorityQueue[pos] = item;\n  }\n  /**\n   * @internal\n   */\n  private _pushDown(pos: number, halfLength: number) {\n    const item = this._priorityQueue[pos];\n    while (pos < halfLength) {\n      let left = pos << 1 | 1;\n      const right = left + 1;\n      let minItem = this._priorityQueue[left];\n      if (\n        right < this._length &&\n        this._cmp(minItem, this._priorityQueue[right]) > 0\n      ) {\n        left = right;\n        minItem = this._priorityQueue[right];\n      }\n      if (this._cmp(minItem, item) >= 0) break;\n      this._priorityQueue[pos] = minItem;\n      pos = left;\n    }\n    this._priorityQueue[pos] = item;\n  }\n  clear() {\n    this._length = 0;\n    this._priorityQueue.length = 0;\n  }\n  /**\n   * @description Push element into a container in order.\n   * @param item - The element you want to push.\n   * @returns The size of heap after pushing.\n   * @example\n   * queue.push(1);\n   */\n  push(item: T) {\n    this._priorityQueue.push(item);\n    this._pushUp(this._length);\n    this._length += 1;\n  }\n  /**\n   * @description Removes the top element.\n   * @returns The element you popped.\n   * @example\n   * queue.pop();\n   */\n  pop() {\n    if (this._length === 0) return;\n    const value = this._priorityQueue[0];\n    const last = this._priorityQueue.pop()!;\n    this._length -= 1;\n    if (this._length) {\n      this._priorityQueue[0] = last;\n      this._pushDown(0, this._length >> 1);\n    }\n    return value;\n  }\n  /**\n   * @description Accesses the top element.\n   * @example\n   * const top = queue.top();\n   */\n  top(): T | undefined {\n    return this._priorityQueue[0];\n  }\n  /**\n   * @description Check if element is in heap.\n   * @param item - The item want to find.\n   * @returns Whether element is in heap.\n   * @example\n   * const que = new PriorityQueue([], (x, y) => x.id - y.id);\n   * const obj = { id: 1 };\n   * que.push(obj);\n   * console.log(que.find(obj));  // true\n   */\n  find(item: T) {\n    return this._priorityQueue.indexOf(item) >= 0;\n  }\n  /**\n   * @description Remove specified item from heap.\n   * @param item - The item want to remove.\n   * @returns Whether remove success.\n   * @example\n   * const que = new PriorityQueue([], (x, y) => x.id - y.id);\n   * const obj = { id: 1 };\n   * que.push(obj);\n   * que.remove(obj);\n   */\n  remove(item: T) {\n    const index = this._priorityQueue.indexOf(item);\n    if (index < 0) return false;\n    if (index === 0) {\n      this.pop();\n    } else if (index === this._length - 1) {\n      this._priorityQueue.pop();\n      this._length -= 1;\n    } else {\n      this._priorityQueue.splice(index, 1, this._priorityQueue.pop()!);\n      this._length -= 1;\n      this._pushUp(index);\n      this._pushDown(index, this._length >> 1);\n    }\n    return true;\n  }\n  /**\n   * @description Update item and it's pos in the heap.\n   * @param item - The item want to update.\n   * @returns Whether update success.\n   * @example\n   * const que = new PriorityQueue([], (x, y) => x.id - y.id);\n   * const obj = { id: 1 };\n   * que.push(obj);\n   * obj.id = 2;\n   * que.updateItem(obj);\n   */\n  updateItem(item: T) {\n    const index = this._priorityQueue.indexOf(item);\n    if (index < 0) return false;\n    this._pushUp(index);\n    this._pushDown(index, this._length >> 1);\n    return true;\n  }\n  /**\n   * @returns Return a copy array of heap.\n   * @example\n   * const arr = queue.toArray();\n   */\n  toArray() {\n    return [...this._priorityQueue];\n  }\n}\n\nexport default PriorityQueue;\n", "var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Container } from \"../../ContainerBase\";\nvar SequentialContainer = /** @class */ (function (_super) {\n    __extends(SequentialContainer, _super);\n    function SequentialContainer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return SequentialContainer;\n}(Container));\nexport default SequentialContainer;\n", "import { Container } from '@/container/ContainerBase';\n\nabstract class SequentialContainer<T> extends Container<T> {\n  /**\n   * @description Push the element to the back.\n   * @param element - The element you want to push.\n   * @returns The size of container after pushing.\n   */\n  abstract pushBack(element: T): number;\n  /**\n   * @description Removes the last element.\n   * @returns The element you popped.\n   */\n  abstract popBack(): T | undefined;\n  /**\n   * @description Sets element by position.\n   * @param pos - The position you want to change.\n   * @param element - The element's value you want to update.\n   * @example\n   * container.setElementByPos(-1, 1); // throw a RangeError\n   */\n  abstract setElementByPos(pos: number, element: T): void;\n  /**\n   * @description Removes the elements of the specified value.\n   * @param value - The value you want to remove.\n   * @returns The size of container after erasing.\n   * @example\n   * container.eraseElementByValue(-1);\n   */\n  abstract eraseElementByValue(value: T): number;\n  /**\n   * @description Insert several elements after the specified position.\n   * @param pos - The position you want to insert.\n   * @param element - The element you want to insert.\n   * @param num - The number of elements you want to insert (default 1).\n   * @returns The size of container after inserting.\n   * @example\n   * const container = new Vector([1, 2, 3]);\n   * container.insert(1, 4);  // [1, 4, 2, 3]\n   * container.insert(1, 5, 3); // [1, 5, 5, 5, 4, 2, 3]\n   */\n  abstract insert(pos: number, element: T, num?: number): number;\n  /**\n   * @description Reverses the container.\n   * @example\n   * const container = new Vector([1, 2, 3]);\n   * container.reverse(); // [3, 2, 1]\n   */\n  abstract reverse(): void;\n  /**\n   * @description Removes the duplication of elements in the container.\n   * @returns The size of container after inserting.\n   * @example\n   * const container = new Vector([1, 1, 3, 2, 2, 5, 5, 2]);\n   * container.unique(); // [1, 3, 2, 5, 2]\n   */\n  abstract unique(): number;\n  /**\n   * @description Sort the container.\n   * @param cmp - Comparison function to sort.\n   * @example\n   * const container = new Vector([3, 1, 10]);\n   * container.sort();  // [1, 10, 3]\n   * container.sort((x, y) => x - y); // [1, 3, 10]\n   */\n  abstract sort(cmp?: (x: T, y: T) => number): void;\n}\n\nexport default SequentialContainer;\n", "/**\n * @description Throw an iterator access error.\n * @internal\n */\nexport function throwIteratorAccessError() {\n  throw new RangeError('Iterator access denied!');\n}\n", "/**\n * @description Throw an iterator access error.\n * @internal\n */\nexport function throwIteratorAccessError() {\n    throw new RangeError('Iterator access denied!');\n}\n", "var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { ContainerIterator } from \"../../ContainerBase\";\nimport { throwIteratorAccessError } from \"../../../utils/throwError\";\nvar RandomIterator = /** @class */ (function (_super) {\n    __extends(RandomIterator, _super);\n    /**\n     * @internal\n     */\n    function RandomIterator(index, iteratorType) {\n        var _this = _super.call(this, iteratorType) || this;\n        _this._node = index;\n        if (_this.iteratorType === 0 /* IteratorType.NORMAL */) {\n            _this.pre = function () {\n                if (this._node === 0) {\n                    throwIteratorAccessError();\n                }\n                this._node -= 1;\n                return this;\n            };\n            _this.next = function () {\n                if (this._node === this.container.size()) {\n                    throwIteratorAccessError();\n                }\n                this._node += 1;\n                return this;\n            };\n        }\n        else {\n            _this.pre = function () {\n                if (this._node === this.container.size() - 1) {\n                    throwIteratorAccessError();\n                }\n                this._node += 1;\n                return this;\n            };\n            _this.next = function () {\n                if (this._node === -1) {\n                    throwIteratorAccessError();\n                }\n                this._node -= 1;\n                return this;\n            };\n        }\n        return _this;\n    }\n    Object.defineProperty(RandomIterator.prototype, \"pointer\", {\n        get: function () {\n            return this.container.getElementByPos(this._node);\n        },\n        set: function (newValue) {\n            this.container.setElementByPos(this._node, newValue);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return RandomIterator;\n}(ContainerIterator));\nexport { RandomIterator };\n", "import { ContainerIterator, IteratorType } from '@/container/ContainerBase';\nimport SequentialContainer from '@/container/SequentialContainer/Base/index';\nimport { throwIteratorAccessError } from '@/utils/throwError';\n\nexport abstract class RandomIterator<T> extends ContainerIterator<T> {\n  abstract readonly container: SequentialContainer<T>;\n  /**\n   * @internal\n   */\n  _node: number;\n  /**\n   * @internal\n   */\n  protected constructor(\n    index: number,\n    iteratorType?: IteratorType\n  ) {\n    super(iteratorType);\n    this._node = index;\n    if (this.iteratorType === IteratorType.NORMAL) {\n      this.pre = function () {\n        if (this._node === 0) {\n          throwIteratorAccessError();\n        }\n        this._node -= 1;\n        return this;\n      };\n      this.next = function () {\n        if (this._node === this.container.size()) {\n          throwIteratorAccessError();\n        }\n        this._node += 1;\n        return this;\n      };\n    } else {\n      this.pre = function () {\n        if (this._node === this.container.size() - 1) {\n          throwIteratorAccessError();\n        }\n        this._node += 1;\n        return this;\n      };\n      this.next = function () {\n        if (this._node === -1) {\n          throwIteratorAccessError();\n        }\n        this._node -= 1;\n        return this;\n      };\n    }\n  }\n  get pointer() {\n    return this.container.getElementByPos(this._node);\n  }\n  set pointer(newValue: T) {\n    this.container.setElementByPos(this._node, newValue);\n  }\n  // @ts-ignore\n  pre(): this;\n  // @ts-ignore\n  next(): this;\n}\n", "var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport SequentialContainer from './Base';\nimport { RandomIterator } from \"./Base/RandomIterator\";\nimport $checkWithinAccessParams from \"../../utils/checkParams.macro\";\nvar VectorIterator = /** @class */ (function (_super) {\n    __extends(VectorIterator, _super);\n    function VectorIterator(node, container, iteratorType) {\n        var _this = _super.call(this, node, iteratorType) || this;\n        _this.container = container;\n        return _this;\n    }\n    VectorIterator.prototype.copy = function () {\n        return new VectorIterator(this._node, this.container, this.iteratorType);\n    };\n    return VectorIterator;\n}(RandomIterator));\nvar Vector = /** @class */ (function (_super) {\n    __extends(Vector, _super);\n    /**\n     * @param container - Initialize container, must have a forEach function.\n     * @param copy - When the container is an array, you can choose to directly operate on the original object of\n     *               the array or perform a shallow copy. The default is shallow copy.\n     */\n    function Vector(container, copy) {\n        if (container === void 0) { container = []; }\n        if (copy === void 0) { copy = true; }\n        var _this = _super.call(this) || this;\n        if (Array.isArray(container)) {\n            _this._vector = copy ? __spreadArray([], __read(container), false) : container;\n            _this._length = container.length;\n        }\n        else {\n            _this._vector = [];\n            var self_1 = _this;\n            container.forEach(function (el) {\n                self_1.pushBack(el);\n            });\n        }\n        return _this;\n    }\n    Vector.prototype.clear = function () {\n        this._length = 0;\n        this._vector.length = 0;\n    };\n    Vector.prototype.begin = function () {\n        return new VectorIterator(0, this);\n    };\n    Vector.prototype.end = function () {\n        return new VectorIterator(this._length, this);\n    };\n    Vector.prototype.rBegin = function () {\n        return new VectorIterator(this._length - 1, this, 1 /* IteratorType.REVERSE */);\n    };\n    Vector.prototype.rEnd = function () {\n        return new VectorIterator(-1, this, 1 /* IteratorType.REVERSE */);\n    };\n    Vector.prototype.front = function () {\n        return this._vector[0];\n    };\n    Vector.prototype.back = function () {\n        return this._vector[this._length - 1];\n    };\n    Vector.prototype.getElementByPos = function (pos) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        return this._vector[pos];\n    };\n    Vector.prototype.eraseElementByPos = function (pos) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        this._vector.splice(pos, 1);\n        this._length -= 1;\n        return this._length;\n    };\n    Vector.prototype.eraseElementByValue = function (value) {\n        var index = 0;\n        for (var i = 0; i < this._length; ++i) {\n            if (this._vector[i] !== value) {\n                this._vector[index++] = this._vector[i];\n            }\n        }\n        this._length = this._vector.length = index;\n        return this._length;\n    };\n    Vector.prototype.eraseElementByIterator = function (iter) {\n        var _node = iter._node;\n        iter = iter.next();\n        this.eraseElementByPos(_node);\n        return iter;\n    };\n    Vector.prototype.pushBack = function (element) {\n        this._vector.push(element);\n        this._length += 1;\n        return this._length;\n    };\n    Vector.prototype.popBack = function () {\n        if (this._length === 0)\n            return;\n        this._length -= 1;\n        return this._vector.pop();\n    };\n    Vector.prototype.setElementByPos = function (pos, element) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        this._vector[pos] = element;\n    };\n    Vector.prototype.insert = function (pos, element, num) {\n        var _a;\n        if (num === void 0) { num = 1; }\n        if (pos < 0 || pos > this._length) {\n            throw new RangeError();\n        }\n        (_a = this._vector).splice.apply(_a, __spreadArray([pos, 0], __read(new Array(num).fill(element)), false));\n        this._length += num;\n        return this._length;\n    };\n    Vector.prototype.find = function (element) {\n        for (var i = 0; i < this._length; ++i) {\n            if (this._vector[i] === element) {\n                return new VectorIterator(i, this);\n            }\n        }\n        return this.end();\n    };\n    Vector.prototype.reverse = function () {\n        this._vector.reverse();\n    };\n    Vector.prototype.unique = function () {\n        var index = 1;\n        for (var i = 1; i < this._length; ++i) {\n            if (this._vector[i] !== this._vector[i - 1]) {\n                this._vector[index++] = this._vector[i];\n            }\n        }\n        this._length = this._vector.length = index;\n        return this._length;\n    };\n    Vector.prototype.sort = function (cmp) {\n        this._vector.sort(cmp);\n    };\n    Vector.prototype.forEach = function (callback) {\n        for (var i = 0; i < this._length; ++i) {\n            callback(this._vector[i], i, this);\n        }\n    };\n    Vector.prototype[Symbol.iterator] = function () {\n        return function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [5 /*yield**/, __values(this._vector)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        }.bind(this)();\n    };\n    return Vector;\n}(SequentialContainer));\nexport default Vector;\n", "import SequentialContainer from './Base';\nimport { initContainer, IteratorType } from '@/container/ContainerBase';\nimport { RandomIterator } from '@/container/SequentialContainer/Base/RandomIterator';\nimport $checkWithinAccessParams from '@/utils/checkParams.macro';\n\nclass VectorIterator<T> extends RandomIterator<T> {\n  container: Vector<T>;\n  constructor(node: number, container: Vector<T>, iteratorType?: IteratorType) {\n    super(node, iteratorType);\n    this.container = container;\n  }\n  copy() {\n    return new VectorIterator<T>(this._node, this.container, this.iteratorType);\n  }\n  // @ts-ignore\n  equals(iter: VectorIterator<T>): boolean;\n}\n\nexport type { VectorIterator };\n\nclass Vector<T> extends SequentialContainer<T> {\n  /**\n   * @internal\n   */\n  private readonly _vector: T[];\n  /**\n   * @param container - Initialize container, must have a forEach function.\n   * @param copy - When the container is an array, you can choose to directly operate on the original object of\n   *               the array or perform a shallow copy. The default is shallow copy.\n   */\n  constructor(container: initContainer<T> = [], copy = true) {\n    super();\n    if (Array.isArray(container)) {\n      this._vector = copy ? [...container] : container;\n      this._length = container.length;\n    } else {\n      this._vector = [];\n      const self = this;\n      container.forEach(function (el) {\n        self.pushBack(el);\n      });\n    }\n  }\n  clear() {\n    this._length = 0;\n    this._vector.length = 0;\n  }\n  begin() {\n    return new VectorIterator<T>(0, this);\n  }\n  end() {\n    return new VectorIterator<T>(this._length, this);\n  }\n  rBegin() {\n    return new VectorIterator<T>(this._length - 1, this, IteratorType.REVERSE);\n  }\n  rEnd() {\n    return new VectorIterator<T>(-1, this, IteratorType.REVERSE);\n  }\n  front(): T | undefined {\n    return this._vector[0];\n  }\n  back(): T | undefined {\n    return this._vector[this._length - 1];\n  }\n  getElementByPos(pos: number) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    return this._vector[pos];\n  }\n  eraseElementByPos(pos: number) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    this._vector.splice(pos, 1);\n    this._length -= 1;\n    return this._length;\n  }\n  eraseElementByValue(value: T) {\n    let index = 0;\n    for (let i = 0; i < this._length; ++i) {\n      if (this._vector[i] !== value) {\n        this._vector[index++] = this._vector[i];\n      }\n    }\n    this._length = this._vector.length = index;\n    return this._length;\n  }\n  eraseElementByIterator(iter: VectorIterator<T>) {\n    const _node = iter._node;\n    iter = iter.next();\n    this.eraseElementByPos(_node);\n    return iter;\n  }\n  pushBack(element: T) {\n    this._vector.push(element);\n    this._length += 1;\n    return this._length;\n  }\n  popBack() {\n    if (this._length === 0) return;\n    this._length -= 1;\n    return this._vector.pop();\n  }\n  setElementByPos(pos: number, element: T) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    this._vector[pos] = element;\n  }\n  insert(pos: number, element: T, num = 1) {\n    $checkWithinAccessParams!(pos, 0, this._length);\n    this._vector.splice(pos, 0, ...new Array<T>(num).fill(element));\n    this._length += num;\n    return this._length;\n  }\n  find(element: T) {\n    for (let i = 0; i < this._length; ++i) {\n      if (this._vector[i] === element) {\n        return new VectorIterator<T>(i, this);\n      }\n    }\n    return this.end();\n  }\n  reverse() {\n    this._vector.reverse();\n  }\n  unique() {\n    let index = 1;\n    for (let i = 1; i < this._length; ++i) {\n      if (this._vector[i] !== this._vector[i - 1]) {\n        this._vector[index++] = this._vector[i];\n      }\n    }\n    this._length = this._vector.length = index;\n    return this._length;\n  }\n  sort(cmp?: (x: T, y: T) => number) {\n    this._vector.sort(cmp);\n  }\n  forEach(callback: (element: T, index: number, vector: Vector<T>) => void) {\n    for (let i = 0; i < this._length; ++i) {\n      callback(this._vector[i], i, this);\n    }\n  }\n  [Symbol.iterator]() {\n    return function * (this: Vector<T>) {\n      yield * this._vector;\n    }.bind(this)();\n  }\n}\n\nexport default Vector;\n", "var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport SequentialContainer from './Base';\nimport { ContainerIterator } from \"../ContainerBase\";\nimport $checkWithinAccessParams from \"../../utils/checkParams.macro\";\nimport { throwIteratorAccessError } from \"../../utils/throwError\";\nvar LinkListIterator = /** @class */ (function (_super) {\n    __extends(LinkListIterator, _super);\n    /**\n     * @internal\n     */\n    function LinkListIterator(_node, _header, container, iteratorType) {\n        var _this = _super.call(this, iteratorType) || this;\n        _this._node = _node;\n        _this._header = _header;\n        _this.container = container;\n        if (_this.iteratorType === 0 /* IteratorType.NORMAL */) {\n            _this.pre = function () {\n                if (this._node._pre === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._pre;\n                return this;\n            };\n            _this.next = function () {\n                if (this._node === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._next;\n                return this;\n            };\n        }\n        else {\n            _this.pre = function () {\n                if (this._node._next === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._next;\n                return this;\n            };\n            _this.next = function () {\n                if (this._node === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._pre;\n                return this;\n            };\n        }\n        return _this;\n    }\n    Object.defineProperty(LinkListIterator.prototype, \"pointer\", {\n        get: function () {\n            if (this._node === this._header) {\n                throwIteratorAccessError();\n            }\n            return this._node._value;\n        },\n        set: function (newValue) {\n            if (this._node === this._header) {\n                throwIteratorAccessError();\n            }\n            this._node._value = newValue;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    LinkListIterator.prototype.copy = function () {\n        return new LinkListIterator(this._node, this._header, this.container, this.iteratorType);\n    };\n    return LinkListIterator;\n}(ContainerIterator));\nvar LinkList = /** @class */ (function (_super) {\n    __extends(LinkList, _super);\n    function LinkList(container) {\n        if (container === void 0) { container = []; }\n        var _this = _super.call(this) || this;\n        _this._header = {};\n        _this._head = _this._tail = _this._header._pre = _this._header._next = _this._header;\n        var self = _this;\n        container.forEach(function (el) {\n            self.pushBack(el);\n        });\n        return _this;\n    }\n    /**\n     * @internal\n     */\n    LinkList.prototype._eraseNode = function (node) {\n        var _pre = node._pre, _next = node._next;\n        _pre._next = _next;\n        _next._pre = _pre;\n        if (node === this._head) {\n            this._head = _next;\n        }\n        if (node === this._tail) {\n            this._tail = _pre;\n        }\n        this._length -= 1;\n    };\n    /**\n     * @internal\n     */\n    LinkList.prototype._insertNode = function (value, pre) {\n        var next = pre._next;\n        var node = {\n            _value: value,\n            _pre: pre,\n            _next: next\n        };\n        pre._next = node;\n        next._pre = node;\n        if (pre === this._header) {\n            this._head = node;\n        }\n        if (next === this._header) {\n            this._tail = node;\n        }\n        this._length += 1;\n    };\n    LinkList.prototype.clear = function () {\n        this._length = 0;\n        this._head = this._tail = this._header._pre = this._header._next = this._header;\n    };\n    LinkList.prototype.begin = function () {\n        return new LinkListIterator(this._head, this._header, this);\n    };\n    LinkList.prototype.end = function () {\n        return new LinkListIterator(this._header, this._header, this);\n    };\n    LinkList.prototype.rBegin = function () {\n        return new LinkListIterator(this._tail, this._header, this, 1 /* IteratorType.REVERSE */);\n    };\n    LinkList.prototype.rEnd = function () {\n        return new LinkListIterator(this._header, this._header, this, 1 /* IteratorType.REVERSE */);\n    };\n    LinkList.prototype.front = function () {\n        return this._head._value;\n    };\n    LinkList.prototype.back = function () {\n        return this._tail._value;\n    };\n    LinkList.prototype.getElementByPos = function (pos) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        var curNode = this._head;\n        while (pos--) {\n            curNode = curNode._next;\n        }\n        return curNode._value;\n    };\n    LinkList.prototype.eraseElementByPos = function (pos) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        var curNode = this._head;\n        while (pos--) {\n            curNode = curNode._next;\n        }\n        this._eraseNode(curNode);\n        return this._length;\n    };\n    LinkList.prototype.eraseElementByValue = function (_value) {\n        var curNode = this._head;\n        while (curNode !== this._header) {\n            if (curNode._value === _value) {\n                this._eraseNode(curNode);\n            }\n            curNode = curNode._next;\n        }\n        return this._length;\n    };\n    LinkList.prototype.eraseElementByIterator = function (iter) {\n        var node = iter._node;\n        if (node === this._header) {\n            throwIteratorAccessError();\n        }\n        iter = iter.next();\n        this._eraseNode(node);\n        return iter;\n    };\n    LinkList.prototype.pushBack = function (element) {\n        this._insertNode(element, this._tail);\n        return this._length;\n    };\n    LinkList.prototype.popBack = function () {\n        if (this._length === 0)\n            return;\n        var value = this._tail._value;\n        this._eraseNode(this._tail);\n        return value;\n    };\n    /**\n     * @description Push an element to the front.\n     * @param element - The element you want to push.\n     * @returns The size of queue after pushing.\n     */\n    LinkList.prototype.pushFront = function (element) {\n        this._insertNode(element, this._header);\n        return this._length;\n    };\n    /**\n     * @description Removes the first element.\n     * @returns The element you popped.\n     */\n    LinkList.prototype.popFront = function () {\n        if (this._length === 0)\n            return;\n        var value = this._head._value;\n        this._eraseNode(this._head);\n        return value;\n    };\n    LinkList.prototype.setElementByPos = function (pos, element) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        var curNode = this._head;\n        while (pos--) {\n            curNode = curNode._next;\n        }\n        curNode._value = element;\n    };\n    LinkList.prototype.insert = function (pos, element, num) {\n        if (num === void 0) { num = 1; }\n        if (pos < 0 || pos > this._length) {\n            throw new RangeError();\n        }\n        if (num <= 0)\n            return this._length;\n        if (pos === 0) {\n            while (num--)\n                this.pushFront(element);\n        }\n        else if (pos === this._length) {\n            while (num--)\n                this.pushBack(element);\n        }\n        else {\n            var curNode = this._head;\n            for (var i = 1; i < pos; ++i) {\n                curNode = curNode._next;\n            }\n            var next = curNode._next;\n            this._length += num;\n            while (num--) {\n                curNode._next = {\n                    _value: element,\n                    _pre: curNode\n                };\n                curNode._next._pre = curNode;\n                curNode = curNode._next;\n            }\n            curNode._next = next;\n            next._pre = curNode;\n        }\n        return this._length;\n    };\n    LinkList.prototype.find = function (element) {\n        var curNode = this._head;\n        while (curNode !== this._header) {\n            if (curNode._value === element) {\n                return new LinkListIterator(curNode, this._header, this);\n            }\n            curNode = curNode._next;\n        }\n        return this.end();\n    };\n    LinkList.prototype.reverse = function () {\n        if (this._length <= 1)\n            return;\n        var pHead = this._head;\n        var pTail = this._tail;\n        var cnt = 0;\n        while ((cnt << 1) < this._length) {\n            var tmp = pHead._value;\n            pHead._value = pTail._value;\n            pTail._value = tmp;\n            pHead = pHead._next;\n            pTail = pTail._pre;\n            cnt += 1;\n        }\n    };\n    LinkList.prototype.unique = function () {\n        if (this._length <= 1) {\n            return this._length;\n        }\n        var curNode = this._head;\n        while (curNode !== this._header) {\n            var tmpNode = curNode;\n            while (tmpNode._next !== this._header &&\n                tmpNode._value === tmpNode._next._value) {\n                tmpNode = tmpNode._next;\n                this._length -= 1;\n            }\n            curNode._next = tmpNode._next;\n            curNode._next._pre = curNode;\n            curNode = curNode._next;\n        }\n        return this._length;\n    };\n    LinkList.prototype.sort = function (cmp) {\n        if (this._length <= 1)\n            return;\n        var arr = [];\n        this.forEach(function (el) {\n            arr.push(el);\n        });\n        arr.sort(cmp);\n        var curNode = this._head;\n        arr.forEach(function (element) {\n            curNode._value = element;\n            curNode = curNode._next;\n        });\n    };\n    /**\n     * @description Merges two sorted lists.\n     * @param list - The other list you want to merge (must be sorted).\n     * @returns The size of list after merging.\n     * @example\n     * const linkA = new LinkList([1, 3, 5]);\n     * const linkB = new LinkList([2, 4, 6]);\n     * linkA.merge(linkB);  // [1, 2, 3, 4, 5];\n     */\n    LinkList.prototype.merge = function (list) {\n        var self = this;\n        if (this._length === 0) {\n            list.forEach(function (el) {\n                self.pushBack(el);\n            });\n        }\n        else {\n            var curNode_1 = this._head;\n            list.forEach(function (el) {\n                while (curNode_1 !== self._header &&\n                    curNode_1._value <= el) {\n                    curNode_1 = curNode_1._next;\n                }\n                self._insertNode(el, curNode_1._pre);\n            });\n        }\n        return this._length;\n    };\n    LinkList.prototype.forEach = function (callback) {\n        var curNode = this._head;\n        var index = 0;\n        while (curNode !== this._header) {\n            callback(curNode._value, index++, this);\n            curNode = curNode._next;\n        }\n    };\n    LinkList.prototype[Symbol.iterator] = function () {\n        return function () {\n            var curNode;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this._length === 0)\n                            return [2 /*return*/];\n                        curNode = this._head;\n                        _a.label = 1;\n                    case 1:\n                        if (!(curNode !== this._header)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, curNode._value];\n                    case 2:\n                        _a.sent();\n                        curNode = curNode._next;\n                        return [3 /*break*/, 1];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        }.bind(this)();\n    };\n    return LinkList;\n}(SequentialContainer));\nexport default LinkList;\n", "import SequentialContainer from './Base';\nimport { ContainerIterator, initContainer, IteratorType } from '@/container/ContainerBase';\nimport $checkWithinAccessParams from '@/utils/checkParams.macro';\nimport { throwIteratorAccessError } from '@/utils/throwError';\n\ntype LinkNode<T> = {\n  _value: T;\n  _pre: LinkNode<T>;\n  _next: LinkNode<T>;\n}\n\nclass LinkListIterator<T> extends ContainerIterator<T> {\n  readonly container: LinkList<T>;\n  /**\n   * @internal\n   */\n  _node: LinkNode<T>;\n  /**\n   * @internal\n   */\n  private readonly _header: LinkNode<T>;\n  /**\n   * @internal\n   */\n  constructor(\n    _node: LinkNode<T>,\n    _header: LinkNode<T>,\n    container: LinkList<T>,\n    iteratorType?: IteratorType\n  ) {\n    super(iteratorType);\n    this._node = _node;\n    this._header = _header;\n    this.container = container;\n    if (this.iteratorType === IteratorType.NORMAL) {\n      this.pre = function () {\n        if (this._node._pre === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._pre;\n        return this;\n      };\n      this.next = function () {\n        if (this._node === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._next;\n        return this;\n      };\n    } else {\n      this.pre = function () {\n        if (this._node._next === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._next;\n        return this;\n      };\n      this.next = function () {\n        if (this._node === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._pre;\n        return this;\n      };\n    }\n  }\n  get pointer() {\n    if (this._node === this._header) {\n      throwIteratorAccessError();\n    }\n    return this._node._value;\n  }\n  set pointer(newValue: T) {\n    if (this._node === this._header) {\n      throwIteratorAccessError();\n    }\n    this._node._value = newValue;\n  }\n  copy() {\n    return new LinkListIterator<T>(this._node, this._header, this.container, this.iteratorType);\n  }\n  // @ts-ignore\n  equals(iter: LinkListIterator<T>): boolean;\n  // @ts-ignore\n  pre(): this;\n  // @ts-ignore\n  next(): this;\n}\n\nexport type { LinkListIterator };\n\nclass LinkList<T> extends SequentialContainer<T> {\n  /**\n   * @internal\n   */\n  private _head: LinkNode<T>;\n  /**\n   * @internal\n   */\n  private _tail: LinkNode<T>;\n  /**\n   * @internal\n   */\n  private readonly _header: LinkNode<T>;\n  constructor(container: initContainer<T> = []) {\n    super();\n    this._header = <LinkNode<T>>{};\n    this._head = this._tail = this._header._pre = this._header._next = this._header;\n    const self = this;\n    container.forEach(function (el) {\n      self.pushBack(el);\n    });\n  }\n  /**\n   * @internal\n   */\n  private _eraseNode(node: LinkNode<T>) {\n    const { _pre, _next } = node;\n    _pre._next = _next;\n    _next._pre = _pre;\n    if (node === this._head) {\n      this._head = _next;\n    }\n    if (node === this._tail) {\n      this._tail = _pre;\n    }\n    this._length -= 1;\n  }\n  /**\n   * @internal\n   */\n  private _insertNode(value: T, pre: LinkNode<T>) {\n    const next = pre._next;\n    const node = {\n      _value: value,\n      _pre: pre,\n      _next: next\n    };\n    pre._next = node;\n    next._pre = node;\n    if (pre === this._header) {\n      this._head = node;\n    }\n    if (next === this._header) {\n      this._tail = node;\n    }\n    this._length += 1;\n  }\n  clear() {\n    this._length = 0;\n    this._head = this._tail = this._header._pre = this._header._next = this._header;\n  }\n  begin() {\n    return new LinkListIterator<T>(this._head, this._header, this);\n  }\n  end() {\n    return new LinkListIterator<T>(this._header, this._header, this);\n  }\n  rBegin() {\n    return new LinkListIterator<T>(this._tail, this._header, this, IteratorType.REVERSE);\n  }\n  rEnd() {\n    return new LinkListIterator<T>(this._header, this._header, this, IteratorType.REVERSE);\n  }\n  front(): T | undefined {\n    return this._head._value;\n  }\n  back(): T | undefined {\n    return this._tail._value;\n  }\n  getElementByPos(pos: number) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    let curNode = this._head;\n    while (pos--) {\n      curNode = curNode._next;\n    }\n    return curNode._value;\n  }\n  eraseElementByPos(pos: number) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    let curNode = this._head;\n    while (pos--) {\n      curNode = curNode._next;\n    }\n    this._eraseNode(curNode);\n    return this._length;\n  }\n  eraseElementByValue(_value: T) {\n    let curNode = this._head;\n    while (curNode !== this._header) {\n      if (curNode._value === _value) {\n        this._eraseNode(curNode);\n      }\n      curNode = curNode._next;\n    }\n    return this._length;\n  }\n  eraseElementByIterator(iter: LinkListIterator<T>) {\n    const node = iter._node;\n    if (node === this._header) {\n      throwIteratorAccessError();\n    }\n    iter = iter.next();\n    this._eraseNode(node);\n    return iter;\n  }\n  pushBack(element: T) {\n    this._insertNode(element, this._tail);\n    return this._length;\n  }\n  popBack() {\n    if (this._length === 0) return;\n    const value = this._tail._value;\n    this._eraseNode(this._tail);\n    return value;\n  }\n  /**\n   * @description Push an element to the front.\n   * @param element - The element you want to push.\n   * @returns The size of queue after pushing.\n   */\n  pushFront(element: T) {\n    this._insertNode(element, this._header);\n    return this._length;\n  }\n  /**\n   * @description Removes the first element.\n   * @returns The element you popped.\n   */\n  popFront() {\n    if (this._length === 0) return;\n    const value = this._head._value;\n    this._eraseNode(this._head);\n    return value;\n  }\n  setElementByPos(pos: number, element: T) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    let curNode = this._head;\n    while (pos--) {\n      curNode = curNode._next;\n    }\n    curNode._value = element;\n  }\n  insert(pos: number, element: T, num = 1) {\n    $checkWithinAccessParams!(pos, 0, this._length);\n    if (num <= 0) return this._length;\n    if (pos === 0) {\n      while (num--) this.pushFront(element);\n    } else if (pos === this._length) {\n      while (num--) this.pushBack(element);\n    } else {\n      let curNode = this._head;\n      for (let i = 1; i < pos; ++i) {\n        curNode = curNode._next;\n      }\n      const next = curNode._next;\n      this._length += num;\n      while (num--) {\n        curNode._next = <LinkNode<T>>{\n          _value: element,\n          _pre: curNode\n        };\n        curNode._next._pre = curNode;\n        curNode = curNode._next;\n      }\n      curNode._next = next;\n      next._pre = curNode;\n    }\n    return this._length;\n  }\n  find(element: T) {\n    let curNode = this._head;\n    while (curNode !== this._header) {\n      if (curNode._value === element) {\n        return new LinkListIterator<T>(curNode, this._header, this);\n      }\n      curNode = curNode._next;\n    }\n    return this.end();\n  }\n  reverse() {\n    if (this._length <= 1) return;\n    let pHead = this._head;\n    let pTail = this._tail;\n    let cnt = 0;\n    while ((cnt << 1) < this._length) {\n      const tmp = pHead._value;\n      pHead._value = pTail._value;\n      pTail._value = tmp;\n      pHead = pHead._next;\n      pTail = pTail._pre;\n      cnt += 1;\n    }\n  }\n  unique() {\n    if (this._length <= 1) {\n      return this._length;\n    }\n    let curNode = this._head;\n    while (curNode !== this._header) {\n      let tmpNode = curNode;\n      while (\n        tmpNode._next !== this._header &&\n        tmpNode._value === tmpNode._next._value\n      ) {\n        tmpNode = tmpNode._next;\n        this._length -= 1;\n      }\n      curNode._next = tmpNode._next;\n      curNode._next._pre = curNode;\n      curNode = curNode._next;\n    }\n    return this._length;\n  }\n  sort(cmp?: (x: T, y: T) => number) {\n    if (this._length <= 1) return;\n    const arr: T[] = [];\n    this.forEach(function (el) {\n      arr.push(el);\n    });\n    arr.sort(cmp);\n    let curNode: LinkNode<T> = this._head;\n    arr.forEach(function (element) {\n      curNode._value = element;\n      curNode = curNode._next;\n    });\n  }\n  /**\n   * @description Merges two sorted lists.\n   * @param list - The other list you want to merge (must be sorted).\n   * @returns The size of list after merging.\n   * @example\n   * const linkA = new LinkList([1, 3, 5]);\n   * const linkB = new LinkList([2, 4, 6]);\n   * linkA.merge(linkB);  // [1, 2, 3, 4, 5];\n   */\n  merge(list: LinkList<T>) {\n    const self = this;\n    if (this._length === 0) {\n      list.forEach(function (el) {\n        self.pushBack(el);\n      });\n    } else {\n      let curNode = this._head;\n      list.forEach(function (el) {\n        while (\n          curNode !== self._header &&\n          curNode._value <= el\n        ) {\n          curNode = curNode._next;\n        }\n        self._insertNode(el, curNode._pre);\n      });\n    }\n    return this._length;\n  }\n  forEach(callback: (element: T, index: number, list: LinkList<T>) => void) {\n    let curNode = this._head;\n    let index = 0;\n    while (curNode !== this._header) {\n      callback(curNode._value, index++, this);\n      curNode = curNode._next;\n    }\n  }\n  [Symbol.iterator]() {\n    return function * (this: LinkList<T>) {\n      if (this._length === 0) return;\n      let curNode = this._head;\n      while (curNode !== this._header) {\n        yield curNode._value;\n        curNode = curNode._next;\n      }\n    }.bind(this)();\n  }\n}\n\nexport default LinkList;\n", "var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport SequentialContainer from './Base';\nimport { RandomIterator } from \"./Base/RandomIterator\";\nimport $checkWithinAccessParams from \"../../utils/checkParams.macro\";\nimport $getContainerSize from \"../../utils/getContainerSize.macro\";\nvar DequeIterator = /** @class */ (function (_super) {\n    __extends(DequeIterator, _super);\n    function DequeIterator(node, container, iteratorType) {\n        var _this = _super.call(this, node, iteratorType) || this;\n        _this.container = container;\n        return _this;\n    }\n    DequeIterator.prototype.copy = function () {\n        return new DequeIterator(this._node, this.container, this.iteratorType);\n    };\n    return DequeIterator;\n}(RandomIterator));\nvar Deque = /** @class */ (function (_super) {\n    __extends(Deque, _super);\n    function Deque(container, _bucketSize) {\n        if (container === void 0) { container = []; }\n        if (_bucketSize === void 0) { _bucketSize = (1 << 12); }\n        var _this = _super.call(this) || this;\n        /**\n         * @internal\n         */\n        _this._first = 0;\n        /**\n         * @internal\n         */\n        _this._curFirst = 0;\n        /**\n         * @internal\n         */\n        _this._last = 0;\n        /**\n         * @internal\n         */\n        _this._curLast = 0;\n        /**\n         * @internal\n         */\n        _this._bucketNum = 0;\n        /**\n         * @internal\n         */\n        _this._map = [];\n        var _length = (function () {\n            if (typeof container.length === \"number\")\n                return container.length;\n            if (typeof container.size === \"number\")\n                return container.size;\n            if (typeof container.size === \"function\")\n                return container.size();\n            throw new TypeError(\"Cannot get the length or size of the container\");\n        })();\n        _this._bucketSize = _bucketSize;\n        _this._bucketNum = Math.max(Math.ceil(_length / _this._bucketSize), 1);\n        for (var i = 0; i < _this._bucketNum; ++i) {\n            _this._map.push(new Array(_this._bucketSize));\n        }\n        var needBucketNum = Math.ceil(_length / _this._bucketSize);\n        _this._first = _this._last = (_this._bucketNum >> 1) - (needBucketNum >> 1);\n        _this._curFirst = _this._curLast = (_this._bucketSize - _length % _this._bucketSize) >> 1;\n        var self = _this;\n        container.forEach(function (element) {\n            self.pushBack(element);\n        });\n        return _this;\n    }\n    /**\n     * @description Growth the Deque.\n     * @internal\n     */\n    Deque.prototype._reAllocate = function () {\n        var newMap = [];\n        var addBucketNum = Math.max(this._bucketNum >> 1, 1);\n        for (var i = 0; i < addBucketNum; ++i) {\n            newMap[i] = new Array(this._bucketSize);\n        }\n        for (var i = this._first; i < this._bucketNum; ++i) {\n            newMap[newMap.length] = this._map[i];\n        }\n        for (var i = 0; i < this._last; ++i) {\n            newMap[newMap.length] = this._map[i];\n        }\n        newMap[newMap.length] = __spreadArray([], __read(this._map[this._last]), false);\n        this._first = addBucketNum;\n        this._last = newMap.length - 1;\n        for (var i = 0; i < addBucketNum; ++i) {\n            newMap[newMap.length] = new Array(this._bucketSize);\n        }\n        this._map = newMap;\n        this._bucketNum = newMap.length;\n    };\n    /**\n     * @description Get the bucket position of the element and the pointer position by index.\n     * @param pos - The element's index.\n     * @internal\n     */\n    Deque.prototype._getElementIndex = function (pos) {\n        var offset = this._curFirst + pos + 1;\n        var offsetRemainder = offset % this._bucketSize;\n        var curNodePointerIndex = offsetRemainder - 1;\n        var curNodeBucketIndex = this._first + (offset - offsetRemainder) / this._bucketSize;\n        if (offsetRemainder === 0)\n            curNodeBucketIndex -= 1;\n        curNodeBucketIndex %= this._bucketNum;\n        if (curNodePointerIndex < 0)\n            curNodePointerIndex += this._bucketSize;\n        return { curNodeBucketIndex: curNodeBucketIndex, curNodePointerIndex: curNodePointerIndex };\n    };\n    Deque.prototype.clear = function () {\n        this._map = [new Array(this._bucketSize)];\n        this._bucketNum = 1;\n        this._first = this._last = this._length = 0;\n        this._curFirst = this._curLast = this._bucketSize >> 1;\n    };\n    Deque.prototype.begin = function () {\n        return new DequeIterator(0, this);\n    };\n    Deque.prototype.end = function () {\n        return new DequeIterator(this._length, this);\n    };\n    Deque.prototype.rBegin = function () {\n        return new DequeIterator(this._length - 1, this, 1 /* IteratorType.REVERSE */);\n    };\n    Deque.prototype.rEnd = function () {\n        return new DequeIterator(-1, this, 1 /* IteratorType.REVERSE */);\n    };\n    Deque.prototype.front = function () {\n        if (this._length === 0)\n            return;\n        return this._map[this._first][this._curFirst];\n    };\n    Deque.prototype.back = function () {\n        if (this._length === 0)\n            return;\n        return this._map[this._last][this._curLast];\n    };\n    Deque.prototype.pushBack = function (element) {\n        if (this._length) {\n            if (this._curLast < this._bucketSize - 1) {\n                this._curLast += 1;\n            }\n            else if (this._last < this._bucketNum - 1) {\n                this._last += 1;\n                this._curLast = 0;\n            }\n            else {\n                this._last = 0;\n                this._curLast = 0;\n            }\n            if (this._last === this._first &&\n                this._curLast === this._curFirst)\n                this._reAllocate();\n        }\n        this._length += 1;\n        this._map[this._last][this._curLast] = element;\n        return this._length;\n    };\n    Deque.prototype.popBack = function () {\n        if (this._length === 0)\n            return;\n        var value = this._map[this._last][this._curLast];\n        if (this._length !== 1) {\n            if (this._curLast > 0) {\n                this._curLast -= 1;\n            }\n            else if (this._last > 0) {\n                this._last -= 1;\n                this._curLast = this._bucketSize - 1;\n            }\n            else {\n                this._last = this._bucketNum - 1;\n                this._curLast = this._bucketSize - 1;\n            }\n        }\n        this._length -= 1;\n        return value;\n    };\n    /**\n     * @description Push the element to the front.\n     * @param element - The element you want to push.\n     * @returns The size of queue after pushing.\n     */\n    Deque.prototype.pushFront = function (element) {\n        if (this._length) {\n            if (this._curFirst > 0) {\n                this._curFirst -= 1;\n            }\n            else if (this._first > 0) {\n                this._first -= 1;\n                this._curFirst = this._bucketSize - 1;\n            }\n            else {\n                this._first = this._bucketNum - 1;\n                this._curFirst = this._bucketSize - 1;\n            }\n            if (this._first === this._last &&\n                this._curFirst === this._curLast)\n                this._reAllocate();\n        }\n        this._length += 1;\n        this._map[this._first][this._curFirst] = element;\n        return this._length;\n    };\n    /**\n     * @description Remove the _first element.\n     * @returns The element you popped.\n     */\n    Deque.prototype.popFront = function () {\n        if (this._length === 0)\n            return;\n        var value = this._map[this._first][this._curFirst];\n        if (this._length !== 1) {\n            if (this._curFirst < this._bucketSize - 1) {\n                this._curFirst += 1;\n            }\n            else if (this._first < this._bucketNum - 1) {\n                this._first += 1;\n                this._curFirst = 0;\n            }\n            else {\n                this._first = 0;\n                this._curFirst = 0;\n            }\n        }\n        this._length -= 1;\n        return value;\n    };\n    Deque.prototype.getElementByPos = function (pos) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        var _a = this._getElementIndex(pos), curNodeBucketIndex = _a.curNodeBucketIndex, curNodePointerIndex = _a.curNodePointerIndex;\n        return this._map[curNodeBucketIndex][curNodePointerIndex];\n    };\n    Deque.prototype.setElementByPos = function (pos, element) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        var _a = this._getElementIndex(pos), curNodeBucketIndex = _a.curNodeBucketIndex, curNodePointerIndex = _a.curNodePointerIndex;\n        this._map[curNodeBucketIndex][curNodePointerIndex] = element;\n    };\n    Deque.prototype.insert = function (pos, element, num) {\n        if (num === void 0) { num = 1; }\n        if (pos < 0 || pos > this._length) {\n            throw new RangeError();\n        }\n        if (pos === 0) {\n            while (num--)\n                this.pushFront(element);\n        }\n        else if (pos === this._length) {\n            while (num--)\n                this.pushBack(element);\n        }\n        else {\n            var arr = [];\n            for (var i = pos; i < this._length; ++i) {\n                arr.push(this.getElementByPos(i));\n            }\n            this.cut(pos - 1);\n            for (var i = 0; i < num; ++i)\n                this.pushBack(element);\n            for (var i = 0; i < arr.length; ++i)\n                this.pushBack(arr[i]);\n        }\n        return this._length;\n    };\n    /**\n     * @description Remove all elements after the specified position (excluding the specified position).\n     * @param pos - The previous position of the first removed element.\n     * @returns The size of the container after cutting.\n     * @example\n     * deque.cut(1); // Then deque's size will be 2. deque -> [0, 1]\n     */\n    Deque.prototype.cut = function (pos) {\n        if (pos < 0) {\n            this.clear();\n            return 0;\n        }\n        var _a = this._getElementIndex(pos), curNodeBucketIndex = _a.curNodeBucketIndex, curNodePointerIndex = _a.curNodePointerIndex;\n        this._last = curNodeBucketIndex;\n        this._curLast = curNodePointerIndex;\n        this._length = pos + 1;\n        return this._length;\n    };\n    Deque.prototype.eraseElementByPos = function (pos) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        if (pos === 0)\n            this.popFront();\n        else if (pos === this._length - 1)\n            this.popBack();\n        else {\n            var arr = [];\n            for (var i = pos + 1; i < this._length; ++i) {\n                arr.push(this.getElementByPos(i));\n            }\n            this.cut(pos);\n            this.popBack();\n            var self_1 = this;\n            arr.forEach(function (el) {\n                self_1.pushBack(el);\n            });\n        }\n        return this._length;\n    };\n    Deque.prototype.eraseElementByValue = function (value) {\n        if (this._length === 0)\n            return 0;\n        var arr = [];\n        for (var i = 0; i < this._length; ++i) {\n            var element = this.getElementByPos(i);\n            if (element !== value)\n                arr.push(element);\n        }\n        var _length = arr.length;\n        for (var i = 0; i < _length; ++i)\n            this.setElementByPos(i, arr[i]);\n        return this.cut(_length - 1);\n    };\n    Deque.prototype.eraseElementByIterator = function (iter) {\n        var _node = iter._node;\n        this.eraseElementByPos(_node);\n        iter = iter.next();\n        return iter;\n    };\n    Deque.prototype.find = function (element) {\n        for (var i = 0; i < this._length; ++i) {\n            if (this.getElementByPos(i) === element) {\n                return new DequeIterator(i, this);\n            }\n        }\n        return this.end();\n    };\n    Deque.prototype.reverse = function () {\n        var l = 0;\n        var r = this._length - 1;\n        while (l < r) {\n            var tmp = this.getElementByPos(l);\n            this.setElementByPos(l, this.getElementByPos(r));\n            this.setElementByPos(r, tmp);\n            l += 1;\n            r -= 1;\n        }\n    };\n    Deque.prototype.unique = function () {\n        if (this._length <= 1) {\n            return this._length;\n        }\n        var index = 1;\n        var pre = this.getElementByPos(0);\n        for (var i = 1; i < this._length; ++i) {\n            var cur = this.getElementByPos(i);\n            if (cur !== pre) {\n                pre = cur;\n                this.setElementByPos(index++, cur);\n            }\n        }\n        while (this._length > index)\n            this.popBack();\n        return this._length;\n    };\n    Deque.prototype.sort = function (cmp) {\n        var arr = [];\n        for (var i = 0; i < this._length; ++i) {\n            arr.push(this.getElementByPos(i));\n        }\n        arr.sort(cmp);\n        for (var i = 0; i < this._length; ++i)\n            this.setElementByPos(i, arr[i]);\n    };\n    /**\n     * @description Remove as much useless space as possible.\n     */\n    Deque.prototype.shrinkToFit = function () {\n        if (this._length === 0)\n            return;\n        var arr = [];\n        this.forEach(function (el) {\n            arr.push(el);\n        });\n        this._bucketNum = Math.max(Math.ceil(this._length / this._bucketSize), 1);\n        this._length = this._first = this._last = this._curFirst = this._curLast = 0;\n        this._map = [];\n        for (var i = 0; i < this._bucketNum; ++i) {\n            this._map.push(new Array(this._bucketSize));\n        }\n        for (var i = 0; i < arr.length; ++i)\n            this.pushBack(arr[i]);\n    };\n    Deque.prototype.forEach = function (callback) {\n        for (var i = 0; i < this._length; ++i) {\n            callback(this.getElementByPos(i), i, this);\n        }\n    };\n    Deque.prototype[Symbol.iterator] = function () {\n        return function () {\n            var i;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        i = 0;\n                        _a.label = 1;\n                    case 1:\n                        if (!(i < this._length)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this.getElementByPos(i)];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        ++i;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        }.bind(this)();\n    };\n    return Deque;\n}(SequentialContainer));\nexport default Deque;\n", "import SequentialContainer from './Base';\nimport { IteratorType, initContainer } from '@/container/ContainerBase';\nimport { RandomIterator } from '@/container/SequentialContainer/Base/RandomIterator';\nimport $checkWithinAccessParams from '@/utils/checkParams.macro';\nimport $getContainerSize from '@/utils/getContainerSize.macro';\n\nclass DequeIterator<T> extends RandomIterator<T> {\n  readonly container: Deque<T>;\n  constructor(node: number, container: Deque<T>, iteratorType?: IteratorType) {\n    super(node, iteratorType);\n    this.container = container;\n  }\n  copy() {\n    return new DequeIterator<T>(this._node, this.container, this.iteratorType);\n  }\n  // @ts-ignore\n  equals(iter: DequeIterator<T>): boolean;\n}\n\nexport type { DequeIterator };\n\nclass Deque<T> extends SequentialContainer<T> {\n  /**\n   * @internal\n   */\n  private _first = 0;\n  /**\n   * @internal\n   */\n  private _curFirst = 0;\n  /**\n   * @internal\n   */\n  private _last = 0;\n  /**\n   * @internal\n   */\n  private _curLast = 0;\n  /**\n   * @internal\n   */\n  private _bucketNum = 0;\n  /**\n   * @internal\n   */\n  private readonly _bucketSize: number;\n  /**\n   * @internal\n   */\n  private _map: T[][] = [];\n  constructor(container: initContainer<T> = [], _bucketSize = (1 << 12)) {\n    super();\n    const _length = $getContainerSize!(container);\n    this._bucketSize = _bucketSize;\n    this._bucketNum = Math.max(Math.ceil(_length / this._bucketSize), 1);\n    for (let i = 0; i < this._bucketNum; ++i) {\n      this._map.push(new Array(this._bucketSize));\n    }\n    const needBucketNum = Math.ceil(_length / this._bucketSize);\n    this._first = this._last = (this._bucketNum >> 1) - (needBucketNum >> 1);\n    this._curFirst = this._curLast = (this._bucketSize - _length % this._bucketSize) >> 1;\n    const self = this;\n    container.forEach(function (element) {\n      self.pushBack(element);\n    });\n  }\n  /**\n   * @description Growth the Deque.\n   * @internal\n   */\n  private _reAllocate() {\n    const newMap = [];\n    const addBucketNum = Math.max(this._bucketNum >> 1, 1);\n    for (let i = 0; i < addBucketNum; ++i) {\n      newMap[i] = new Array(this._bucketSize);\n    }\n    for (let i = this._first; i < this._bucketNum; ++i) {\n      newMap[newMap.length] = this._map[i];\n    }\n    for (let i = 0; i < this._last; ++i) {\n      newMap[newMap.length] = this._map[i];\n    }\n    newMap[newMap.length] = [...this._map[this._last]];\n    this._first = addBucketNum;\n    this._last = newMap.length - 1;\n    for (let i = 0; i < addBucketNum; ++i) {\n      newMap[newMap.length] = new Array(this._bucketSize);\n    }\n    this._map = newMap;\n    this._bucketNum = newMap.length;\n  }\n  /**\n   * @description Get the bucket position of the element and the pointer position by index.\n   * @param pos - The element's index.\n   * @internal\n   */\n  private _getElementIndex(pos: number) {\n    const offset = this._curFirst + pos + 1;\n    const offsetRemainder = offset % this._bucketSize;\n    let curNodePointerIndex = offsetRemainder - 1;\n    let curNodeBucketIndex = this._first + (offset - offsetRemainder) / this._bucketSize;\n    if (offsetRemainder === 0) curNodeBucketIndex -= 1;\n    curNodeBucketIndex %= this._bucketNum;\n    if (curNodePointerIndex < 0) curNodePointerIndex += this._bucketSize;\n    return { curNodeBucketIndex, curNodePointerIndex };\n  }\n  clear() {\n    this._map = [new Array(this._bucketSize)];\n    this._bucketNum = 1;\n    this._first = this._last = this._length = 0;\n    this._curFirst = this._curLast = this._bucketSize >> 1;\n  }\n  begin() {\n    return new DequeIterator<T>(0, this);\n  }\n  end() {\n    return new DequeIterator<T>(this._length, this);\n  }\n  rBegin() {\n    return new DequeIterator<T>(this._length - 1, this, IteratorType.REVERSE);\n  }\n  rEnd() {\n    return new DequeIterator<T>(-1, this, IteratorType.REVERSE);\n  }\n  front(): T | undefined {\n    if (this._length === 0) return;\n    return this._map[this._first][this._curFirst];\n  }\n  back(): T | undefined {\n    if (this._length === 0) return;\n    return this._map[this._last][this._curLast];\n  }\n  pushBack(element: T) {\n    if (this._length) {\n      if (this._curLast < this._bucketSize - 1) {\n        this._curLast += 1;\n      } else if (this._last < this._bucketNum - 1) {\n        this._last += 1;\n        this._curLast = 0;\n      } else {\n        this._last = 0;\n        this._curLast = 0;\n      }\n      if (\n        this._last === this._first &&\n        this._curLast === this._curFirst\n      ) this._reAllocate();\n    }\n    this._length += 1;\n    this._map[this._last][this._curLast] = element;\n    return this._length;\n  }\n  popBack() {\n    if (this._length === 0) return;\n    const value = this._map[this._last][this._curLast];\n    if (this._length !== 1) {\n      if (this._curLast > 0) {\n        this._curLast -= 1;\n      } else if (this._last > 0) {\n        this._last -= 1;\n        this._curLast = this._bucketSize - 1;\n      } else {\n        this._last = this._bucketNum - 1;\n        this._curLast = this._bucketSize - 1;\n      }\n    }\n    this._length -= 1;\n    return value;\n  }\n  /**\n   * @description Push the element to the front.\n   * @param element - The element you want to push.\n   * @returns The size of queue after pushing.\n   */\n  pushFront(element: T) {\n    if (this._length) {\n      if (this._curFirst > 0) {\n        this._curFirst -= 1;\n      } else if (this._first > 0) {\n        this._first -= 1;\n        this._curFirst = this._bucketSize - 1;\n      } else {\n        this._first = this._bucketNum - 1;\n        this._curFirst = this._bucketSize - 1;\n      }\n      if (\n        this._first === this._last &&\n        this._curFirst === this._curLast\n      ) this._reAllocate();\n    }\n    this._length += 1;\n    this._map[this._first][this._curFirst] = element;\n    return this._length;\n  }\n  /**\n   * @description Remove the _first element.\n   * @returns The element you popped.\n   */\n  popFront() {\n    if (this._length === 0) return;\n    const value = this._map[this._first][this._curFirst];\n    if (this._length !== 1) {\n      if (this._curFirst < this._bucketSize - 1) {\n        this._curFirst += 1;\n      } else if (this._first < this._bucketNum - 1) {\n        this._first += 1;\n        this._curFirst = 0;\n      } else {\n        this._first = 0;\n        this._curFirst = 0;\n      }\n    }\n    this._length -= 1;\n    return value;\n  }\n  getElementByPos(pos: number): T {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    const {\n      curNodeBucketIndex,\n      curNodePointerIndex\n    } = this._getElementIndex(pos);\n    return this._map[curNodeBucketIndex][curNodePointerIndex]!;\n  }\n  setElementByPos(pos: number, element: T) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    const {\n      curNodeBucketIndex,\n      curNodePointerIndex\n    } = this._getElementIndex(pos);\n    this._map[curNodeBucketIndex][curNodePointerIndex] = element;\n  }\n  insert(pos: number, element: T, num = 1) {\n    $checkWithinAccessParams!(pos, 0, this._length);\n    if (pos === 0) {\n      while (num--) this.pushFront(element);\n    } else if (pos === this._length) {\n      while (num--) this.pushBack(element);\n    } else {\n      const arr: T[] = [];\n      for (let i = pos; i < this._length; ++i) {\n        arr.push(this.getElementByPos(i));\n      }\n      this.cut(pos - 1);\n      for (let i = 0; i < num; ++i) this.pushBack(element);\n      for (let i = 0; i < arr.length; ++i) this.pushBack(arr[i]);\n    }\n    return this._length;\n  }\n  /**\n   * @description Remove all elements after the specified position (excluding the specified position).\n   * @param pos - The previous position of the first removed element.\n   * @returns The size of the container after cutting.\n   * @example\n   * deque.cut(1); // Then deque's size will be 2. deque -> [0, 1]\n   */\n  cut(pos: number) {\n    if (pos < 0) {\n      this.clear();\n      return 0;\n    }\n    const {\n      curNodeBucketIndex,\n      curNodePointerIndex\n    } = this._getElementIndex(pos);\n    this._last = curNodeBucketIndex;\n    this._curLast = curNodePointerIndex;\n    this._length = pos + 1;\n    return this._length;\n  }\n  eraseElementByPos(pos: number) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    if (pos === 0) this.popFront();\n    else if (pos === this._length - 1) this.popBack();\n    else {\n      const arr = [];\n      for (let i = pos + 1; i < this._length; ++i) {\n        arr.push(this.getElementByPos(i));\n      }\n      this.cut(pos);\n      this.popBack();\n      const self = this;\n      arr.forEach(function (el) {\n        self.pushBack(el);\n      });\n    }\n    return this._length;\n  }\n  eraseElementByValue(value: T) {\n    if (this._length === 0) return 0;\n    const arr: T[] = [];\n    for (let i = 0; i < this._length; ++i) {\n      const element = this.getElementByPos(i);\n      if (element !== value) arr.push(element);\n    }\n    const _length = arr.length;\n    for (let i = 0; i < _length; ++i) this.setElementByPos(i, arr[i]);\n    return this.cut(_length - 1);\n  }\n  eraseElementByIterator(iter: DequeIterator<T>) {\n    const _node = iter._node;\n    this.eraseElementByPos(_node);\n    iter = iter.next();\n    return iter;\n  }\n  find(element: T) {\n    for (let i = 0; i < this._length; ++i) {\n      if (this.getElementByPos(i) === element) {\n        return new DequeIterator<T>(i, this);\n      }\n    }\n    return this.end();\n  }\n  reverse() {\n    let l = 0; let r = this._length - 1;\n    while (l < r) {\n      const tmp = this.getElementByPos(l);\n      this.setElementByPos(l, this.getElementByPos(r));\n      this.setElementByPos(r, tmp);\n      l += 1;\n      r -= 1;\n    }\n  }\n  unique() {\n    if (this._length <= 1) {\n      return this._length;\n    }\n    let index = 1;\n    let pre = this.getElementByPos(0);\n    for (let i = 1; i < this._length; ++i) {\n      const cur = this.getElementByPos(i);\n      if (cur !== pre) {\n        pre = cur;\n        this.setElementByPos(index++, cur);\n      }\n    }\n    while (this._length > index) this.popBack();\n    return this._length;\n  }\n  sort(cmp?: (x: T, y: T) => number) {\n    const arr: T[] = [];\n    for (let i = 0; i < this._length; ++i) {\n      arr.push(this.getElementByPos(i));\n    }\n    arr.sort(cmp);\n    for (let i = 0; i < this._length; ++i) this.setElementByPos(i, arr[i]);\n  }\n  /**\n   * @description Remove as much useless space as possible.\n   */\n  shrinkToFit() {\n    if (this._length === 0) return;\n    const arr: T[] = [];\n    this.forEach(function (el) {\n      arr.push(el);\n    });\n    this._bucketNum = Math.max(Math.ceil(this._length / this._bucketSize), 1);\n    this._length = this._first = this._last = this._curFirst = this._curLast = 0;\n    this._map = [];\n    for (let i = 0; i < this._bucketNum; ++i) {\n      this._map.push(new Array(this._bucketSize));\n    }\n    for (let i = 0; i < arr.length; ++i) this.pushBack(arr[i]);\n  }\n  forEach(callback: (element: T, index: number, deque: Deque<T>) => void) {\n    for (let i = 0; i < this._length; ++i) {\n      callback(this.getElementByPos(i), i, this);\n    }\n  }\n  [Symbol.iterator]() {\n    return function * (this: Deque<T>) {\n      for (let i = 0; i < this._length; ++i) {\n        yield this.getElementByPos(i);\n      }\n    }.bind(this)();\n  }\n}\n\nexport default Deque;\n", "var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar TreeNode = /** @class */ (function () {\n    function TreeNode(key, value) {\n        this._color = 1 /* TreeNodeColor.RED */;\n        this._key = undefined;\n        this._value = undefined;\n        this._left = undefined;\n        this._right = undefined;\n        this._parent = undefined;\n        this._key = key;\n        this._value = value;\n    }\n    /**\n     * @description Get the pre node.\n     * @returns TreeNode about the pre node.\n     */\n    TreeNode.prototype._pre = function () {\n        var preNode = this;\n        if (preNode._color === 1 /* TreeNodeColor.RED */ &&\n            preNode._parent._parent === preNode) {\n            preNode = preNode._right;\n        }\n        else if (preNode._left) {\n            preNode = preNode._left;\n            while (preNode._right) {\n                preNode = preNode._right;\n            }\n        }\n        else {\n            var pre = preNode._parent;\n            while (pre._left === preNode) {\n                preNode = pre;\n                pre = preNode._parent;\n            }\n            preNode = pre;\n        }\n        return preNode;\n    };\n    /**\n     * @description Get the next node.\n     * @returns TreeNode about the next node.\n     */\n    TreeNode.prototype._next = function () {\n        var nextNode = this;\n        if (nextNode._right) {\n            nextNode = nextNode._right;\n            while (nextNode._left) {\n                nextNode = nextNode._left;\n            }\n            return nextNode;\n        }\n        else {\n            var pre = nextNode._parent;\n            while (pre._right === nextNode) {\n                nextNode = pre;\n                pre = nextNode._parent;\n            }\n            if (nextNode._right !== pre) {\n                return pre;\n            }\n            else\n                return nextNode;\n        }\n    };\n    /**\n     * @description Rotate left.\n     * @returns TreeNode about moved to original position after rotation.\n     */\n    TreeNode.prototype._rotateLeft = function () {\n        var PP = this._parent;\n        var V = this._right;\n        var R = V._left;\n        if (PP._parent === this)\n            PP._parent = V;\n        else if (PP._left === this)\n            PP._left = V;\n        else\n            PP._right = V;\n        V._parent = PP;\n        V._left = this;\n        this._parent = V;\n        this._right = R;\n        if (R)\n            R._parent = this;\n        return V;\n    };\n    /**\n     * @description Rotate right.\n     * @returns TreeNode about moved to original position after rotation.\n     */\n    TreeNode.prototype._rotateRight = function () {\n        var PP = this._parent;\n        var F = this._left;\n        var K = F._right;\n        if (PP._parent === this)\n            PP._parent = F;\n        else if (PP._left === this)\n            PP._left = F;\n        else\n            PP._right = F;\n        F._parent = PP;\n        F._right = this;\n        this._parent = F;\n        this._left = K;\n        if (K)\n            K._parent = this;\n        return F;\n    };\n    return TreeNode;\n}());\nexport { TreeNode };\nvar TreeNodeEnableIndex = /** @class */ (function (_super) {\n    __extends(TreeNodeEnableIndex, _super);\n    function TreeNodeEnableIndex() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._subTreeSize = 1;\n        return _this;\n    }\n    /**\n     * @description Rotate left and do recount.\n     * @returns TreeNode about moved to original position after rotation.\n     */\n    TreeNodeEnableIndex.prototype._rotateLeft = function () {\n        var parent = _super.prototype._rotateLeft.call(this);\n        this._recount();\n        parent._recount();\n        return parent;\n    };\n    /**\n     * @description Rotate right and do recount.\n     * @returns TreeNode about moved to original position after rotation.\n     */\n    TreeNodeEnableIndex.prototype._rotateRight = function () {\n        var parent = _super.prototype._rotateRight.call(this);\n        this._recount();\n        parent._recount();\n        return parent;\n    };\n    TreeNodeEnableIndex.prototype._recount = function () {\n        this._subTreeSize = 1;\n        if (this._left) {\n            this._subTreeSize += this._left._subTreeSize;\n        }\n        if (this._right) {\n            this._subTreeSize += this._right._subTreeSize;\n        }\n    };\n    return TreeNodeEnableIndex;\n}(TreeNode));\nexport { TreeNodeEnableIndex };\n", "export const enum TreeNodeColor {\n  RED = 1,\n  BLACK = 0\n}\n\nexport class TreeNode<K, V> {\n  _color = TreeNodeColor.RED;\n  _key: K | undefined = undefined;\n  _value: V | undefined = undefined;\n  _left: TreeNode<K, V> | undefined = undefined;\n  _right: TreeNode<K, V> | undefined = undefined;\n  _parent: TreeNode<K, V> | undefined = undefined;\n  constructor(key?: K, value?: V) {\n    this._key = key;\n    this._value = value;\n  }\n  /**\n   * @description Get the pre node.\n   * @returns TreeNode about the pre node.\n   */\n  _pre() {\n    let preNode: TreeNode<K, V> = this;\n    if (\n      preNode._color === TreeNodeColor.RED &&\n      preNode._parent!._parent === preNode\n    ) {\n      preNode = preNode._right!;\n    } else if (preNode._left) {\n      preNode = preNode._left;\n      while (preNode._right) {\n        preNode = preNode._right;\n      }\n    } else {\n      let pre = preNode._parent!;\n      while (pre._left === preNode) {\n        preNode = pre;\n        pre = preNode._parent!;\n      }\n      preNode = pre;\n    }\n    return preNode;\n  }\n  /**\n   * @description Get the next node.\n   * @returns TreeNode about the next node.\n   */\n  _next() {\n    let nextNode: TreeNode<K, V> = this;\n    if (nextNode._right) {\n      nextNode = nextNode._right;\n      while (nextNode._left) {\n        nextNode = nextNode._left;\n      }\n      return nextNode;\n    } else {\n      let pre = nextNode._parent!;\n      while (pre._right === nextNode) {\n        nextNode = pre;\n        pre = nextNode._parent!;\n      }\n      if (nextNode._right !== pre) {\n        return pre;\n      } else return nextNode;\n    }\n  }\n  /**\n   * @description Rotate left.\n   * @returns TreeNode about moved to original position after rotation.\n   */\n  _rotateLeft() {\n    const PP = this._parent!;\n    const V = this._right!;\n    const R = V._left;\n\n    if (PP._parent === this) PP._parent = V;\n    else if (PP._left === this) PP._left = V;\n    else PP._right = V;\n\n    V._parent = PP;\n    V._left = this;\n\n    this._parent = V;\n    this._right = R;\n\n    if (R) R._parent = this;\n\n    return V;\n  }\n  /**\n   * @description Rotate right.\n   * @returns TreeNode about moved to original position after rotation.\n   */\n  _rotateRight() {\n    const PP = this._parent!;\n    const F = this._left!;\n    const K = F._right;\n\n    if (PP._parent === this) PP._parent = F;\n    else if (PP._left === this) PP._left = F;\n    else PP._right = F;\n\n    F._parent = PP;\n    F._right = this;\n\n    this._parent = F;\n    this._left = K;\n\n    if (K) K._parent = this;\n\n    return F;\n  }\n}\n\nexport class TreeNodeEnableIndex<K, V> extends TreeNode<K, V> {\n  _subTreeSize = 1;\n  /**\n   * @description Rotate left and do recount.\n   * @returns TreeNode about moved to original position after rotation.\n   */\n  _rotateLeft() {\n    const parent = super._rotateLeft() as TreeNodeEnableIndex<K, V>;\n    this._recount();\n    parent._recount();\n    return parent;\n  }\n  /**\n   * @description Rotate right and do recount.\n   * @returns TreeNode about moved to original position after rotation.\n   */\n  _rotateRight() {\n    const parent = super._rotateRight() as TreeNodeEnableIndex<K, V>;\n    this._recount();\n    parent._recount();\n    return parent;\n  }\n  _recount() {\n    this._subTreeSize = 1;\n    if (this._left) {\n      this._subTreeSize += (this._left as TreeNodeEnableIndex<K, V>)._subTreeSize;\n    }\n    if (this._right) {\n      this._subTreeSize += (this._right as TreeNodeEnableIndex<K, V>)._subTreeSize;\n    }\n  }\n}\n", "var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { TreeNode, TreeNodeEnableIndex } from './TreeNode';\nimport { Container } from \"../../ContainerBase\";\nimport $checkWithinAccessParams from \"../../../utils/checkParams.macro\";\nimport { throwIteratorAccessError } from \"../../../utils/throwError\";\nvar TreeContainer = /** @class */ (function (_super) {\n    __extends(TreeContainer, _super);\n    /**\n     * @internal\n     */\n    function TreeContainer(cmp, enableIndex) {\n        if (cmp === void 0) { cmp = function (x, y) {\n            if (x < y)\n                return -1;\n            if (x > y)\n                return 1;\n            return 0;\n        }; }\n        if (enableIndex === void 0) { enableIndex = false; }\n        var _this = _super.call(this) || this;\n        /**\n         * @internal\n         */\n        _this._root = undefined;\n        _this._cmp = cmp;\n        if (enableIndex) {\n            _this._TreeNodeClass = TreeNodeEnableIndex;\n            _this._set = function (key, value, hint) {\n                var curNode = this._preSet(key, value, hint);\n                if (curNode) {\n                    var p = curNode._parent;\n                    while (p !== this._header) {\n                        p._subTreeSize += 1;\n                        p = p._parent;\n                    }\n                    var nodeList = this._insertNodeSelfBalance(curNode);\n                    if (nodeList) {\n                        var _a = nodeList, parentNode = _a.parentNode, grandParent = _a.grandParent, curNode_1 = _a.curNode;\n                        parentNode._recount();\n                        grandParent._recount();\n                        curNode_1._recount();\n                    }\n                }\n                return this._length;\n            };\n            _this._eraseNode = function (curNode) {\n                var p = this._preEraseNode(curNode);\n                while (p !== this._header) {\n                    p._subTreeSize -= 1;\n                    p = p._parent;\n                }\n            };\n        }\n        else {\n            _this._TreeNodeClass = TreeNode;\n            _this._set = function (key, value, hint) {\n                var curNode = this._preSet(key, value, hint);\n                if (curNode)\n                    this._insertNodeSelfBalance(curNode);\n                return this._length;\n            };\n            _this._eraseNode = _this._preEraseNode;\n        }\n        _this._header = new _this._TreeNodeClass();\n        return _this;\n    }\n    /**\n     * @internal\n     */\n    TreeContainer.prototype._lowerBound = function (curNode, key) {\n        var resNode = this._header;\n        while (curNode) {\n            var cmpResult = this._cmp(curNode._key, key);\n            if (cmpResult < 0) {\n                curNode = curNode._right;\n            }\n            else if (cmpResult > 0) {\n                resNode = curNode;\n                curNode = curNode._left;\n            }\n            else\n                return curNode;\n        }\n        return resNode;\n    };\n    /**\n     * @internal\n     */\n    TreeContainer.prototype._upperBound = function (curNode, key) {\n        var resNode = this._header;\n        while (curNode) {\n            var cmpResult = this._cmp(curNode._key, key);\n            if (cmpResult <= 0) {\n                curNode = curNode._right;\n            }\n            else {\n                resNode = curNode;\n                curNode = curNode._left;\n            }\n        }\n        return resNode;\n    };\n    /**\n     * @internal\n     */\n    TreeContainer.prototype._reverseLowerBound = function (curNode, key) {\n        var resNode = this._header;\n        while (curNode) {\n            var cmpResult = this._cmp(curNode._key, key);\n            if (cmpResult < 0) {\n                resNode = curNode;\n                curNode = curNode._right;\n            }\n            else if (cmpResult > 0) {\n                curNode = curNode._left;\n            }\n            else\n                return curNode;\n        }\n        return resNode;\n    };\n    /**\n     * @internal\n     */\n    TreeContainer.prototype._reverseUpperBound = function (curNode, key) {\n        var resNode = this._header;\n        while (curNode) {\n            var cmpResult = this._cmp(curNode._key, key);\n            if (cmpResult < 0) {\n                resNode = curNode;\n                curNode = curNode._right;\n            }\n            else {\n                curNode = curNode._left;\n            }\n        }\n        return resNode;\n    };\n    /**\n     * @internal\n     */\n    TreeContainer.prototype._eraseNodeSelfBalance = function (curNode) {\n        while (true) {\n            var parentNode = curNode._parent;\n            if (parentNode === this._header)\n                return;\n            if (curNode._color === 1 /* TreeNodeColor.RED */) {\n                curNode._color = 0 /* TreeNodeColor.BLACK */;\n                return;\n            }\n            if (curNode === parentNode._left) {\n                var brother = parentNode._right;\n                if (brother._color === 1 /* TreeNodeColor.RED */) {\n                    brother._color = 0 /* TreeNodeColor.BLACK */;\n                    parentNode._color = 1 /* TreeNodeColor.RED */;\n                    if (parentNode === this._root) {\n                        this._root = parentNode._rotateLeft();\n                    }\n                    else\n                        parentNode._rotateLeft();\n                }\n                else {\n                    if (brother._right && brother._right._color === 1 /* TreeNodeColor.RED */) {\n                        brother._color = parentNode._color;\n                        parentNode._color = 0 /* TreeNodeColor.BLACK */;\n                        brother._right._color = 0 /* TreeNodeColor.BLACK */;\n                        if (parentNode === this._root) {\n                            this._root = parentNode._rotateLeft();\n                        }\n                        else\n                            parentNode._rotateLeft();\n                        return;\n                    }\n                    else if (brother._left && brother._left._color === 1 /* TreeNodeColor.RED */) {\n                        brother._color = 1 /* TreeNodeColor.RED */;\n                        brother._left._color = 0 /* TreeNodeColor.BLACK */;\n                        brother._rotateRight();\n                    }\n                    else {\n                        brother._color = 1 /* TreeNodeColor.RED */;\n                        curNode = parentNode;\n                    }\n                }\n            }\n            else {\n                var brother = parentNode._left;\n                if (brother._color === 1 /* TreeNodeColor.RED */) {\n                    brother._color = 0 /* TreeNodeColor.BLACK */;\n                    parentNode._color = 1 /* TreeNodeColor.RED */;\n                    if (parentNode === this._root) {\n                        this._root = parentNode._rotateRight();\n                    }\n                    else\n                        parentNode._rotateRight();\n                }\n                else {\n                    if (brother._left && brother._left._color === 1 /* TreeNodeColor.RED */) {\n                        brother._color = parentNode._color;\n                        parentNode._color = 0 /* TreeNodeColor.BLACK */;\n                        brother._left._color = 0 /* TreeNodeColor.BLACK */;\n                        if (parentNode === this._root) {\n                            this._root = parentNode._rotateRight();\n                        }\n                        else\n                            parentNode._rotateRight();\n                        return;\n                    }\n                    else if (brother._right && brother._right._color === 1 /* TreeNodeColor.RED */) {\n                        brother._color = 1 /* TreeNodeColor.RED */;\n                        brother._right._color = 0 /* TreeNodeColor.BLACK */;\n                        brother._rotateLeft();\n                    }\n                    else {\n                        brother._color = 1 /* TreeNodeColor.RED */;\n                        curNode = parentNode;\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * @internal\n     */\n    TreeContainer.prototype._preEraseNode = function (curNode) {\n        var _a, _b;\n        if (this._length === 1) {\n            this.clear();\n            return this._header;\n        }\n        var swapNode = curNode;\n        while (swapNode._left || swapNode._right) {\n            if (swapNode._right) {\n                swapNode = swapNode._right;\n                while (swapNode._left)\n                    swapNode = swapNode._left;\n            }\n            else {\n                swapNode = swapNode._left;\n            }\n            _a = __read([swapNode._key, curNode._key], 2), curNode._key = _a[0], swapNode._key = _a[1];\n            _b = __read([swapNode._value, curNode._value], 2), curNode._value = _b[0], swapNode._value = _b[1];\n            curNode = swapNode;\n        }\n        if (this._header._left === swapNode) {\n            this._header._left = swapNode._parent;\n        }\n        else if (this._header._right === swapNode) {\n            this._header._right = swapNode._parent;\n        }\n        this._eraseNodeSelfBalance(swapNode);\n        var _parent = swapNode._parent;\n        if (swapNode === _parent._left) {\n            _parent._left = undefined;\n        }\n        else\n            _parent._right = undefined;\n        this._length -= 1;\n        this._root._color = 0 /* TreeNodeColor.BLACK */;\n        return _parent;\n    };\n    /**\n     * @internal\n     */\n    TreeContainer.prototype._inOrderTraversal = function (curNode, callback) {\n        if (curNode === undefined)\n            return false;\n        var ifReturn = this._inOrderTraversal(curNode._left, callback);\n        if (ifReturn)\n            return true;\n        if (callback(curNode))\n            return true;\n        return this._inOrderTraversal(curNode._right, callback);\n    };\n    /**\n     * @internal\n     */\n    TreeContainer.prototype._insertNodeSelfBalance = function (curNode) {\n        while (true) {\n            var parentNode = curNode._parent;\n            if (parentNode._color === 0 /* TreeNodeColor.BLACK */)\n                return;\n            var grandParent = parentNode._parent;\n            if (parentNode === grandParent._left) {\n                var uncle = grandParent._right;\n                if (uncle && uncle._color === 1 /* TreeNodeColor.RED */) {\n                    uncle._color = parentNode._color = 0 /* TreeNodeColor.BLACK */;\n                    if (grandParent === this._root)\n                        return;\n                    grandParent._color = 1 /* TreeNodeColor.RED */;\n                    curNode = grandParent;\n                    continue;\n                }\n                else if (curNode === parentNode._right) {\n                    curNode._color = 0 /* TreeNodeColor.BLACK */;\n                    if (curNode._left)\n                        curNode._left._parent = parentNode;\n                    if (curNode._right)\n                        curNode._right._parent = grandParent;\n                    parentNode._right = curNode._left;\n                    grandParent._left = curNode._right;\n                    curNode._left = parentNode;\n                    curNode._right = grandParent;\n                    if (grandParent === this._root) {\n                        this._root = curNode;\n                        this._header._parent = curNode;\n                    }\n                    else {\n                        var GP = grandParent._parent;\n                        if (GP._left === grandParent) {\n                            GP._left = curNode;\n                        }\n                        else\n                            GP._right = curNode;\n                    }\n                    curNode._parent = grandParent._parent;\n                    parentNode._parent = curNode;\n                    grandParent._parent = curNode;\n                    grandParent._color = 1 /* TreeNodeColor.RED */;\n                    return { parentNode: parentNode, grandParent: grandParent, curNode: curNode };\n                }\n                else {\n                    parentNode._color = 0 /* TreeNodeColor.BLACK */;\n                    if (grandParent === this._root) {\n                        this._root = grandParent._rotateRight();\n                    }\n                    else\n                        grandParent._rotateRight();\n                    grandParent._color = 1 /* TreeNodeColor.RED */;\n                }\n            }\n            else {\n                var uncle = grandParent._left;\n                if (uncle && uncle._color === 1 /* TreeNodeColor.RED */) {\n                    uncle._color = parentNode._color = 0 /* TreeNodeColor.BLACK */;\n                    if (grandParent === this._root)\n                        return;\n                    grandParent._color = 1 /* TreeNodeColor.RED */;\n                    curNode = grandParent;\n                    continue;\n                }\n                else if (curNode === parentNode._left) {\n                    curNode._color = 0 /* TreeNodeColor.BLACK */;\n                    if (curNode._left)\n                        curNode._left._parent = grandParent;\n                    if (curNode._right)\n                        curNode._right._parent = parentNode;\n                    grandParent._right = curNode._left;\n                    parentNode._left = curNode._right;\n                    curNode._left = grandParent;\n                    curNode._right = parentNode;\n                    if (grandParent === this._root) {\n                        this._root = curNode;\n                        this._header._parent = curNode;\n                    }\n                    else {\n                        var GP = grandParent._parent;\n                        if (GP._left === grandParent) {\n                            GP._left = curNode;\n                        }\n                        else\n                            GP._right = curNode;\n                    }\n                    curNode._parent = grandParent._parent;\n                    parentNode._parent = curNode;\n                    grandParent._parent = curNode;\n                    grandParent._color = 1 /* TreeNodeColor.RED */;\n                    return { parentNode: parentNode, grandParent: grandParent, curNode: curNode };\n                }\n                else {\n                    parentNode._color = 0 /* TreeNodeColor.BLACK */;\n                    if (grandParent === this._root) {\n                        this._root = grandParent._rotateLeft();\n                    }\n                    else\n                        grandParent._rotateLeft();\n                    grandParent._color = 1 /* TreeNodeColor.RED */;\n                }\n            }\n            return;\n        }\n    };\n    /**\n     * @internal\n     */\n    TreeContainer.prototype._preSet = function (key, value, hint) {\n        if (this._root === undefined) {\n            this._length += 1;\n            this._root = new this._TreeNodeClass(key, value);\n            this._root._color = 0 /* TreeNodeColor.BLACK */;\n            this._root._parent = this._header;\n            this._header._parent = this._root;\n            this._header._left = this._root;\n            this._header._right = this._root;\n            return;\n        }\n        var curNode;\n        var minNode = this._header._left;\n        var compareToMin = this._cmp(minNode._key, key);\n        if (compareToMin === 0) {\n            minNode._value = value;\n            return;\n        }\n        else if (compareToMin > 0) {\n            minNode._left = new this._TreeNodeClass(key, value);\n            minNode._left._parent = minNode;\n            curNode = minNode._left;\n            this._header._left = curNode;\n        }\n        else {\n            var maxNode = this._header._right;\n            var compareToMax = this._cmp(maxNode._key, key);\n            if (compareToMax === 0) {\n                maxNode._value = value;\n                return;\n            }\n            else if (compareToMax < 0) {\n                maxNode._right = new this._TreeNodeClass(key, value);\n                maxNode._right._parent = maxNode;\n                curNode = maxNode._right;\n                this._header._right = curNode;\n            }\n            else {\n                if (hint !== undefined) {\n                    var iterNode = hint._node;\n                    if (iterNode !== this._header) {\n                        var iterCmpRes = this._cmp(iterNode._key, key);\n                        if (iterCmpRes === 0) {\n                            iterNode._value = value;\n                            return;\n                        }\n                        else /* istanbul ignore else */ if (iterCmpRes > 0) {\n                            var preNode = iterNode._pre();\n                            var preCmpRes = this._cmp(preNode._key, key);\n                            if (preCmpRes === 0) {\n                                preNode._value = value;\n                                return;\n                            }\n                            else if (preCmpRes < 0) {\n                                curNode = new this._TreeNodeClass(key, value);\n                                if (preNode._right === undefined) {\n                                    preNode._right = curNode;\n                                    curNode._parent = preNode;\n                                }\n                                else {\n                                    iterNode._left = curNode;\n                                    curNode._parent = iterNode;\n                                }\n                            }\n                        }\n                    }\n                }\n                if (curNode === undefined) {\n                    curNode = this._root;\n                    while (true) {\n                        var cmpResult = this._cmp(curNode._key, key);\n                        if (cmpResult > 0) {\n                            if (curNode._left === undefined) {\n                                curNode._left = new this._TreeNodeClass(key, value);\n                                curNode._left._parent = curNode;\n                                curNode = curNode._left;\n                                break;\n                            }\n                            curNode = curNode._left;\n                        }\n                        else if (cmpResult < 0) {\n                            if (curNode._right === undefined) {\n                                curNode._right = new this._TreeNodeClass(key, value);\n                                curNode._right._parent = curNode;\n                                curNode = curNode._right;\n                                break;\n                            }\n                            curNode = curNode._right;\n                        }\n                        else {\n                            curNode._value = value;\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n        this._length += 1;\n        return curNode;\n    };\n    /**\n     * @internal\n     */\n    TreeContainer.prototype._findElementNode = function (curNode, key) {\n        while (curNode) {\n            var cmpResult = this._cmp(curNode._key, key);\n            if (cmpResult < 0) {\n                curNode = curNode._right;\n            }\n            else if (cmpResult > 0) {\n                curNode = curNode._left;\n            }\n            else\n                return curNode;\n        }\n        return curNode || this._header;\n    };\n    TreeContainer.prototype.clear = function () {\n        this._length = 0;\n        this._root = undefined;\n        this._header._parent = undefined;\n        this._header._left = this._header._right = undefined;\n    };\n    /**\n     * @description Update node's key by iterator.\n     * @param iter - The iterator you want to change.\n     * @param key - The key you want to update.\n     * @returns Whether the modification is successful.\n     * @example\n     * const st = new orderedSet([1, 2, 5]);\n     * const iter = st.find(2);\n     * st.updateKeyByIterator(iter, 3); // then st will become [1, 3, 5]\n     */\n    TreeContainer.prototype.updateKeyByIterator = function (iter, key) {\n        var node = iter._node;\n        if (node === this._header) {\n            throwIteratorAccessError();\n        }\n        if (this._length === 1) {\n            node._key = key;\n            return true;\n        }\n        if (node === this._header._left) {\n            if (this._cmp(node._next()._key, key) > 0) {\n                node._key = key;\n                return true;\n            }\n            return false;\n        }\n        if (node === this._header._right) {\n            if (this._cmp(node._pre()._key, key) < 0) {\n                node._key = key;\n                return true;\n            }\n            return false;\n        }\n        var preKey = node._pre()._key;\n        if (this._cmp(preKey, key) >= 0)\n            return false;\n        var nextKey = node._next()._key;\n        if (this._cmp(nextKey, key) <= 0)\n            return false;\n        node._key = key;\n        return true;\n    };\n    TreeContainer.prototype.eraseElementByPos = function (pos) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        var index = 0;\n        var self = this;\n        this._inOrderTraversal(this._root, function (curNode) {\n            if (pos === index) {\n                self._eraseNode(curNode);\n                return true;\n            }\n            index += 1;\n            return false;\n        });\n        return this._length;\n    };\n    /**\n     * @description Remove the element of the specified key.\n     * @param key - The key you want to remove.\n     * @returns Whether erase successfully.\n     */\n    TreeContainer.prototype.eraseElementByKey = function (key) {\n        if (this._length === 0)\n            return false;\n        var curNode = this._findElementNode(this._root, key);\n        if (curNode === this._header)\n            return false;\n        this._eraseNode(curNode);\n        return true;\n    };\n    TreeContainer.prototype.eraseElementByIterator = function (iter) {\n        var node = iter._node;\n        if (node === this._header) {\n            throwIteratorAccessError();\n        }\n        var hasNoRight = node._right === undefined;\n        var isNormal = iter.iteratorType === 0 /* IteratorType.NORMAL */;\n        // For the normal iterator, the `next` node will be swapped to `this` node when has right.\n        if (isNormal) {\n            // So we should move it to next when it's right is null.\n            if (hasNoRight)\n                iter.next();\n        }\n        else {\n            // For the reverse iterator, only when it doesn't have right and has left the `next` node will be swapped.\n            // So when it has right, or it is a leaf node we should move it to `next`.\n            if (!hasNoRight || node._left === undefined)\n                iter.next();\n        }\n        this._eraseNode(node);\n        return iter;\n    };\n    TreeContainer.prototype.forEach = function (callback) {\n        var e_1, _a;\n        var index = 0;\n        try {\n            for (var _b = __values(this), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var element = _c.value;\n                callback(element, index++, this);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    TreeContainer.prototype.getElementByPos = function (pos) {\n        var e_2, _a;\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        var res;\n        var index = 0;\n        try {\n            for (var _b = __values(this), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var element = _c.value;\n                if (index === pos) {\n                    res = element;\n                    break;\n                }\n                index += 1;\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        return res;\n    };\n    /**\n     * @description Get the height of the tree.\n     * @returns Number about the height of the RB-tree.\n     */\n    TreeContainer.prototype.getHeight = function () {\n        if (this._length === 0)\n            return 0;\n        var traversal = function (curNode) {\n            if (!curNode)\n                return 0;\n            return Math.max(traversal(curNode._left), traversal(curNode._right)) + 1;\n        };\n        return traversal(this._root);\n    };\n    return TreeContainer;\n}(Container));\nexport default TreeContainer;\n", "import type TreeIterator from './TreeIterator';\nimport { TreeNode, TreeNodeColor, TreeNodeEnableIndex } from './TreeNode';\nimport { Container, IteratorType } from '@/container/ContainerBase';\nimport $checkWithinAccessParams from '@/utils/checkParams.macro';\nimport { throwIteratorAccessError } from '@/utils/throwError';\n\nabstract class TreeContainer<K, V> extends Container<K | [K, V]> {\n  /**\n   * @internal\n   */\n  protected _root: TreeNode<K, V> | undefined = undefined;\n  /**\n   * @internal\n   */\n  protected _header: TreeNode<K, V>;\n  /**\n   * @internal\n   */\n  protected readonly _cmp: (x: K, y: K) => number;\n  /**\n   * @internal\n   */\n  protected readonly _TreeNodeClass: typeof TreeNode | typeof TreeNodeEnableIndex;\n  /**\n   * @internal\n   */\n  protected readonly _eraseNode: (curNode: TreeNode<K, V>) => void;\n  /**\n   * @internal\n   */\n  protected _set: (key: K, value: V, hint?: TreeIterator<K, V>) => number;\n  /**\n   * @internal\n   */\n  protected constructor(\n    cmp: (x: K, y: K) => number =\n    function (x: K, y: K) {\n      if (x < y) return -1;\n      if (x > y) return 1;\n      return 0;\n    },\n    enableIndex = false\n  ) {\n    super();\n    this._cmp = cmp;\n    if (enableIndex) {\n      this._TreeNodeClass = TreeNodeEnableIndex;\n      this._set = function (key, value, hint) {\n        const curNode = this._preSet(key, value, hint);\n        if (curNode) {\n          let p = curNode._parent as TreeNodeEnableIndex<K, V>;\n          while (p !== this._header) {\n            p._subTreeSize += 1;\n            p = p._parent as TreeNodeEnableIndex<K, V>;\n          }\n          const nodeList = this._insertNodeSelfBalance(curNode);\n          if (nodeList) {\n            const {\n              parentNode,\n              grandParent,\n              curNode\n            } = nodeList as unknown as Record<string, TreeNodeEnableIndex<K, V>>;\n            parentNode._recount();\n            grandParent._recount();\n            curNode._recount();\n          }\n        }\n        return this._length;\n      };\n      this._eraseNode = function (curNode) {\n        let p = this._preEraseNode(curNode) as TreeNodeEnableIndex<K, V>;\n        while (p !== this._header) {\n          p._subTreeSize -= 1;\n          p = p._parent as TreeNodeEnableIndex<K, V>;\n        }\n      };\n    } else {\n      this._TreeNodeClass = TreeNode;\n      this._set = function (key, value, hint) {\n        const curNode = this._preSet(key, value, hint);\n        if (curNode) this._insertNodeSelfBalance(curNode);\n        return this._length;\n      };\n      this._eraseNode = this._preEraseNode;\n    }\n    this._header = new this._TreeNodeClass();\n  }\n  /**\n   * @internal\n   */\n  protected _lowerBound(curNode: TreeNode<K, V> | undefined, key: K) {\n    let resNode = this._header;\n    while (curNode) {\n      const cmpResult = this._cmp(curNode._key!, key);\n      if (cmpResult < 0) {\n        curNode = curNode._right;\n      } else if (cmpResult > 0) {\n        resNode = curNode;\n        curNode = curNode._left;\n      } else return curNode;\n    }\n    return resNode;\n  }\n  /**\n   * @internal\n   */\n  protected _upperBound(curNode: TreeNode<K, V> | undefined, key: K) {\n    let resNode = this._header;\n    while (curNode) {\n      const cmpResult = this._cmp(curNode._key!, key);\n      if (cmpResult <= 0) {\n        curNode = curNode._right;\n      } else {\n        resNode = curNode;\n        curNode = curNode._left;\n      }\n    }\n    return resNode;\n  }\n  /**\n   * @internal\n   */\n  protected _reverseLowerBound(curNode: TreeNode<K, V> | undefined, key: K) {\n    let resNode = this._header;\n    while (curNode) {\n      const cmpResult = this._cmp(curNode._key!, key);\n      if (cmpResult < 0) {\n        resNode = curNode;\n        curNode = curNode._right;\n      } else if (cmpResult > 0) {\n        curNode = curNode._left;\n      } else return curNode;\n    }\n    return resNode;\n  }\n  /**\n   * @internal\n   */\n  protected _reverseUpperBound(curNode: TreeNode<K, V> | undefined, key: K) {\n    let resNode = this._header;\n    while (curNode) {\n      const cmpResult = this._cmp(curNode._key!, key);\n      if (cmpResult < 0) {\n        resNode = curNode;\n        curNode = curNode._right;\n      } else {\n        curNode = curNode._left;\n      }\n    }\n    return resNode;\n  }\n  /**\n   * @internal\n   */\n  protected _eraseNodeSelfBalance(curNode: TreeNode<K, V>) {\n    while (true) {\n      const parentNode = curNode._parent!;\n      if (parentNode === this._header) return;\n      if (curNode._color === TreeNodeColor.RED) {\n        curNode._color = TreeNodeColor.BLACK;\n        return;\n      }\n      if (curNode === parentNode._left) {\n        const brother = parentNode._right!;\n        if (brother._color === TreeNodeColor.RED) {\n          brother._color = TreeNodeColor.BLACK;\n          parentNode._color = TreeNodeColor.RED;\n          if (parentNode === this._root) {\n            this._root = parentNode._rotateLeft();\n          } else parentNode._rotateLeft();\n        } else {\n          if (brother._right && brother._right._color === TreeNodeColor.RED) {\n            brother._color = parentNode._color;\n            parentNode._color = TreeNodeColor.BLACK;\n            brother._right._color = TreeNodeColor.BLACK;\n            if (parentNode === this._root) {\n              this._root = parentNode._rotateLeft();\n            } else parentNode._rotateLeft();\n            return;\n          } else if (brother._left && brother._left._color === TreeNodeColor.RED) {\n            brother._color = TreeNodeColor.RED;\n            brother._left._color = TreeNodeColor.BLACK;\n            brother._rotateRight();\n          } else {\n            brother._color = TreeNodeColor.RED;\n            curNode = parentNode;\n          }\n        }\n      } else {\n        const brother = parentNode._left!;\n        if (brother._color === TreeNodeColor.RED) {\n          brother._color = TreeNodeColor.BLACK;\n          parentNode._color = TreeNodeColor.RED;\n          if (parentNode === this._root) {\n            this._root = parentNode._rotateRight();\n          } else parentNode._rotateRight();\n        } else {\n          if (brother._left && brother._left._color === TreeNodeColor.RED) {\n            brother._color = parentNode._color;\n            parentNode._color = TreeNodeColor.BLACK;\n            brother._left._color = TreeNodeColor.BLACK;\n            if (parentNode === this._root) {\n              this._root = parentNode._rotateRight();\n            } else parentNode._rotateRight();\n            return;\n          } else if (brother._right && brother._right._color === TreeNodeColor.RED) {\n            brother._color = TreeNodeColor.RED;\n            brother._right._color = TreeNodeColor.BLACK;\n            brother._rotateLeft();\n          } else {\n            brother._color = TreeNodeColor.RED;\n            curNode = parentNode;\n          }\n        }\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n  protected _preEraseNode(curNode: TreeNode<K, V>) {\n    if (this._length === 1) {\n      this.clear();\n      return this._header;\n    }\n    let swapNode = curNode;\n    while (swapNode._left || swapNode._right) {\n      if (swapNode._right) {\n        swapNode = swapNode._right;\n        while (swapNode._left) swapNode = swapNode._left;\n      } else {\n        swapNode = swapNode._left!;\n      }\n      [curNode._key, swapNode._key] = [swapNode._key, curNode._key];\n      [curNode._value, swapNode._value] = [swapNode._value, curNode._value];\n      curNode = swapNode;\n    }\n    if (this._header._left === swapNode) {\n      this._header._left = swapNode._parent;\n    } else if (this._header._right === swapNode) {\n      this._header._right = swapNode._parent;\n    }\n    this._eraseNodeSelfBalance(swapNode);\n    const _parent = swapNode._parent!;\n    if (swapNode === _parent._left) {\n      _parent._left = undefined;\n    } else _parent._right = undefined;\n    this._length -= 1;\n    this._root!._color = TreeNodeColor.BLACK;\n    return _parent;\n  }\n  /**\n   * @internal\n   */\n  protected _inOrderTraversal(\n    curNode: TreeNode<K, V> | undefined,\n    callback: (curNode: TreeNode<K, V>) => boolean\n  ): boolean {\n    if (curNode === undefined) return false;\n    const ifReturn = this._inOrderTraversal(curNode._left, callback);\n    if (ifReturn) return true;\n    if (callback(curNode)) return true;\n    return this._inOrderTraversal(curNode._right, callback);\n  }\n  /**\n   * @internal\n   */\n  protected _insertNodeSelfBalance(curNode: TreeNode<K, V>) {\n    while (true) {\n      const parentNode = curNode._parent!;\n      if (parentNode._color === TreeNodeColor.BLACK) return;\n      const grandParent = parentNode._parent!;\n      if (parentNode === grandParent._left) {\n        const uncle = grandParent._right;\n        if (uncle && uncle._color === TreeNodeColor.RED) {\n          uncle._color = parentNode._color = TreeNodeColor.BLACK;\n          if (grandParent === this._root) return;\n          grandParent._color = TreeNodeColor.RED;\n          curNode = grandParent;\n          continue;\n        } else if (curNode === parentNode._right) {\n          curNode._color = TreeNodeColor.BLACK;\n          if (curNode._left) curNode._left._parent = parentNode;\n          if (curNode._right) curNode._right._parent = grandParent;\n          parentNode._right = curNode._left;\n          grandParent._left = curNode._right;\n          curNode._left = parentNode;\n          curNode._right = grandParent;\n          if (grandParent === this._root) {\n            this._root = curNode;\n            this._header._parent = curNode;\n          } else {\n            const GP = grandParent._parent!;\n            if (GP._left === grandParent) {\n              GP._left = curNode;\n            } else GP._right = curNode;\n          }\n          curNode._parent = grandParent._parent;\n          parentNode._parent = curNode;\n          grandParent._parent = curNode;\n          grandParent._color = TreeNodeColor.RED;\n          return { parentNode, grandParent, curNode };\n        } else {\n          parentNode._color = TreeNodeColor.BLACK;\n          if (grandParent === this._root) {\n            this._root = grandParent._rotateRight();\n          } else grandParent._rotateRight();\n          grandParent._color = TreeNodeColor.RED;\n        }\n      } else {\n        const uncle = grandParent._left;\n        if (uncle && uncle._color === TreeNodeColor.RED) {\n          uncle._color = parentNode._color = TreeNodeColor.BLACK;\n          if (grandParent === this._root) return;\n          grandParent._color = TreeNodeColor.RED;\n          curNode = grandParent;\n          continue;\n        } else if (curNode === parentNode._left) {\n          curNode._color = TreeNodeColor.BLACK;\n          if (curNode._left) curNode._left._parent = grandParent;\n          if (curNode._right) curNode._right._parent = parentNode;\n          grandParent._right = curNode._left;\n          parentNode._left = curNode._right;\n          curNode._left = grandParent;\n          curNode._right = parentNode;\n          if (grandParent === this._root) {\n            this._root = curNode;\n            this._header._parent = curNode;\n          } else {\n            const GP = grandParent._parent!;\n            if (GP._left === grandParent) {\n              GP._left = curNode;\n            } else GP._right = curNode;\n          }\n          curNode._parent = grandParent._parent;\n          parentNode._parent = curNode;\n          grandParent._parent = curNode;\n          grandParent._color = TreeNodeColor.RED;\n          return { parentNode, grandParent, curNode };\n        } else {\n          parentNode._color = TreeNodeColor.BLACK;\n          if (grandParent === this._root) {\n            this._root = grandParent._rotateLeft();\n          } else grandParent._rotateLeft();\n          grandParent._color = TreeNodeColor.RED;\n        }\n      }\n      return;\n    }\n  }\n  /**\n   * @internal\n   */\n  protected _preSet(key: K, value?: V, hint?: TreeIterator<K, V>) {\n    if (this._root === undefined) {\n      this._length += 1;\n      this._root = new this._TreeNodeClass(key, value);\n      this._root._color = TreeNodeColor.BLACK;\n      this._root._parent = this._header;\n      this._header._parent = this._root;\n      this._header._left = this._root;\n      this._header._right = this._root;\n      return;\n    }\n    let curNode;\n    const minNode = this._header._left!;\n    const compareToMin = this._cmp(minNode._key!, key);\n    if (compareToMin === 0) {\n      minNode._value = value;\n      return;\n    } else if (compareToMin > 0) {\n      minNode._left = new this._TreeNodeClass(key, value);\n      minNode._left._parent = minNode;\n      curNode = minNode._left;\n      this._header._left = curNode;\n    } else {\n      const maxNode = this._header._right!;\n      const compareToMax = this._cmp(maxNode._key!, key);\n      if (compareToMax === 0) {\n        maxNode._value = value;\n        return;\n      } else if (compareToMax < 0) {\n        maxNode._right = new this._TreeNodeClass(key, value);\n        maxNode._right._parent = maxNode;\n        curNode = maxNode._right;\n        this._header._right = curNode;\n      } else {\n        if (hint !== undefined) {\n          const iterNode = hint._node;\n          if (iterNode !== this._header) {\n            const iterCmpRes = this._cmp(iterNode._key!, key);\n            if (iterCmpRes === 0) {\n              iterNode._value = value;\n              return;\n            } else /* istanbul ignore else */ if (iterCmpRes > 0) {\n              const preNode = iterNode._pre();\n              const preCmpRes = this._cmp(preNode._key!, key);\n              if (preCmpRes === 0) {\n                preNode._value = value;\n                return;\n              } else if (preCmpRes < 0) {\n                curNode = new this._TreeNodeClass(key, value);\n                if (preNode._right === undefined) {\n                  preNode._right = curNode;\n                  curNode._parent = preNode;\n                } else {\n                  iterNode._left = curNode;\n                  curNode._parent = iterNode;\n                }\n              }\n            }\n          }\n        }\n        if (curNode === undefined) {\n          curNode = this._root;\n          while (true) {\n            const cmpResult = this._cmp(curNode._key!, key);\n            if (cmpResult > 0) {\n              if (curNode._left === undefined) {\n                curNode._left = new this._TreeNodeClass(key, value);\n                curNode._left._parent = curNode;\n                curNode = curNode._left;\n                break;\n              }\n              curNode = curNode._left;\n            } else if (cmpResult < 0) {\n              if (curNode._right === undefined) {\n                curNode._right = new this._TreeNodeClass(key, value);\n                curNode._right._parent = curNode;\n                curNode = curNode._right;\n                break;\n              }\n              curNode = curNode._right;\n            } else {\n              curNode._value = value;\n              return;\n            }\n          }\n        }\n      }\n    }\n    this._length += 1;\n    return curNode;\n  }\n  /**\n   * @internal\n   */\n  protected _findElementNode(curNode: TreeNode<K, V> | undefined, key: K) {\n    while (curNode) {\n      const cmpResult = this._cmp(curNode._key!, key);\n      if (cmpResult < 0) {\n        curNode = curNode._right;\n      } else if (cmpResult > 0) {\n        curNode = curNode._left;\n      } else return curNode;\n    }\n    return curNode || this._header;\n  }\n  clear() {\n    this._length = 0;\n    this._root = undefined;\n    this._header._parent = undefined;\n    this._header._left = this._header._right = undefined;\n  }\n  /**\n   * @description Update node's key by iterator.\n   * @param iter - The iterator you want to change.\n   * @param key - The key you want to update.\n   * @returns Whether the modification is successful.\n   * @example\n   * const st = new orderedSet([1, 2, 5]);\n   * const iter = st.find(2);\n   * st.updateKeyByIterator(iter, 3); // then st will become [1, 3, 5]\n   */\n  updateKeyByIterator(iter: TreeIterator<K, V>, key: K): boolean {\n    const node = iter._node;\n    if (node === this._header) {\n      throwIteratorAccessError();\n    }\n    if (this._length === 1) {\n      node._key = key;\n      return true;\n    }\n    if (node === this._header._left) {\n      if (this._cmp(node._next()._key!, key) > 0) {\n        node._key = key;\n        return true;\n      }\n      return false;\n    }\n    if (node === this._header._right) {\n      if (this._cmp(node._pre()._key!, key) < 0) {\n        node._key = key;\n        return true;\n      }\n      return false;\n    }\n    const preKey = node._pre()._key!;\n    if (this._cmp(preKey, key) >= 0) return false;\n    const nextKey = node._next()._key!;\n    if (this._cmp(nextKey, key) <= 0) return false;\n    node._key = key;\n    return true;\n  }\n  eraseElementByPos(pos: number) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    let index = 0;\n    const self = this;\n    this._inOrderTraversal(\n      this._root,\n      function (curNode) {\n        if (pos === index) {\n          self._eraseNode(curNode);\n          return true;\n        }\n        index += 1;\n        return false;\n      });\n    return this._length;\n  }\n  /**\n   * @description Remove the element of the specified key.\n   * @param key - The key you want to remove.\n   * @returns Whether erase successfully.\n   */\n  eraseElementByKey(key: K) {\n    if (this._length === 0) return false;\n    const curNode = this._findElementNode(this._root, key);\n    if (curNode === this._header) return false;\n    this._eraseNode(curNode);\n    return true;\n  }\n  eraseElementByIterator(iter: TreeIterator<K, V>) {\n    const node = iter._node;\n    if (node === this._header) {\n      throwIteratorAccessError();\n    }\n    const hasNoRight = node._right === undefined;\n    const isNormal = iter.iteratorType === IteratorType.NORMAL;\n    // For the normal iterator, the `next` node will be swapped to `this` node when has right.\n    if (isNormal) {\n      // So we should move it to next when it's right is null.\n      if (hasNoRight) iter.next();\n    } else {\n      // For the reverse iterator, only when it doesn't have right and has left the `next` node will be swapped.\n      // So when it has right, or it is a leaf node we should move it to `next`.\n      if (!hasNoRight || node._left === undefined) iter.next();\n    }\n    this._eraseNode(node);\n    return iter;\n  }\n  forEach(callback: (element: K | [K, V], index: number, tree: TreeContainer<K, V>) => void) {\n    let index = 0;\n    for (const element of this) callback(element, index++, this);\n  }\n  getElementByPos(pos: number) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    let res;\n    let index = 0;\n    for (const element of this) {\n      if (index === pos) {\n        res = element;\n        break;\n      }\n      index += 1;\n    }\n    return <K | [K, V]>res;\n  }\n  /**\n   * @description Get the height of the tree.\n   * @returns Number about the height of the RB-tree.\n   */\n  getHeight() {\n    if (this._length === 0) return 0;\n    const traversal =\n      function (curNode: TreeNode<K, V> | undefined): number {\n        if (!curNode) return 0;\n        return Math.max(traversal(curNode._left), traversal(curNode._right)) + 1;\n      };\n    return traversal(this._root);\n  }\n  /**\n   * @param key - The given key you want to compare.\n   * @returns An iterator to the first element less than the given key.\n   */\n  abstract reverseUpperBound(key: K): TreeIterator<K, V>;\n  /**\n   * @description Union the other tree to self.\n   * @param other - The other tree container you want to merge.\n   * @returns The size of the tree after union.\n   */\n  abstract union(other: TreeContainer<K, V>): number;\n  /**\n   * @param key - The given key you want to compare.\n   * @returns An iterator to the first element not greater than the given key.\n   */\n  abstract reverseLowerBound(key: K): TreeIterator<K, V>;\n  /**\n   * @param key - The given key you want to compare.\n   * @returns An iterator to the first element not less than the given key.\n   */\n  abstract lowerBound(key: K): TreeIterator<K, V>;\n  /**\n   * @param key - The given key you want to compare.\n   * @returns An iterator to the first element greater than the given key.\n   */\n  abstract upperBound(key: K): TreeIterator<K, V>;\n}\n\nexport default TreeContainer;\n", "var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { ContainerIterator } from \"../../ContainerBase\";\nimport { throwIteratorAccessError } from \"../../../utils/throwError\";\nvar TreeIterator = /** @class */ (function (_super) {\n    __extends(TreeIterator, _super);\n    /**\n     * @internal\n     */\n    function TreeIterator(node, header, iteratorType) {\n        var _this = _super.call(this, iteratorType) || this;\n        _this._node = node;\n        _this._header = header;\n        if (_this.iteratorType === 0 /* IteratorType.NORMAL */) {\n            _this.pre = function () {\n                if (this._node === this._header._left) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._pre();\n                return this;\n            };\n            _this.next = function () {\n                if (this._node === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._next();\n                return this;\n            };\n        }\n        else {\n            _this.pre = function () {\n                if (this._node === this._header._right) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._next();\n                return this;\n            };\n            _this.next = function () {\n                if (this._node === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._pre();\n                return this;\n            };\n        }\n        return _this;\n    }\n    Object.defineProperty(TreeIterator.prototype, \"index\", {\n        /**\n         * @description Get the sequential index of the iterator in the tree container.<br/>\n         *              <strong>Note:</strong>\n         *              This function only takes effect when the specified tree container `enableIndex = true`.\n         * @returns The index subscript of the node in the tree.\n         * @example\n         * const st = new OrderedSet([1, 2, 3], true);\n         * console.log(st.begin().next().index);  // 1\n         */\n        get: function () {\n            var _node = this._node;\n            var root = this._header._parent;\n            if (_node === this._header) {\n                if (root) {\n                    return root._subTreeSize - 1;\n                }\n                return 0;\n            }\n            var index = 0;\n            if (_node._left) {\n                index += _node._left._subTreeSize;\n            }\n            while (_node !== root) {\n                var _parent = _node._parent;\n                if (_node === _parent._right) {\n                    index += 1;\n                    if (_parent._left) {\n                        index += _parent._left._subTreeSize;\n                    }\n                }\n                _node = _parent;\n            }\n            return index;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return TreeIterator;\n}(ContainerIterator));\nexport default TreeIterator;\n", "import { TreeNode } from './TreeNode';\nimport type { TreeNodeEnableIndex } from './TreeNode';\nimport { ContainerIterator, IteratorType } from '@/container/ContainerBase';\nimport TreeContainer from '@/container/TreeContainer/Base/index';\nimport { throwIteratorAccessError } from '@/utils/throwError';\n\nabstract class TreeIterator<K, V> extends ContainerIterator<K | [K, V]> {\n  abstract readonly container: TreeContainer<K, V>;\n  /**\n   * @internal\n   */\n  _node: TreeNode<K, V>;\n  /**\n   * @internal\n   */\n  protected _header: TreeNode<K, V>;\n  /**\n   * @internal\n   */\n  protected constructor(\n    node: TreeNode<K, V>,\n    header: TreeNode<K, V>,\n    iteratorType?: IteratorType\n  ) {\n    super(iteratorType);\n    this._node = node;\n    this._header = header;\n    if (this.iteratorType === IteratorType.NORMAL) {\n      this.pre = function () {\n        if (this._node === this._header._left) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._pre();\n        return this;\n      };\n\n      this.next = function () {\n        if (this._node === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._next();\n        return this;\n      };\n    } else {\n      this.pre = function () {\n        if (this._node === this._header._right) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._next();\n        return this;\n      };\n\n      this.next = function () {\n        if (this._node === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._pre();\n        return this;\n      };\n    }\n  }\n  /**\n   * @description Get the sequential index of the iterator in the tree container.<br/>\n   *              <strong>Note:</strong>\n   *              This function only takes effect when the specified tree container `enableIndex = true`.\n   * @returns The index subscript of the node in the tree.\n   * @example\n   * const st = new OrderedSet([1, 2, 3], true);\n   * console.log(st.begin().next().index);  // 1\n   */\n  get index() {\n    let _node = this._node as TreeNodeEnableIndex<K, V>;\n    const root = this._header._parent as TreeNodeEnableIndex<K, V>;\n    if (_node === this._header) {\n      if (root) {\n        return root._subTreeSize - 1;\n      }\n      return 0;\n    }\n    let index = 0;\n    if (_node._left) {\n      index += (_node._left as TreeNodeEnableIndex<K, V>)._subTreeSize;\n    }\n    while (_node !== root) {\n      const _parent = _node._parent as TreeNodeEnableIndex<K, V>;\n      if (_node === _parent._right) {\n        index += 1;\n        if (_parent._left) {\n          index += (_parent._left as TreeNodeEnableIndex<K, V>)._subTreeSize;\n        }\n      }\n      _node = _parent;\n    }\n    return index;\n  }\n  // @ts-ignore\n  pre(): this;\n  // @ts-ignore\n  next(): this;\n}\n\nexport default TreeIterator;\n", "var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport TreeContainer from './Base';\nimport TreeIterator from './Base/TreeIterator';\nimport { throwIteratorAccessError } from \"../../utils/throwError\";\nvar OrderedSetIterator = /** @class */ (function (_super) {\n    __extends(OrderedSetIterator, _super);\n    function OrderedSetIterator(node, header, container, iteratorType) {\n        var _this = _super.call(this, node, header, iteratorType) || this;\n        _this.container = container;\n        return _this;\n    }\n    Object.defineProperty(OrderedSetIterator.prototype, \"pointer\", {\n        get: function () {\n            if (this._node === this._header) {\n                throwIteratorAccessError();\n            }\n            return this._node._key;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    OrderedSetIterator.prototype.copy = function () {\n        return new OrderedSetIterator(this._node, this._header, this.container, this.iteratorType);\n    };\n    return OrderedSetIterator;\n}(TreeIterator));\nvar OrderedSet = /** @class */ (function (_super) {\n    __extends(OrderedSet, _super);\n    /**\n     * @param container - The initialization container.\n     * @param cmp - The compare function.\n     * @param enableIndex - Whether to enable iterator indexing function.\n     * @example\n     * new OrderedSet();\n     * new OrderedSet([0, 1, 2]);\n     * new OrderedSet([0, 1, 2], (x, y) => x - y);\n     * new OrderedSet([0, 1, 2], (x, y) => x - y, true);\n     */\n    function OrderedSet(container, cmp, enableIndex) {\n        if (container === void 0) { container = []; }\n        var _this = _super.call(this, cmp, enableIndex) || this;\n        var self = _this;\n        container.forEach(function (el) {\n            self.insert(el);\n        });\n        return _this;\n    }\n    /**\n     * @internal\n     */\n    OrderedSet.prototype._iterationFunc = function (curNode) {\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (curNode === undefined)\n                        return [2 /*return*/];\n                    return [5 /*yield**/, __values(this._iterationFunc(curNode._left))];\n                case 1:\n                    _a.sent();\n                    return [4 /*yield*/, curNode._key];\n                case 2:\n                    _a.sent();\n                    return [5 /*yield**/, __values(this._iterationFunc(curNode._right))];\n                case 3:\n                    _a.sent();\n                    return [2 /*return*/];\n            }\n        });\n    };\n    OrderedSet.prototype.begin = function () {\n        return new OrderedSetIterator(this._header._left || this._header, this._header, this);\n    };\n    OrderedSet.prototype.end = function () {\n        return new OrderedSetIterator(this._header, this._header, this);\n    };\n    OrderedSet.prototype.rBegin = function () {\n        return new OrderedSetIterator(this._header._right || this._header, this._header, this, 1 /* IteratorType.REVERSE */);\n    };\n    OrderedSet.prototype.rEnd = function () {\n        return new OrderedSetIterator(this._header, this._header, this, 1 /* IteratorType.REVERSE */);\n    };\n    OrderedSet.prototype.front = function () {\n        return this._header._left ? this._header._left._key : undefined;\n    };\n    OrderedSet.prototype.back = function () {\n        return this._header._right ? this._header._right._key : undefined;\n    };\n    /**\n     * @description Insert element to set.\n     * @param key - The key want to insert.\n     * @param hint - You can give an iterator hint to improve insertion efficiency.\n     * @return The size of container after setting.\n     * @example\n     * const st = new OrderedSet([2, 4, 5]);\n     * const iter = st.begin();\n     * st.insert(1);\n     * st.insert(3, iter);  // give a hint will be faster.\n     */\n    OrderedSet.prototype.insert = function (key, hint) {\n        return this._set(key, undefined, hint);\n    };\n    OrderedSet.prototype.find = function (element) {\n        var resNode = this._findElementNode(this._root, element);\n        return new OrderedSetIterator(resNode, this._header, this);\n    };\n    OrderedSet.prototype.lowerBound = function (key) {\n        var resNode = this._lowerBound(this._root, key);\n        return new OrderedSetIterator(resNode, this._header, this);\n    };\n    OrderedSet.prototype.upperBound = function (key) {\n        var resNode = this._upperBound(this._root, key);\n        return new OrderedSetIterator(resNode, this._header, this);\n    };\n    OrderedSet.prototype.reverseLowerBound = function (key) {\n        var resNode = this._reverseLowerBound(this._root, key);\n        return new OrderedSetIterator(resNode, this._header, this);\n    };\n    OrderedSet.prototype.reverseUpperBound = function (key) {\n        var resNode = this._reverseUpperBound(this._root, key);\n        return new OrderedSetIterator(resNode, this._header, this);\n    };\n    OrderedSet.prototype.union = function (other) {\n        var self = this;\n        other.forEach(function (el) {\n            self.insert(el);\n        });\n        return this._length;\n    };\n    OrderedSet.prototype[Symbol.iterator] = function () {\n        return this._iterationFunc(this._root);\n    };\n    return OrderedSet;\n}(TreeContainer));\nexport default OrderedSet;\n", "import TreeContainer from './Base';\nimport TreeIterator from './Base/TreeIterator';\nimport { TreeNode } from './Base/TreeNode';\nimport { initContainer, IteratorType } from '@/container/ContainerBase';\nimport { throwIteratorAccessError } from '@/utils/throwError';\n\nclass OrderedSetIterator<K> extends TreeIterator<K, undefined> {\n  container: OrderedSet<K>;\n  constructor(\n    node: TreeNode<K, undefined>,\n    header: TreeNode<K, undefined>,\n    container: OrderedSet<K>,\n    iteratorType?: IteratorType\n  ) {\n    super(node, header, iteratorType);\n    this.container = container;\n  }\n  get pointer() {\n    if (this._node === this._header) {\n      throwIteratorAccessError();\n    }\n    return this._node._key!;\n  }\n  copy() {\n    return new OrderedSetIterator<K>(\n      this._node,\n      this._header,\n      this.container,\n      this.iteratorType\n    );\n  }\n  // @ts-ignore\n  equals(iter: OrderedSetIterator<K>): boolean;\n}\n\nexport type { OrderedSetIterator };\n\nclass OrderedSet<K> extends TreeContainer<K, undefined> {\n  /**\n   * @param container - The initialization container.\n   * @param cmp - The compare function.\n   * @param enableIndex - Whether to enable iterator indexing function.\n   * @example\n   * new OrderedSet();\n   * new OrderedSet([0, 1, 2]);\n   * new OrderedSet([0, 1, 2], (x, y) => x - y);\n   * new OrderedSet([0, 1, 2], (x, y) => x - y, true);\n   */\n  constructor(\n    container: initContainer<K> = [],\n    cmp?: (x: K, y: K) => number,\n    enableIndex?: boolean\n  ) {\n    super(cmp, enableIndex);\n    const self = this;\n    container.forEach(function (el) {\n      self.insert(el);\n    });\n  }\n  /**\n   * @internal\n   */\n  private * _iterationFunc(\n    curNode: TreeNode<K, undefined> | undefined\n  ): Generator<K, void> {\n    if (curNode === undefined) return;\n    yield * this._iterationFunc(curNode._left);\n    yield curNode._key!;\n    yield * this._iterationFunc(curNode._right);\n  }\n  begin() {\n    return new OrderedSetIterator<K>(\n      this._header._left || this._header,\n      this._header,\n      this\n    );\n  }\n  end() {\n    return new OrderedSetIterator<K>(this._header, this._header, this);\n  }\n  rBegin() {\n    return new OrderedSetIterator<K>(\n      this._header._right || this._header,\n      this._header,\n      this,\n      IteratorType.REVERSE\n    );\n  }\n  rEnd() {\n    return new OrderedSetIterator<K>(this._header, this._header, this, IteratorType.REVERSE);\n  }\n  front() {\n    return this._header._left ? this._header._left._key : undefined;\n  }\n  back() {\n    return this._header._right ? this._header._right._key : undefined;\n  }\n  /**\n   * @description Insert element to set.\n   * @param key - The key want to insert.\n   * @param hint - You can give an iterator hint to improve insertion efficiency.\n   * @return The size of container after setting.\n   * @example\n   * const st = new OrderedSet([2, 4, 5]);\n   * const iter = st.begin();\n   * st.insert(1);\n   * st.insert(3, iter);  // give a hint will be faster.\n   */\n  insert(key: K, hint?: OrderedSetIterator<K>) {\n    return this._set(key, undefined, hint);\n  }\n  find(element: K) {\n    const resNode = this._findElementNode(this._root, element);\n    return new OrderedSetIterator<K>(resNode, this._header, this);\n  }\n  lowerBound(key: K) {\n    const resNode = this._lowerBound(this._root, key);\n    return new OrderedSetIterator<K>(resNode, this._header, this);\n  }\n  upperBound(key: K) {\n    const resNode = this._upperBound(this._root, key);\n    return new OrderedSetIterator<K>(resNode, this._header, this);\n  }\n  reverseLowerBound(key: K) {\n    const resNode = this._reverseLowerBound(this._root, key);\n    return new OrderedSetIterator<K>(resNode, this._header, this);\n  }\n  reverseUpperBound(key: K) {\n    const resNode = this._reverseUpperBound(this._root, key);\n    return new OrderedSetIterator<K>(resNode, this._header, this);\n  }\n  union(other: OrderedSet<K>) {\n    const self = this;\n    other.forEach(function (el) {\n      self.insert(el);\n    });\n    return this._length;\n  }\n  [Symbol.iterator]() {\n    return this._iterationFunc(this._root);\n  }\n  // @ts-ignore\n  eraseElementByIterator(iter: OrderedSetIterator<K>): OrderedSetIterator<K>;\n  // @ts-ignore\n  forEach(callback: (element: K, index: number, tree: OrderedSet<K>) => void): void;\n  // @ts-ignore\n  getElementByPos(pos: number): K;\n}\n\nexport default OrderedSet;\n", "var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport TreeContainer from './Base';\nimport TreeIterator from './Base/TreeIterator';\nimport { throwIteratorAccessError } from \"../../utils/throwError\";\nvar OrderedMapIterator = /** @class */ (function (_super) {\n    __extends(OrderedMapIterator, _super);\n    function OrderedMapIterator(node, header, container, iteratorType) {\n        var _this = _super.call(this, node, header, iteratorType) || this;\n        _this.container = container;\n        return _this;\n    }\n    Object.defineProperty(OrderedMapIterator.prototype, \"pointer\", {\n        get: function () {\n            if (this._node === this._header) {\n                throwIteratorAccessError();\n            }\n            var self = this;\n            return new Proxy([], {\n                get: function (_, props) {\n                    if (props === '0')\n                        return self._node._key;\n                    else if (props === '1')\n                        return self._node._value;\n                },\n                set: function (_, props, newValue) {\n                    if (props !== '1') {\n                        throw new TypeError('props must be 1');\n                    }\n                    self._node._value = newValue;\n                    return true;\n                }\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    OrderedMapIterator.prototype.copy = function () {\n        return new OrderedMapIterator(this._node, this._header, this.container, this.iteratorType);\n    };\n    return OrderedMapIterator;\n}(TreeIterator));\nvar OrderedMap = /** @class */ (function (_super) {\n    __extends(OrderedMap, _super);\n    /**\n     * @param container - The initialization container.\n     * @param cmp - The compare function.\n     * @param enableIndex - Whether to enable iterator indexing function.\n     * @example\n     * new OrderedMap();\n     * new OrderedMap([[0, 1], [2, 1]]);\n     * new OrderedMap([[0, 1], [2, 1]], (x, y) => x - y);\n     * new OrderedMap([[0, 1], [2, 1]], (x, y) => x - y, true);\n     */\n    function OrderedMap(container, cmp, enableIndex) {\n        if (container === void 0) { container = []; }\n        var _this = _super.call(this, cmp, enableIndex) || this;\n        var self = _this;\n        container.forEach(function (el) {\n            self.setElement(el[0], el[1]);\n        });\n        return _this;\n    }\n    /**\n     * @internal\n     */\n    OrderedMap.prototype._iterationFunc = function (curNode) {\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (curNode === undefined)\n                        return [2 /*return*/];\n                    return [5 /*yield**/, __values(this._iterationFunc(curNode._left))];\n                case 1:\n                    _a.sent();\n                    return [4 /*yield*/, [curNode._key, curNode._value]];\n                case 2:\n                    _a.sent();\n                    return [5 /*yield**/, __values(this._iterationFunc(curNode._right))];\n                case 3:\n                    _a.sent();\n                    return [2 /*return*/];\n            }\n        });\n    };\n    OrderedMap.prototype.begin = function () {\n        return new OrderedMapIterator(this._header._left || this._header, this._header, this);\n    };\n    OrderedMap.prototype.end = function () {\n        return new OrderedMapIterator(this._header, this._header, this);\n    };\n    OrderedMap.prototype.rBegin = function () {\n        return new OrderedMapIterator(this._header._right || this._header, this._header, this, 1 /* IteratorType.REVERSE */);\n    };\n    OrderedMap.prototype.rEnd = function () {\n        return new OrderedMapIterator(this._header, this._header, this, 1 /* IteratorType.REVERSE */);\n    };\n    OrderedMap.prototype.front = function () {\n        if (this._length === 0)\n            return;\n        var minNode = this._header._left;\n        return [minNode._key, minNode._value];\n    };\n    OrderedMap.prototype.back = function () {\n        if (this._length === 0)\n            return;\n        var maxNode = this._header._right;\n        return [maxNode._key, maxNode._value];\n    };\n    OrderedMap.prototype.lowerBound = function (key) {\n        var resNode = this._lowerBound(this._root, key);\n        return new OrderedMapIterator(resNode, this._header, this);\n    };\n    OrderedMap.prototype.upperBound = function (key) {\n        var resNode = this._upperBound(this._root, key);\n        return new OrderedMapIterator(resNode, this._header, this);\n    };\n    OrderedMap.prototype.reverseLowerBound = function (key) {\n        var resNode = this._reverseLowerBound(this._root, key);\n        return new OrderedMapIterator(resNode, this._header, this);\n    };\n    OrderedMap.prototype.reverseUpperBound = function (key) {\n        var resNode = this._reverseUpperBound(this._root, key);\n        return new OrderedMapIterator(resNode, this._header, this);\n    };\n    /**\n     * @description Insert a key-value pair or set value by the given key.\n     * @param key - The key want to insert.\n     * @param value - The value want to set.\n     * @param hint - You can give an iterator hint to improve insertion efficiency.\n     * @return The size of container after setting.\n     * @example\n     * const mp = new OrderedMap([[2, 0], [4, 0], [5, 0]]);\n     * const iter = mp.begin();\n     * mp.setElement(1, 0);\n     * mp.setElement(3, 0, iter);  // give a hint will be faster.\n     */\n    OrderedMap.prototype.setElement = function (key, value, hint) {\n        return this._set(key, value, hint);\n    };\n    OrderedMap.prototype.find = function (key) {\n        var curNode = this._findElementNode(this._root, key);\n        return new OrderedMapIterator(curNode, this._header, this);\n    };\n    /**\n     * @description Get the value of the element of the specified key.\n     * @param key - The specified key you want to get.\n     * @example\n     * const val = container.getElementByKey(1);\n     */\n    OrderedMap.prototype.getElementByKey = function (key) {\n        var curNode = this._findElementNode(this._root, key);\n        return curNode._value;\n    };\n    OrderedMap.prototype.union = function (other) {\n        var self = this;\n        other.forEach(function (el) {\n            self.setElement(el[0], el[1]);\n        });\n        return this._length;\n    };\n    OrderedMap.prototype[Symbol.iterator] = function () {\n        return this._iterationFunc(this._root);\n    };\n    return OrderedMap;\n}(TreeContainer));\nexport default OrderedMap;\n", "import TreeContainer from './Base';\nimport TreeIterator from './Base/TreeIterator';\nimport { TreeNode } from './Base/TreeNode';\nimport { initContainer, IteratorType } from '@/container/ContainerBase';\nimport { throwIteratorAccessError } from '@/utils/throwError';\n\nclass OrderedMapIterator<K, V> extends TreeIterator<K, V> {\n  container: OrderedMap<K, V>;\n  constructor(\n    node: TreeNode<K, V>,\n    header: TreeNode<K, V>,\n    container: OrderedMap<K, V>,\n    iteratorType?: IteratorType\n  ) {\n    super(node, header, iteratorType);\n    this.container = container;\n  }\n  get pointer() {\n    if (this._node === this._header) {\n      throwIteratorAccessError();\n    }\n    const self = this;\n    return new Proxy(<[K, V]><unknown>[], {\n      get(_, props: '0' | '1') {\n        if (props === '0') return self._node._key;\n        else if (props === '1') return self._node._value;\n      },\n      set(_, props: '1', newValue: V) {\n        if (props !== '1') {\n          throw new TypeError('props must be 1');\n        }\n        self._node._value = newValue;\n        return true;\n      }\n    });\n  }\n  copy() {\n    return new OrderedMapIterator<K, V>(\n      this._node,\n      this._header,\n      this.container,\n      this.iteratorType\n    );\n  }\n  // @ts-ignore\n  equals(iter: OrderedMapIterator<K, V>): boolean;\n}\n\nexport type { OrderedMapIterator };\n\nclass OrderedMap<K, V> extends TreeContainer<K, V> {\n  /**\n   * @param container - The initialization container.\n   * @param cmp - The compare function.\n   * @param enableIndex - Whether to enable iterator indexing function.\n   * @example\n   * new OrderedMap();\n   * new OrderedMap([[0, 1], [2, 1]]);\n   * new OrderedMap([[0, 1], [2, 1]], (x, y) => x - y);\n   * new OrderedMap([[0, 1], [2, 1]], (x, y) => x - y, true);\n   */\n  constructor(\n    container: initContainer<[K, V]> = [],\n    cmp?: (x: K, y: K) => number,\n    enableIndex?: boolean\n  ) {\n    super(cmp, enableIndex);\n    const self = this;\n    container.forEach(function (el) {\n      self.setElement(el[0], el[1]);\n    });\n  }\n  /**\n   * @internal\n   */\n  private * _iterationFunc(\n    curNode: TreeNode<K, V> | undefined\n  ): Generator<[K, V], void> {\n    if (curNode === undefined) return;\n    yield * this._iterationFunc(curNode._left);\n    yield <[K, V]>[curNode._key, curNode._value];\n    yield * this._iterationFunc(curNode._right);\n  }\n  begin() {\n    return new OrderedMapIterator<K, V>(this._header._left || this._header, this._header, this);\n  }\n  end() {\n    return new OrderedMapIterator<K, V>(this._header, this._header, this);\n  }\n  rBegin() {\n    return new OrderedMapIterator<K, V>(\n      this._header._right || this._header,\n      this._header,\n      this,\n      IteratorType.REVERSE\n    );\n  }\n  rEnd() {\n    return new OrderedMapIterator<K, V>(this._header, this._header, this, IteratorType.REVERSE);\n  }\n  front() {\n    if (this._length === 0) return;\n    const minNode = this._header._left!;\n    return <[K, V]>[minNode._key, minNode._value];\n  }\n  back() {\n    if (this._length === 0) return;\n    const maxNode = this._header._right!;\n    return <[K, V]>[maxNode._key, maxNode._value];\n  }\n  lowerBound(key: K) {\n    const resNode = this._lowerBound(this._root, key);\n    return new OrderedMapIterator<K, V>(resNode, this._header, this);\n  }\n  upperBound(key: K) {\n    const resNode = this._upperBound(this._root, key);\n    return new OrderedMapIterator<K, V>(resNode, this._header, this);\n  }\n  reverseLowerBound(key: K) {\n    const resNode = this._reverseLowerBound(this._root, key);\n    return new OrderedMapIterator<K, V>(resNode, this._header, this);\n  }\n  reverseUpperBound(key: K) {\n    const resNode = this._reverseUpperBound(this._root, key);\n    return new OrderedMapIterator<K, V>(resNode, this._header, this);\n  }\n  /**\n   * @description Insert a key-value pair or set value by the given key.\n   * @param key - The key want to insert.\n   * @param value - The value want to set.\n   * @param hint - You can give an iterator hint to improve insertion efficiency.\n   * @return The size of container after setting.\n   * @example\n   * const mp = new OrderedMap([[2, 0], [4, 0], [5, 0]]);\n   * const iter = mp.begin();\n   * mp.setElement(1, 0);\n   * mp.setElement(3, 0, iter);  // give a hint will be faster.\n   */\n  setElement(key: K, value: V, hint?: OrderedMapIterator<K, V>) {\n    return this._set(key, value, hint);\n  }\n  find(key: K) {\n    const curNode = this._findElementNode(this._root, key);\n    return new OrderedMapIterator<K, V>(curNode, this._header, this);\n  }\n  /**\n   * @description Get the value of the element of the specified key.\n   * @param key - The specified key you want to get.\n   * @example\n   * const val = container.getElementByKey(1);\n   */\n  getElementByKey(key: K) {\n    const curNode = this._findElementNode(this._root, key);\n    return curNode._value;\n  }\n  union(other: OrderedMap<K, V>) {\n    const self = this;\n    other.forEach(function (el) {\n      self.setElement(el[0], el[1]);\n    });\n    return this._length;\n  }\n  [Symbol.iterator]() {\n    return this._iterationFunc(this._root);\n  }\n  // @ts-ignore\n  eraseElementByIterator(iter: OrderedMapIterator<K, V>): OrderedMapIterator<K, V>;\n  // @ts-ignore\n  forEach(callback: (element: [K, V], index: number, map: OrderedMap<K, V>) => void): void;\n  // @ts-ignore\n  getElementByPos(pos: number): [K, V];\n}\n\nexport default OrderedMap;\n", "/**\n * @description Determine whether the type of key is `object`.\n * @param key - The key want to check.\n * @returns Whether the type of key is `object`.\n * @internal\n */\nexport default function checkObject<T>(key: T) {\n  const t = typeof key;\n  return (t === 'object' && key !== null) || t === 'function';\n}\n", "/**\n * @description Determine whether the type of key is `object`.\n * @param key - The key want to check.\n * @returns Whether the type of key is `object`.\n * @internal\n */\nexport default function checkObject(key) {\n    var t = typeof key;\n    return (t === 'object' && key !== null) || t === 'function';\n}\n", "var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Container, ContainerIterator } from \"../../ContainerBase\";\nimport checkObject from \"../../../utils/checkObject\";\nimport $checkWithinAccessParams from \"../../../utils/checkParams.macro\";\nimport { throwIteratorAccessError } from \"../../../utils/throwError\";\nvar HashContainerIterator = /** @class */ (function (_super) {\n    __extends(HashContainerIterator, _super);\n    /**\n     * @internal\n     */\n    function HashContainerIterator(node, header, iteratorType) {\n        var _this = _super.call(this, iteratorType) || this;\n        _this._node = node;\n        _this._header = header;\n        if (_this.iteratorType === 0 /* IteratorType.NORMAL */) {\n            _this.pre = function () {\n                if (this._node._pre === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._pre;\n                return this;\n            };\n            _this.next = function () {\n                if (this._node === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._next;\n                return this;\n            };\n        }\n        else {\n            _this.pre = function () {\n                if (this._node._next === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._next;\n                return this;\n            };\n            _this.next = function () {\n                if (this._node === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._pre;\n                return this;\n            };\n        }\n        return _this;\n    }\n    return HashContainerIterator;\n}(ContainerIterator));\nexport { HashContainerIterator };\nvar HashContainer = /** @class */ (function (_super) {\n    __extends(HashContainer, _super);\n    /**\n     * @internal\n     */\n    function HashContainer() {\n        var _this = _super.call(this) || this;\n        /**\n         * @internal\n         */\n        _this._objMap = [];\n        /**\n         * @internal\n         */\n        _this._originMap = {};\n        /**\n         * @description Unique symbol used to tag object.\n         */\n        _this.HASH_TAG = Symbol('@@HASH_TAG');\n        Object.setPrototypeOf(_this._originMap, null);\n        _this._header = {};\n        _this._header._pre = _this._header._next = _this._head = _this._tail = _this._header;\n        return _this;\n    }\n    /**\n     * @internal\n     */\n    HashContainer.prototype._eraseNode = function (node) {\n        var _pre = node._pre, _next = node._next;\n        _pre._next = _next;\n        _next._pre = _pre;\n        if (node === this._head) {\n            this._head = _next;\n        }\n        if (node === this._tail) {\n            this._tail = _pre;\n        }\n        this._length -= 1;\n    };\n    /**\n     * @internal\n     */\n    HashContainer.prototype._set = function (key, value, isObject) {\n        if (isObject === undefined)\n            isObject = checkObject(key);\n        var newTail;\n        if (isObject) {\n            var index = key[this.HASH_TAG];\n            if (index !== undefined) {\n                this._objMap[index]._value = value;\n                return this._length;\n            }\n            Object.defineProperty(key, this.HASH_TAG, {\n                value: this._objMap.length,\n                configurable: true\n            });\n            newTail = {\n                _key: key,\n                _value: value,\n                _pre: this._tail,\n                _next: this._header\n            };\n            this._objMap.push(newTail);\n        }\n        else {\n            var node = this._originMap[key];\n            if (node) {\n                node._value = value;\n                return this._length;\n            }\n            newTail = {\n                _key: key,\n                _value: value,\n                _pre: this._tail,\n                _next: this._header\n            };\n            this._originMap[key] = newTail;\n        }\n        if (this._length === 0) {\n            this._head = newTail;\n            this._header._next = newTail;\n        }\n        else {\n            this._tail._next = newTail;\n        }\n        this._tail = newTail;\n        this._header._pre = newTail;\n        return ++this._length;\n    };\n    /**\n     * @internal\n     */\n    HashContainer.prototype._findElementNode = function (key, isObject) {\n        if (isObject === undefined)\n            isObject = checkObject(key);\n        if (isObject) {\n            var index = key[this.HASH_TAG];\n            if (index === undefined)\n                return this._header;\n            return this._objMap[index];\n        }\n        else {\n            return this._originMap[key] || this._header;\n        }\n    };\n    HashContainer.prototype.clear = function () {\n        var HASH_TAG = this.HASH_TAG;\n        this._objMap.forEach(function (el) {\n            delete el._key[HASH_TAG];\n        });\n        this._objMap = [];\n        this._originMap = {};\n        Object.setPrototypeOf(this._originMap, null);\n        this._length = 0;\n        this._head = this._tail = this._header._pre = this._header._next = this._header;\n    };\n    /**\n     * @description Remove the element of the specified key.\n     * @param key - The key you want to remove.\n     * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n     *                   If a `undefined` value is passed in, the type will be automatically judged.\n     * @returns Whether erase successfully.\n     */\n    HashContainer.prototype.eraseElementByKey = function (key, isObject) {\n        var node;\n        if (isObject === undefined)\n            isObject = checkObject(key);\n        if (isObject) {\n            var index = key[this.HASH_TAG];\n            if (index === undefined)\n                return false;\n            delete key[this.HASH_TAG];\n            node = this._objMap[index];\n            delete this._objMap[index];\n        }\n        else {\n            node = this._originMap[key];\n            if (node === undefined)\n                return false;\n            delete this._originMap[key];\n        }\n        this._eraseNode(node);\n        return true;\n    };\n    HashContainer.prototype.eraseElementByIterator = function (iter) {\n        var node = iter._node;\n        if (node === this._header) {\n            throwIteratorAccessError();\n        }\n        this._eraseNode(node);\n        return iter.next();\n    };\n    HashContainer.prototype.eraseElementByPos = function (pos) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        var node = this._head;\n        while (pos--) {\n            node = node._next;\n        }\n        this._eraseNode(node);\n        return this._length;\n    };\n    return HashContainer;\n}(Container));\nexport { HashContainer };\n", "import { Container, ContainerIterator, IteratorType } from '@/container/ContainerBase';\nimport checkObject from '@/utils/checkObject';\nimport $checkWithinAccessParams from '@/utils/checkParams.macro';\nimport { throwIteratorAccessError } from '@/utils/throwError';\n\nexport type HashLinkNode<K, V> = {\n  _key: K,\n  _value: V,\n  _pre: HashLinkNode<K, V>,\n  _next: HashLinkNode<K, V>\n}\n\nexport abstract class HashContainerIterator<K, V> extends ContainerIterator<K | [K, V]> {\n  abstract readonly container: HashContainer<K, V>;\n  /**\n   * @internal\n   */\n  _node: HashLinkNode<K, V>;\n  /**\n   * @internal\n   */\n  protected readonly _header: HashLinkNode<K, V>;\n  /**\n   * @internal\n   */\n  protected constructor(\n    node: HashLinkNode<K, V>,\n    header: HashLinkNode<K, V>,\n    iteratorType?: IteratorType\n  ) {\n    super(iteratorType);\n    this._node = node;\n    this._header = header;\n    if (this.iteratorType === IteratorType.NORMAL) {\n      this.pre = function () {\n        if (this._node._pre === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._pre;\n        return this;\n      };\n      this.next = function () {\n        if (this._node === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._next;\n        return this;\n      };\n    } else {\n      this.pre = function () {\n        if (this._node._next === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._next;\n        return this;\n      };\n      this.next = function () {\n        if (this._node === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._pre;\n        return this;\n      };\n    }\n  }\n  // @ts-ignore\n  pre(): this;\n  // @ts-ignore\n  next(): this;\n}\n\nexport abstract class HashContainer<K, V> extends Container<K | [K, V]> {\n  /**\n   * @internal\n   */\n  protected _objMap: HashLinkNode<K, V>[] = [];\n  /**\n   * @internal\n   */\n  protected _originMap: Record<string, HashLinkNode<K, V>> = {};\n  /**\n   * @internal\n   */\n  protected _head: HashLinkNode<K, V>;\n  /**\n   * @internal\n   */\n  protected _tail: HashLinkNode<K, V>;\n  /**\n   * @internal\n   */\n  protected readonly _header: HashLinkNode<K, V>;\n  /**\n   * @description Unique symbol used to tag object.\n   */\n  readonly HASH_TAG = Symbol('@@HASH_TAG');\n  /**\n   * @internal\n   */\n  protected constructor() {\n    super();\n    Object.setPrototypeOf(this._originMap, null);\n    this._header = <HashLinkNode<K, V>>{};\n    this._header._pre = this._header._next = this._head = this._tail = this._header;\n  }\n  /**\n   * @internal\n   */\n  protected _eraseNode(node: HashLinkNode<K, V>) {\n    const { _pre, _next } = node;\n    _pre._next = _next;\n    _next._pre = _pre;\n    if (node === this._head) {\n      this._head = _next;\n    }\n    if (node === this._tail) {\n      this._tail = _pre;\n    }\n    this._length -= 1;\n  }\n  /**\n   * @internal\n   */\n  protected _set(key: K, value?: V, isObject?: boolean) {\n    if (isObject === undefined) isObject = checkObject(key);\n    let newTail;\n    if (isObject) {\n      const index = (<Record<symbol, number>><unknown>key)[this.HASH_TAG];\n      if (index !== undefined) {\n        this._objMap[<number>index]._value = <V>value;\n        return this._length;\n      }\n      Object.defineProperty(key, this.HASH_TAG, {\n        value: this._objMap.length,\n        configurable: true\n      });\n      newTail = {\n        _key: key,\n        _value: <V>value,\n        _pre: this._tail,\n        _next: this._header\n      };\n      this._objMap.push(newTail);\n    } else {\n      const node = this._originMap[<string><unknown>key];\n      if (node) {\n        node._value = <V>value;\n        return this._length;\n      }\n      newTail = {\n        _key: key,\n        _value: <V>value,\n        _pre: this._tail,\n        _next: this._header\n      };\n      this._originMap[<string><unknown>key] = newTail;\n    }\n    if (this._length === 0) {\n      this._head = newTail;\n      this._header._next = newTail;\n    } else {\n      this._tail._next = newTail;\n    }\n    this._tail = newTail;\n    this._header._pre = newTail;\n    return ++this._length;\n  }\n  /**\n   * @internal\n   */\n  protected _findElementNode(key: K, isObject?: boolean) {\n    if (isObject === undefined) isObject = checkObject(key);\n    if (isObject) {\n      const index = (<Record<symbol, number>><unknown>key)[this.HASH_TAG];\n      if (index === undefined) return this._header;\n      return this._objMap[index];\n    } else {\n      return this._originMap[<string><unknown>key] || this._header;\n    }\n  }\n  clear() {\n    const HASH_TAG = this.HASH_TAG;\n    this._objMap.forEach(function (el) {\n      delete (<Record<symbol, number>><unknown>el._key)[HASH_TAG];\n    });\n    this._objMap = [];\n    this._originMap = {};\n    Object.setPrototypeOf(this._originMap, null);\n    this._length = 0;\n    this._head = this._tail = this._header._pre = this._header._next = this._header;\n  }\n  /**\n   * @description Remove the element of the specified key.\n   * @param key - The key you want to remove.\n   * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n   *                   If a `undefined` value is passed in, the type will be automatically judged.\n   * @returns Whether erase successfully.\n   */\n  eraseElementByKey(key: K, isObject?: boolean) {\n    let node;\n    if (isObject === undefined) isObject = checkObject(key);\n    if (isObject) {\n      const index = (<Record<symbol, number>><unknown>key)[this.HASH_TAG];\n      if (index === undefined) return false;\n      delete (<Record<symbol, number>><unknown>key)[this.HASH_TAG];\n      node = this._objMap[index];\n      delete this._objMap[index];\n    } else {\n      node = this._originMap[<string><unknown>key];\n      if (node === undefined) return false;\n      delete this._originMap[<string><unknown>key];\n    }\n    this._eraseNode(node);\n    return true;\n  }\n  eraseElementByIterator(iter: HashContainerIterator<K, V>) {\n    const node = iter._node;\n    if (node === this._header) {\n      throwIteratorAccessError();\n    }\n    this._eraseNode(node);\n    return iter.next();\n  }\n  eraseElementByPos(pos: number) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    let node = this._head;\n    while (pos--) {\n      node = node._next;\n    }\n    this._eraseNode(node);\n    return this._length;\n  }\n}\n", "var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { HashContainer, HashContainerIterator } from \"./Base\";\nimport $checkWithinAccessParams from \"../../utils/checkParams.macro\";\nimport { throwIteratorAccessError } from \"../../utils/throwError\";\nvar HashSetIterator = /** @class */ (function (_super) {\n    __extends(HashSetIterator, _super);\n    function HashSetIterator(node, header, container, iteratorType) {\n        var _this = _super.call(this, node, header, iteratorType) || this;\n        _this.container = container;\n        return _this;\n    }\n    Object.defineProperty(HashSetIterator.prototype, \"pointer\", {\n        get: function () {\n            if (this._node === this._header) {\n                throwIteratorAccessError();\n            }\n            return this._node._key;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    HashSetIterator.prototype.copy = function () {\n        return new HashSetIterator(this._node, this._header, this.container, this.iteratorType);\n    };\n    return HashSetIterator;\n}(HashContainerIterator));\nvar HashSet = /** @class */ (function (_super) {\n    __extends(HashSet, _super);\n    function HashSet(container) {\n        if (container === void 0) { container = []; }\n        var _this = _super.call(this) || this;\n        var self = _this;\n        container.forEach(function (el) {\n            self.insert(el);\n        });\n        return _this;\n    }\n    HashSet.prototype.begin = function () {\n        return new HashSetIterator(this._head, this._header, this);\n    };\n    HashSet.prototype.end = function () {\n        return new HashSetIterator(this._header, this._header, this);\n    };\n    HashSet.prototype.rBegin = function () {\n        return new HashSetIterator(this._tail, this._header, this, 1 /* IteratorType.REVERSE */);\n    };\n    HashSet.prototype.rEnd = function () {\n        return new HashSetIterator(this._header, this._header, this, 1 /* IteratorType.REVERSE */);\n    };\n    HashSet.prototype.front = function () {\n        return this._head._key;\n    };\n    HashSet.prototype.back = function () {\n        return this._tail._key;\n    };\n    /**\n     * @description Insert element to set.\n     * @param key - The key want to insert.\n     * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n     *                   If a `undefined` value is passed in, the type will be automatically judged.\n     * @returns The size of container after inserting.\n     */\n    HashSet.prototype.insert = function (key, isObject) {\n        return this._set(key, undefined, isObject);\n    };\n    HashSet.prototype.getElementByPos = function (pos) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        var node = this._head;\n        while (pos--) {\n            node = node._next;\n        }\n        return node._key;\n    };\n    /**\n     * @description Check key if exist in container.\n     * @param key - The element you want to search.\n     * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n     *                   If a `undefined` value is passed in, the type will be automatically judged.\n     * @returns An iterator pointing to the element if found, or super end if not found.\n     */\n    HashSet.prototype.find = function (key, isObject) {\n        var node = this._findElementNode(key, isObject);\n        return new HashSetIterator(node, this._header, this);\n    };\n    HashSet.prototype.forEach = function (callback) {\n        var index = 0;\n        var node = this._head;\n        while (node !== this._header) {\n            callback(node._key, index++, this);\n            node = node._next;\n        }\n    };\n    HashSet.prototype[Symbol.iterator] = function () {\n        return function () {\n            var node;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        node = this._head;\n                        _a.label = 1;\n                    case 1:\n                        if (!(node !== this._header)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, node._key];\n                    case 2:\n                        _a.sent();\n                        node = node._next;\n                        return [3 /*break*/, 1];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        }.bind(this)();\n    };\n    return HashSet;\n}(HashContainer));\nexport default HashSet;\n", "import { initContainer, IteratorType } from '@/container/ContainerBase';\nimport { HashContainer, HashContainerIterator, HashLinkNode } from '@/container/HashContainer/Base';\nimport $checkWithinAccessParams from '@/utils/checkParams.macro';\nimport { throwIteratorAccessError } from '@/utils/throwError';\n\nclass HashSetIterator<K> extends HashContainerIterator<K, undefined> {\n  readonly container: HashSet<K>;\n  constructor(\n    node: HashLinkNode<K, undefined>,\n    header: HashLinkNode<K, undefined>,\n    container: HashSet<K>,\n    iteratorType?: IteratorType\n  ) {\n    super(node, header, iteratorType);\n    this.container = container;\n  }\n  get pointer() {\n    if (this._node === this._header) {\n      throwIteratorAccessError();\n    }\n    return this._node._key;\n  }\n  copy() {\n    return new HashSetIterator<K>(this._node, this._header, this.container, this.iteratorType);\n  }\n  // @ts-ignore\n  equals(iter: HashSetIterator<K>): boolean;\n}\n\nexport type { HashSetIterator };\n\nclass HashSet<K> extends HashContainer<K, undefined> {\n  constructor(container: initContainer<K> = []) {\n    super();\n    const self = this;\n    container.forEach(function (el) {\n      self.insert(el);\n    });\n  }\n  begin() {\n    return new HashSetIterator<K>(this._head, this._header, this);\n  }\n  end() {\n    return new HashSetIterator<K>(this._header, this._header, this);\n  }\n  rBegin() {\n    return new HashSetIterator<K>(this._tail, this._header, this, IteratorType.REVERSE);\n  }\n  rEnd() {\n    return new HashSetIterator<K>(this._header, this._header, this, IteratorType.REVERSE);\n  }\n  front(): K | undefined {\n    return this._head._key;\n  }\n  back(): K | undefined {\n    return this._tail._key;\n  }\n  /**\n   * @description Insert element to set.\n   * @param key - The key want to insert.\n   * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n   *                   If a `undefined` value is passed in, the type will be automatically judged.\n   * @returns The size of container after inserting.\n   */\n  insert(key: K, isObject?: boolean) {\n    return this._set(key, undefined, isObject);\n  }\n  getElementByPos(pos: number) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    let node = this._head;\n    while (pos--) {\n      node = node._next;\n    }\n    return node._key;\n  }\n  /**\n   * @description Check key if exist in container.\n   * @param key - The element you want to search.\n   * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n   *                   If a `undefined` value is passed in, the type will be automatically judged.\n   * @returns An iterator pointing to the element if found, or super end if not found.\n   */\n  find(key: K, isObject?: boolean) {\n    const node = this._findElementNode(key, isObject);\n    return new HashSetIterator<K>(node, this._header, this);\n  }\n  forEach(callback: (element: K, index: number, container: HashSet<K>) => void) {\n    let index = 0;\n    let node = this._head;\n    while (node !== this._header) {\n      callback(node._key, index++, this);\n      node = node._next;\n    }\n  }\n  [Symbol.iterator]() {\n    return function * (this: HashSet<K>) {\n      let node = this._head;\n      while (node !== this._header) {\n        yield node._key;\n        node = node._next;\n      }\n    }.bind(this)();\n  }\n}\n\nexport default HashSet;\n", "var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { HashContainer, HashContainerIterator } from \"./Base\";\nimport checkObject from \"../../utils/checkObject\";\nimport $checkWithinAccessParams from \"../../utils/checkParams.macro\";\nimport { throwIteratorAccessError } from \"../../utils/throwError\";\nvar HashMapIterator = /** @class */ (function (_super) {\n    __extends(HashMapIterator, _super);\n    function HashMapIterator(node, header, container, iteratorType) {\n        var _this = _super.call(this, node, header, iteratorType) || this;\n        _this.container = container;\n        return _this;\n    }\n    Object.defineProperty(HashMapIterator.prototype, \"pointer\", {\n        get: function () {\n            if (this._node === this._header) {\n                throwIteratorAccessError();\n            }\n            var self = this;\n            return new Proxy([], {\n                get: function (_, props) {\n                    if (props === '0')\n                        return self._node._key;\n                    else if (props === '1')\n                        return self._node._value;\n                },\n                set: function (_, props, newValue) {\n                    if (props !== '1') {\n                        throw new TypeError('props must be 1');\n                    }\n                    self._node._value = newValue;\n                    return true;\n                }\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    HashMapIterator.prototype.copy = function () {\n        return new HashMapIterator(this._node, this._header, this.container, this.iteratorType);\n    };\n    return HashMapIterator;\n}(HashContainerIterator));\nvar HashMap = /** @class */ (function (_super) {\n    __extends(HashMap, _super);\n    function HashMap(container) {\n        if (container === void 0) { container = []; }\n        var _this = _super.call(this) || this;\n        var self = _this;\n        container.forEach(function (el) {\n            self.setElement(el[0], el[1]);\n        });\n        return _this;\n    }\n    HashMap.prototype.begin = function () {\n        return new HashMapIterator(this._head, this._header, this);\n    };\n    HashMap.prototype.end = function () {\n        return new HashMapIterator(this._header, this._header, this);\n    };\n    HashMap.prototype.rBegin = function () {\n        return new HashMapIterator(this._tail, this._header, this, 1 /* IteratorType.REVERSE */);\n    };\n    HashMap.prototype.rEnd = function () {\n        return new HashMapIterator(this._header, this._header, this, 1 /* IteratorType.REVERSE */);\n    };\n    HashMap.prototype.front = function () {\n        if (this._length === 0)\n            return;\n        return [this._head._key, this._head._value];\n    };\n    HashMap.prototype.back = function () {\n        if (this._length === 0)\n            return;\n        return [this._tail._key, this._tail._value];\n    };\n    /**\n     * @description Insert a key-value pair or set value by the given key.\n     * @param key - The key want to insert.\n     * @param value - The value want to set.\n     * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n     *                   If a `undefined` value is passed in, the type will be automatically judged.\n     * @returns The size of container after setting.\n     */\n    HashMap.prototype.setElement = function (key, value, isObject) {\n        return this._set(key, value, isObject);\n    };\n    /**\n     * @description Get the value of the element of the specified key.\n     * @param key - The key want to search.\n     * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n     *                   If a `undefined` value is passed in, the type will be automatically judged.\n     * @example\n     * const val = container.getElementByKey(1);\n     */\n    HashMap.prototype.getElementByKey = function (key, isObject) {\n        if (isObject === undefined)\n            isObject = checkObject(key);\n        if (isObject) {\n            var index = key[this.HASH_TAG];\n            return index !== undefined ? this._objMap[index]._value : undefined;\n        }\n        var node = this._originMap[key];\n        return node ? node._value : undefined;\n    };\n    HashMap.prototype.getElementByPos = function (pos) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        var node = this._head;\n        while (pos--) {\n            node = node._next;\n        }\n        return [node._key, node._value];\n    };\n    /**\n     * @description Check key if exist in container.\n     * @param key - The element you want to search.\n     * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n     *                   If a `undefined` value is passed in, the type will be automatically judged.\n     * @returns An iterator pointing to the element if found, or super end if not found.\n     */\n    HashMap.prototype.find = function (key, isObject) {\n        var node = this._findElementNode(key, isObject);\n        return new HashMapIterator(node, this._header, this);\n    };\n    HashMap.prototype.forEach = function (callback) {\n        var index = 0;\n        var node = this._head;\n        while (node !== this._header) {\n            callback([node._key, node._value], index++, this);\n            node = node._next;\n        }\n    };\n    HashMap.prototype[Symbol.iterator] = function () {\n        return function () {\n            var node;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        node = this._head;\n                        _a.label = 1;\n                    case 1:\n                        if (!(node !== this._header)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, [node._key, node._value]];\n                    case 2:\n                        _a.sent();\n                        node = node._next;\n                        return [3 /*break*/, 1];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        }.bind(this)();\n    };\n    return HashMap;\n}(HashContainer));\nexport default HashMap;\n", "import { initContainer, IteratorType } from '@/container/ContainerBase';\nimport { HashContainer, HashContainerIterator, HashLinkNode } from '@/container/HashContainer/Base';\nimport checkObject from '@/utils/checkObject';\nimport $checkWithinAccessParams from '@/utils/checkParams.macro';\nimport { throwIteratorAccessError } from '@/utils/throwError';\n\nclass HashMapIterator<K, V> extends HashContainerIterator<K, V> {\n  readonly container: HashMap<K, V>;\n  constructor(\n    node: HashLinkNode<K, V>,\n    header: HashLinkNode<K, V>,\n    container: HashMap<K, V>,\n    iteratorType?: IteratorType\n  ) {\n    super(node, header, iteratorType);\n    this.container = container;\n  }\n  get pointer() {\n    if (this._node === this._header) {\n      throwIteratorAccessError();\n    }\n    const self = this;\n    return new Proxy(<[K, V]><unknown>[], {\n      get(_, props: '0' | '1') {\n        if (props === '0') return self._node._key;\n        else if (props === '1') return self._node._value;\n      },\n      set(_, props: '1', newValue: V) {\n        if (props !== '1') {\n          throw new TypeError('props must be 1');\n        }\n        self._node._value = newValue;\n        return true;\n      }\n    });\n  }\n  copy() {\n    return new HashMapIterator<K, V>(this._node, this._header, this.container, this.iteratorType);\n  }\n  // @ts-ignore\n  equals(iter: HashMapIterator<K, V>): boolean;\n}\n\nexport type { HashMapIterator };\n\nclass HashMap<K, V> extends HashContainer<K, V> {\n  constructor(container: initContainer<[K, V]> = []) {\n    super();\n    const self = this;\n    container.forEach(function (el) {\n      self.setElement(el[0], el[1]);\n    });\n  }\n  begin() {\n    return new HashMapIterator<K, V>(this._head, this._header, this);\n  }\n  end() {\n    return new HashMapIterator<K, V>(this._header, this._header, this);\n  }\n  rBegin() {\n    return new HashMapIterator<K, V>(this._tail, this._header, this, IteratorType.REVERSE);\n  }\n  rEnd() {\n    return new HashMapIterator<K, V>(this._header, this._header, this, IteratorType.REVERSE);\n  }\n  front() {\n    if (this._length === 0) return;\n    return <[K, V]>[this._head._key, this._head._value];\n  }\n  back() {\n    if (this._length === 0) return;\n    return <[K, V]>[this._tail._key, this._tail._value];\n  }\n  /**\n   * @description Insert a key-value pair or set value by the given key.\n   * @param key - The key want to insert.\n   * @param value - The value want to set.\n   * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n   *                   If a `undefined` value is passed in, the type will be automatically judged.\n   * @returns The size of container after setting.\n   */\n  setElement(key: K, value: V, isObject?: boolean) {\n    return this._set(key, value, isObject);\n  }\n  /**\n   * @description Get the value of the element of the specified key.\n   * @param key - The key want to search.\n   * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n   *                   If a `undefined` value is passed in, the type will be automatically judged.\n   * @example\n   * const val = container.getElementByKey(1);\n   */\n  getElementByKey(key: K, isObject?: boolean) {\n    if (isObject === undefined) isObject = checkObject(key);\n    if (isObject) {\n      const index = (<Record<symbol, number>><unknown>key)[this.HASH_TAG];\n      return index !== undefined ? this._objMap[index]._value : undefined;\n    }\n    const node = this._originMap[<string><unknown>key];\n    return node ? node._value : undefined;\n  }\n  getElementByPos(pos: number) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    let node = this._head;\n    while (pos--) {\n      node = node._next;\n    }\n    return <[K, V]>[node._key, node._value];\n  }\n  /**\n   * @description Check key if exist in container.\n   * @param key - The element you want to search.\n   * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n   *                   If a `undefined` value is passed in, the type will be automatically judged.\n   * @returns An iterator pointing to the element if found, or super end if not found.\n   */\n  find(key: K, isObject?: boolean) {\n    const node = this._findElementNode(key, isObject);\n    return new HashMapIterator<K, V>(node, this._header, this);\n  }\n  forEach(callback: (element: [K, V], index: number, hashMap: HashMap<K, V>) => void) {\n    let index = 0;\n    let node = this._head;\n    while (node !== this._header) {\n      callback(<[K, V]>[node._key, node._value], index++, this);\n      node = node._next;\n    }\n  }\n  [Symbol.iterator]() {\n    return function * (this: HashMap<K, V>) {\n      let node = this._head;\n      while (node !== this._header) {\n        yield <[K, V]>[node._key, node._value];\n        node = node._next;\n      }\n    }.bind(this)();\n  }\n}\n\nexport default HashMap;\n", "/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n", "\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '')\n\t\t\t.trim()\n\t\t\t.replace(/\\s+/g, ',')\n\t\t\t.split(',')\n\t\t\t.filter(Boolean);\n\n\t\tfor (const ns of split) {\n\t\t\tif (ns[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(ns.slice(1));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(ns);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the given string matches a namespace template, honoring\n\t * asterisks as wildcards.\n\t *\n\t * @param {String} search\n\t * @param {String} template\n\t * @return {Boolean}\n\t */\n\tfunction matchesTemplate(search, template) {\n\t\tlet searchIndex = 0;\n\t\tlet templateIndex = 0;\n\t\tlet starIndex = -1;\n\t\tlet matchIndex = 0;\n\n\t\twhile (searchIndex < search.length) {\n\t\t\tif (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === '*')) {\n\t\t\t\t// Match character or proceed with wildcard\n\t\t\t\tif (template[templateIndex] === '*') {\n\t\t\t\t\tstarIndex = templateIndex;\n\t\t\t\t\tmatchIndex = searchIndex;\n\t\t\t\t\ttemplateIndex++; // Skip the '*'\n\t\t\t\t} else {\n\t\t\t\t\tsearchIndex++;\n\t\t\t\t\ttemplateIndex++;\n\t\t\t\t}\n\t\t\t} else if (starIndex !== -1) { // eslint-disable-line no-negated-condition\n\t\t\t\t// Backtrack to the last '*' and try to match more characters\n\t\t\t\ttemplateIndex = starIndex + 1;\n\t\t\t\tmatchIndex++;\n\t\t\t\tsearchIndex = matchIndex;\n\t\t\t} else {\n\t\t\t\treturn false; // No match\n\t\t\t}\n\t\t}\n\n\t\t// Handle trailing '*' in template\n\t\twhile (templateIndex < template.length && template[templateIndex] === '*') {\n\t\t\ttemplateIndex++;\n\t\t}\n\n\t\treturn templateIndex === template.length;\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names,\n\t\t\t...createDebug.skips.map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tfor (const skip of createDebug.skips) {\n\t\t\tif (matchesTemplate(name, skip)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (const ns of createDebug.names) {\n\t\t\tif (matchesTemplate(name, ns)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n", "/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\tlet m;\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\t// eslint-disable-next-line no-return-assign\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)) && parseInt(m[1], 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug') || exports.storage.getItem('DEBUG') ;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n", "// Copyright Takatoshi Kondo 2021\n//\n// Distributed under the MIT License\n\n'use strict'\n\nconst SortedSet = require('js-sdsl').OrderedSet\nconst debugTrace = require('debug')('number-allocator:trace')\nconst debugError = require('debug')('number-allocator:error')\n/**\n * Interval constructor\n * @constructor\n * @param {Number} low  - The lowest value of the interval\n * @param {Number} high - The highest value of the interval\n */\nfunction Interval (low, high) {\n  this.low = low\n  this.high = high\n}\n\nInterval.prototype.equals = function (other) {\n  return this.low === other.low && this.high === other.high\n}\n\nInterval.prototype.compare = function (other) {\n  if (this.low < other.low && this.high < other.low) return -1\n  if (other.low < this.low && other.high < this.low) return 1\n  return 0\n}\n\n/**\n * NumberAllocator constructor.\n * The all numbers are set to vacant status.\n * Time Complexity O(1)\n * @constructor\n * @param {Number} min  - The maximum number of allocatable. The number must be integer.\n * @param {Number} maxh - The minimum number of allocatable. The number must be integer.\n */\nfunction NumberAllocator (min, max) {\n  if (!(this instanceof NumberAllocator)) {\n    return new NumberAllocator(min, max)\n  }\n\n  this.min = min\n  this.max = max\n\n  this.ss = new SortedSet(\n    [],\n    (lhs, rhs) => {\n      return lhs.compare(rhs)\n    }\n  )\n  debugTrace('Create')\n  this.clear()\n}\n\n/**\n * Get the first vacant number. The status of the number is not updated.\n * Time Complexity O(1)\n * @return {Number} - The first vacant number. If all numbers are occupied, return null.\n *                    When alloc() is called then the same value will be allocated.\n */\nNumberAllocator.prototype.firstVacant = function () {\n  if (this.ss.size() === 0) return null\n  return this.ss.front().low\n}\n\n/**\n * Allocate the first vacant number. The number become occupied status.\n * Time Complexity O(1)\n * @return {Number} - The first vacant number. If all numbers are occupied, return null.\n */\nNumberAllocator.prototype.alloc = function () {\n  if (this.ss.size() === 0) {\n    debugTrace('alloc():empty')\n    return null\n  }\n  const it = this.ss.begin()\n  const low = it.pointer.low\n  const high = it.pointer.high\n  const num = low\n  if (num + 1 <= high) {\n    // x|----|\n    this.ss.updateKeyByIterator(it, new Interval(low + 1, high))\n  } else {\n    this.ss.eraseElementByPos(0)\n  }\n  debugTrace('alloc():' + num)\n  return num\n}\n\n/**\n * Use the number. The number become occupied status.\n * If the number has already been occupied, then return false.\n * Time Complexity O(logN) : N is the number of intervals (not numbers)\n * @param {Number} num - The number to request use.\n * @return {Boolean} - If `num` was not occupied, then return true, otherwise return false.\n */\nNumberAllocator.prototype.use = function (num) {\n  const key = new Interval(num, num)\n  const it = this.ss.lowerBound(key)\n  if (!it.equals(this.ss.end())) {\n    const low = it.pointer.low\n    const high = it.pointer.high\n    if (it.pointer.equals(key)) {\n      // |x|\n      this.ss.eraseElementByIterator(it)\n      debugTrace('use():' + num)\n      return true\n    }\n\n    // x |-----|\n    if (low > num) return false\n\n    // |x----|\n    if (low === num) {\n      // x|----|\n      this.ss.updateKeyByIterator(it, new Interval(low + 1, high))\n      debugTrace('use():' + num)\n      return true\n    }\n\n    // |----x|\n    if (high === num) {\n      // |----|x\n      this.ss.updateKeyByIterator(it, new Interval(low, high - 1))\n      debugTrace('use():' + num)\n      return true\n    }\n\n    // |--x--|\n    // x|--|\n    this.ss.updateKeyByIterator(it, new Interval(num + 1, high))\n    // |--|x|--|\n    this.ss.insert(new Interval(low, num - 1))\n    debugTrace('use():' + num)\n    return true\n  }\n\n  debugTrace('use():failed')\n  return false\n}\n\n/**\n * Deallocate the number. The number become vacant status.\n * Time Complexity O(logN) : N is the number of intervals (not numbers)\n * @param {Number} num - The number to deallocate. The number must be occupied status.\n *                       In other words, the number must be allocated by alloc() or occupied be use().\n */\nNumberAllocator.prototype.free = function (num) {\n  if (num < this.min || num > this.max) {\n    debugError('free():' + num + ' is out of range')\n    return\n  }\n  const key = new Interval(num, num)\n  const it = this.ss.upperBound(key)\n  if (it.equals(this.ss.end())) {\n    // ....v\n    if (it.equals(this.ss.begin())) {\n      // Insert new interval\n      this.ss.insert(key)\n      return\n    }\n    it.pre()\n    const low = it.pointer.high\n    const high = it.pointer.high\n    if (high + 1 === num) {\n      // Concat to left\n      this.ss.updateKeyByIterator(it, new Interval(low, num))\n    } else {\n      // Insert new interval\n      this.ss.insert(key)\n    }\n  } else {\n    if (it.equals(this.ss.begin())) {\n      // v....\n      if (num + 1 === it.pointer.low) {\n        // Concat to right\n        const high = it.pointer.high\n        this.ss.updateKeyByIterator(it, new Interval(num, high))\n      } else {\n        // Insert new interval\n        this.ss.insert(key)\n      }\n    } else {\n      // ..v..\n      const rLow = it.pointer.low\n      const rHigh = it.pointer.high\n      it.pre()\n      const lLow = it.pointer.low\n      const lHigh = it.pointer.high\n      if (lHigh + 1 === num) {\n        if (num + 1 === rLow) {\n          // Concat to left and right\n          this.ss.eraseElementByIterator(it)\n          this.ss.updateKeyByIterator(it, new Interval(lLow, rHigh))\n        } else {\n          // Concat to left\n          this.ss.updateKeyByIterator(it, new Interval(lLow, num))\n        }\n      } else {\n        if (num + 1 === rLow) {\n          // Concat to right\n          this.ss.eraseElementByIterator(it.next())\n          this.ss.insert(new Interval(num, rHigh))\n        } else {\n          // Insert new interval\n          this.ss.insert(key)\n        }\n      }\n    }\n  }\n  debugTrace('free():' + num)\n}\n\n/**\n * Clear all occupied numbers.\n * The all numbers are set to vacant status.\n * Time Complexity O(1)\n */\nNumberAllocator.prototype.clear = function () {\n  debugTrace('clear()')\n  this.ss.clear()\n  this.ss.insert(new Interval(this.min, this.max))\n}\n\n/**\n * Get the number of intervals. Interval is internal structure of this library.\n * This function is for debugging.\n * Time Complexity O(1)\n * @return {Number} - The number of intervals.\n */\nNumberAllocator.prototype.intervalCount = function () {\n  return this.ss.size()\n}\n\n/**\n * Dump the internal structor of the library.\n * This function is for debugging.\n * Time Complexity O(N) : N is the number of intervals (not numbers)\n */\nNumberAllocator.prototype.dump = function () {\n  console.log('length:' + this.ss.size())\n  for (const element of this.ss) {\n    console.log(element)\n  }\n}\n\nmodule.exports = NumberAllocator\n", "// Copyright Takatoshi Kondo 2021\n//\n// Distributed under the MIT License\n\nconst NumberAllocator = require('./lib/number-allocator.js')\n\nmodule.exports.NumberAllocator = NumberAllocator\n", null, null, null, null],
  "mappings": "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",
  "names": ["Stack", "v", "bf", "__extends", "ContainerIterator", "Base", "Container", "extendStatics", "d", "b", "Object", "setPrototypeOf", "__proto__", "Array", "p", "prototype", "hasOwnProperty", "call", "TypeError", "String", "__", "this", "constructor", "create", "iteratorType", "equals", "iter", "_node", "_length", "defineProperty", "get", "enumerable", "configurable", "size", "empty", "_super", "apply", "arguments", "__extends", "Stack", "extendStatics", "d", "b", "Object", "setPrototypeOf", "__proto__", "Array", "p", "prototype", "hasOwnProperty", "call", "TypeError", "String", "__", "this", "constructor", "create", "_super", "container", "_this", "_stack", "self", "forEach", "el", "push", "clear", "_length", "element", "pop", "top", "Base", "__extends", "Queue", "extendStatics", "d", "b", "Object", "setPrototypeOf", "__proto__", "Array", "p", "prototype", "hasOwnProperty", "call", "TypeError", "String", "__", "this", "constructor", "create", "_super", "container", "_this", "_first", "_queue", "self", "forEach", "el", "push", "clear", "_length", "element", "capacity", "length", "length_1", "i", "pop", "front", "Base", "__extends", "__read", "__spreadArray", "PriorityQueue", "extendStatics", "d", "b", "Object", "setPrototypeOf", "__proto__", "Array", "p", "prototype", "hasOwnProperty", "call", "TypeError", "String", "__", "this", "constructor", "create", "o", "n", "m", "Symbol", "iterator", "i", "r", "ar", "e", "next", "done", "push", "value", "error", "to", "from", "pack", "arguments", "length", "l", "slice", "concat", "_super", "container", "cmp", "copy", "x", "y", "_this", "_cmp", "isArray", "_priorityQueue", "self_1", "forEach", "el", "_length", "halfLength", "parent_1", "_pushDown", "_pushUp", "pos", "item", "parent_2", "parentItem", "left", "right", "minItem", "clear", "pop", "last", "top", "find", "indexOf", "remove", "index", "splice", "updateItem", "toArray", "Base", "__extends", "SequentialContainer", "extendStatics", "d", "b", "Object", "setPrototypeOf", "__proto__", "Array", "p", "prototype", "hasOwnProperty", "call", "TypeError", "String", "__", "this", "constructor", "create", "_super", "apply", "arguments", "Container", "throwIteratorAccessError", "RangeError", "__extends", "RandomIterator", "extendStatics", "d", "b", "Object", "setPrototypeOf", "__proto__", "Array", "p", "prototype", "hasOwnProperty", "call", "TypeError", "String", "__", "this", "constructor", "create", "_super", "index", "iteratorType", "_this", "_node", "pre", "throwIteratorAccessError", "next", "container", "size", "defineProperty", "get", "getElementByPos", "set", "newValue", "setElementByPos", "enumerable", "configurable", "ContainerIterator", "__extends", "__generator", "__read", "__spreadArray", "__values", "VectorIterator", "Vector", "extendStatics", "d", "b", "Object", "setPrototypeOf", "__proto__", "Array", "p", "prototype", "hasOwnProperty", "call", "TypeError", "String", "__", "this", "constructor", "create", "thisArg", "body", "_", "label", "sent", "t", "trys", "ops", "f", "y", "g", "next", "verb", "throw", "return", "Symbol", "iterator", "n", "v", "step", "op", "done", "value", "pop", "length", "push", "e", "o", "m", "i", "r", "ar", "error", "to", "from", "pack", "arguments", "l", "slice", "concat", "s", "_super", "node", "container", "iteratorType", "_this", "copy", "_node", "RandomIterator", "isArray", "_vector", "_length", "self_1", "forEach", "el", "pushBack", "clear", "begin", "end", "rBegin", "rEnd", "front", "back", "getElementByPos", "pos", "RangeError", "eraseElementByPos", "splice", "eraseElementByValue", "index", "eraseElementByIterator", "iter", "element", "popBack", "setElementByPos", "insert", "num", "_a", "apply", "fill", "find", "reverse", "unique", "sort", "cmp", "callback", "bind", "SequentialContainer", "__extends", "__generator", "LinkListIterator", "LinkList", "extendStatics", "d", "b", "Object", "setPrototypeOf", "__proto__", "Array", "p", "prototype", "hasOwnProperty", "call", "TypeError", "String", "__", "this", "constructor", "create", "thisArg", "body", "_", "label", "sent", "t", "trys", "ops", "f", "y", "g", "next", "verb", "throw", "return", "Symbol", "iterator", "n", "v", "step", "op", "done", "value", "pop", "length", "push", "e", "_super", "_node", "_header", "container", "iteratorType", "_this", "pre", "_pre", "throwIteratorAccessError", "_next", "defineProperty", "get", "_value", "set", "newValue", "enumerable", "configurable", "copy", "ContainerIterator", "_head", "_tail", "self", "forEach", "el", "pushBack", "_eraseNode", "node", "_length", "_insertNode", "clear", "begin", "end", "rBegin", "rEnd", "front", "back", "getElementByPos", "pos", "RangeError", "curNode", "eraseElementByPos", "eraseElementByValue", "eraseElementByIterator", "iter", "element", "popBack", "pushFront", "popFront", "setElementByPos", "insert", "num", "i", "find", "reverse", "pHead", "pTail", "cnt", "tmp", "unique", "tmpNode", "sort", "cmp", "arr", "merge", "list", "curNode_1", "callback", "index", "_a", "bind", "SequentialContainer", "__extends", "__generator", "__read", "__spreadArray", "DequeIterator", "Deque", "extendStatics", "d", "b", "Object", "setPrototypeOf", "__proto__", "Array", "p", "prototype", "hasOwnProperty", "call", "TypeError", "String", "__", "this", "constructor", "create", "thisArg", "body", "_", "label", "sent", "t", "trys", "ops", "f", "y", "g", "next", "verb", "throw", "return", "Symbol", "iterator", "n", "v", "step", "op", "done", "value", "pop", "length", "push", "e", "o", "m", "i", "r", "ar", "error", "to", "from", "pack", "arguments", "l", "slice", "concat", "_super", "node", "container", "iteratorType", "_this", "copy", "_node", "RandomIterator", "_bucketSize", "_first", "_curFirst", "_last", "_curLast", "_bucketNum", "_map", "_length", "size", "Math", "max", "ceil", "needBucketNum", "self", "forEach", "element", "pushBack", "_reAllocate", "newMap", "addBucketNum", "_getElementIndex", "pos", "offset", "offsetRemainder", "curNodePointerIndex", "curNodeBucketIndex", "clear", "begin", "end", "rBegin", "rEnd", "front", "back", "popBack", "pushFront", "popFront", "getElementByPos", "RangeError", "_a", "setElementByPos", "insert", "num", "arr", "cut", "eraseElementByPos", "self_1", "el", "eraseElementByValue", "eraseElementByIterator", "iter", "find", "reverse", "tmp", "unique", "index", "pre", "cur", "sort", "cmp", "shrinkToFit", "callback", "bind", "SequentialContainer", "__extends", "TreeNode", "TreeNodeEnableIndex", "extendStatics", "d", "b", "Object", "setPrototypeOf", "__proto__", "Array", "p", "prototype", "hasOwnProperty", "call", "TypeError", "String", "__", "this", "constructor", "create", "key", "value", "_color", "_key", "undefined", "_value", "_left", "_right", "_parent", "_pre", "preNode", "pre", "_next", "nextNode", "_rotateLeft", "PP", "V", "R", "_rotateRight", "F", "K", "_super", "_this", "apply", "arguments", "_subTreeSize", "parent", "_recount", "__extends", "__read", "__values", "TreeContainer", "init_Base", "extendStatics", "d", "b", "Object", "setPrototypeOf", "__proto__", "Array", "p", "prototype", "hasOwnProperty", "call", "TypeError", "String", "__", "this", "constructor", "create", "o", "n", "m", "Symbol", "iterator", "i", "r", "ar", "e", "next", "done", "push", "value", "error", "s", "length", "_super", "cmp", "enableIndex", "x", "y", "_this", "_root", "undefined", "_cmp", "_TreeNodeClass", "TreeNodeEnableIndex", "_set", "key", "hint", "curNode", "_preSet", "_parent", "_header", "_subTreeSize", "nodeList", "_insertNodeSelfBalance", "_a", "parentNode", "grandParent", "curNode_1", "_recount", "_length", "_eraseNode", "_preEraseNode", "TreeNode", "_lowerBound", "resNode", "cmpResult", "_key", "_right", "_left", "_upperBound", "_reverseLowerBound", "_reverseUpperBound", "_eraseNodeSelfBalance", "_color", "brother", "_rotateLeft", "_rotateRight", "_b", "clear", "swapNode", "_value", "_inOrderTraversal", "callback", "ifReturn", "uncle", "GP", "minNode", "compareToMin", "maxNode", "compareToMax", "iterNode", "_node", "iterCmpRes", "preNode", "_pre", "preCmpRes", "_findElementNode", "updateKeyByIterator", "iter", "node", "throwIteratorAccessError", "_next", "preKey", "nextKey", "eraseElementByPos", "pos", "RangeError", "index", "self", "eraseElementByKey", "eraseElementByIterator", "hasNoRight", "isNormal", "iteratorType", "forEach", "e_1", "_c", "element", "e_1_1", "return", "getElementByPos", "e_2", "res", "e_2_1", "getHeight", "traversal", "Math", "max", "Container", "__extends", "TreeIterator", "extendStatics", "d", "b", "Object", "setPrototypeOf", "__proto__", "Array", "p", "prototype", "hasOwnProperty", "call", "TypeError", "String", "__", "this", "constructor", "create", "_super", "node", "header", "iteratorType", "_this", "_node", "_header", "pre", "_left", "throwIteratorAccessError", "_pre", "next", "_next", "_right", "defineProperty", "get", "root", "_parent", "_subTreeSize", "index", "enumerable", "configurable", "ContainerIterator", "__extends", "__generator", "__values", "OrderedSetIterator", "OrderedSet", "extendStatics", "d", "b", "Object", "setPrototypeOf", "__proto__", "Array", "p", "prototype", "hasOwnProperty", "call", "TypeError", "String", "__", "this", "constructor", "create", "thisArg", "body", "_", "label", "sent", "t", "trys", "ops", "f", "y", "g", "next", "verb", "throw", "return", "Symbol", "iterator", "n", "v", "step", "op", "done", "value", "pop", "length", "push", "e", "o", "s", "m", "i", "_super", "node", "header", "container", "iteratorType", "_this", "defineProperty", "get", "_node", "_header", "throwIteratorAccessError", "_key", "enumerable", "configurable", "copy", "TreeIterator", "cmp", "enableIndex", "self", "forEach", "el", "insert", "_iterationFunc", "curNode", "_a", "undefined", "_left", "_right", "begin", "end", "rBegin", "rEnd", "front", "back", "key", "hint", "_set", "find", "element", "resNode", "_findElementNode", "_root", "lowerBound", "_lowerBound", "upperBound", "_upperBound", "reverseLowerBound", "_reverseLowerBound", "reverseUpperBound", "_reverseUpperBound", "union", "other", "_length", "TreeContainer", "__extends", "__generator", "__values", "OrderedMapIterator", "OrderedMap", "extendStatics", "d", "b", "Object", "setPrototypeOf", "__proto__", "Array", "p", "prototype", "hasOwnProperty", "call", "TypeError", "String", "__", "this", "constructor", "create", "thisArg", "body", "_", "label", "sent", "t", "trys", "ops", "f", "y", "g", "next", "verb", "throw", "return", "Symbol", "iterator", "n", "v", "step", "op", "done", "value", "pop", "length", "push", "e", "o", "s", "m", "i", "_super", "node", "header", "container", "iteratorType", "_this", "defineProperty", "get", "_node", "_header", "throwIteratorAccessError", "self", "Proxy", "props", "_key", "_value", "set", "newValue", "enumerable", "configurable", "copy", "TreeIterator", "cmp", "enableIndex", "forEach", "el", "setElement", "_iterationFunc", "curNode", "_a", "undefined", "_left", "_right", "begin", "end", "rBegin", "rEnd", "front", "_length", "minNode", "back", "maxNode", "lowerBound", "key", "resNode", "_lowerBound", "_root", "upperBound", "_upperBound", "reverseLowerBound", "_reverseLowerBound", "reverseUpperBound", "_reverseUpperBound", "hint", "_set", "find", "_findElementNode", "getElementByKey", "union", "other", "TreeContainer", "key", "t", "__extends", "HashContainerIterator", "HashContainer", "init_Base", "extendStatics", "d", "b", "Object", "setPrototypeOf", "__proto__", "Array", "p", "prototype", "hasOwnProperty", "call", "TypeError", "String", "__", "this", "constructor", "create", "_super", "node", "header", "iteratorType", "_this", "_node", "_header", "pre", "_pre", "throwIteratorAccessError", "next", "_next", "ContainerIterator", "_objMap", "_originMap", "HASH_TAG", "Symbol", "_head", "_tail", "_eraseNode", "_length", "_set", "key", "value", "isObject", "undefined", "checkObject", "newTail", "index", "_value", "defineProperty", "length", "configurable", "_key", "push", "_findElementNode", "clear", "forEach", "el", "eraseElementByKey", "eraseElementByIterator", "iter", "eraseElementByPos", "pos", "RangeError", "Container", "__extends", "__generator", "HashSetIterator", "HashSet", "extendStatics", "d", "b", "Object", "setPrototypeOf", "__proto__", "Array", "p", "prototype", "hasOwnProperty", "call", "TypeError", "String", "__", "this", "constructor", "create", "thisArg", "body", "_", "label", "sent", "t", "trys", "ops", "f", "y", "g", "next", "verb", "throw", "return", "Symbol", "iterator", "n", "v", "step", "op", "done", "value", "pop", "length", "push", "e", "_super", "node", "header", "container", "iteratorType", "_this", "defineProperty", "get", "_node", "_header", "throwIteratorAccessError", "_key", "enumerable", "configurable", "copy", "HashContainerIterator", "self", "forEach", "el", "insert", "begin", "_head", "end", "rBegin", "_tail", "rEnd", "front", "back", "key", "isObject", "_set", "undefined", "getElementByPos", "pos", "_length", "RangeError", "_next", "find", "_findElementNode", "callback", "index", "_a", "bind", "HashContainer", "__extends", "__generator", "HashMapIterator", "HashMap", "extendStatics", "d", "b", "Object", "setPrototypeOf", "__proto__", "Array", "p", "prototype", "hasOwnProperty", "call", "TypeError", "String", "__", "this", "constructor", "create", "thisArg", "body", "_", "label", "sent", "t", "trys", "ops", "f", "y", "g", "next", "verb", "throw", "return", "Symbol", "iterator", "n", "v", "step", "op", "done", "value", "pop", "length", "push", "e", "_super", "node", "header", "container", "iteratorType", "_this", "defineProperty", "get", "_node", "_header", "throwIteratorAccessError", "self", "Proxy", "props", "_key", "_value", "set", "newValue", "enumerable", "configurable", "copy", "HashContainerIterator", "forEach", "el", "setElement", "begin", "_head", "end", "rBegin", "_tail", "rEnd", "front", "_length", "back", "key", "isObject", "_set", "getElementByKey", "undefined", "checkObject", "index", "HASH_TAG", "_objMap", "_originMap", "getElementByPos", "pos", "RangeError", "_next", "find", "_findElementNode", "callback", "_a", "bind", "HashContainer", "require_number_allocator"]
}
